[
{
  "model": "app.tag",
  "pk": 1,
  "fields": {
    "name": "プログラミング",
    "pub_date": "2015-08-09T14:38:01.103Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 2,
  "fields": {
    "name": "Python",
    "pub_date": "2015-08-09T14:38:01.133Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 3,
  "fields": {
    "name": "LT",
    "pub_date": "2015-08-09T14:40:00.384Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 4,
  "fields": {
    "name": "恐竜",
    "pub_date": "2015-08-09T14:41:37.322Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 5,
  "fields": {
    "name": "化石",
    "pub_date": "2015-08-09T14:41:37.411Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 6,
  "fields": {
    "name": "攻殻機動隊",
    "pub_date": "2015-08-09T14:44:31.436Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 7,
  "fields": {
    "name": "ARIZE",
    "pub_date": "2015-08-09T14:44:31.452Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 8,
  "fields": {
    "name": "C言語",
    "pub_date": "2015-08-09T14:46:01.371Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 9,
  "fields": {
    "name": "FizzBuzz",
    "pub_date": "2015-08-09T14:46:01.418Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 10,
  "fields": {
    "name": "C#",
    "pub_date": "2015-08-09T14:49:10.255Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 11,
  "fields": {
    "name": "GUNDAM",
    "pub_date": "2015-08-09T14:49:59.937Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 12,
  "fields": {
    "name": "GCJ",
    "pub_date": "2015-08-09T14:53:30.708Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 13,
  "fields": {
    "name": "食事",
    "pub_date": "2015-08-09T14:58:36.261Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 14,
  "fields": {
    "name": "もんじゃ",
    "pub_date": "2015-08-09T14:58:36.300Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 15,
  "fields": {
    "name": "動物",
    "pub_date": "2015-08-09T15:03:12.141Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 16,
  "fields": {
    "name": "C++",
    "pub_date": "2015-08-09T15:04:41.703Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 17,
  "fields": {
    "name": "クロージャ",
    "pub_date": "2015-08-09T15:09:42.627Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 18,
  "fields": {
    "name": "OpenCV",
    "pub_date": "2015-08-09T15:13:58.721Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 20,
  "fields": {
    "name": "映画",
    "pub_date": "2015-08-14T13:08:00.432Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 21,
  "fields": {
    "name": "餃子",
    "pub_date": "2015-08-16T03:36:44.607Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 22,
  "fields": {
    "name": "うどん",
    "pub_date": "2015-08-16T03:42:59.512Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 25,
  "fields": {
    "name": "デザイン",
    "pub_date": "2015-08-18T08:54:15.522Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 26,
  "fields": {
    "name": "jQuery",
    "pub_date": "2015-08-22T08:32:42.131Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 27,
  "fields": {
    "name": "ロボット",
    "pub_date": "2015-08-23T12:05:33.817Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 30,
  "fields": {
    "name": "寿司",
    "pub_date": "2015-08-26T11:21:48.004Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 31,
  "fields": {
    "name": "天ぷら",
    "pub_date": "2015-08-26T11:22:51.859Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 32,
  "fields": {
    "name": "Git",
    "pub_date": "2015-08-27T02:29:32.346Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 33,
  "fields": {
    "name": "Heroku",
    "pub_date": "2015-09-06T11:34:53.893Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 34,
  "fields": {
    "name": "カレー",
    "pub_date": "2015-10-05T13:36:13.995Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 35,
  "fields": {
    "name": "温泉",
    "pub_date": "2015-10-13T13:24:45.747Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 36,
  "fields": {
    "name": "数学",
    "pub_date": "2015-11-13T09:34:30.042Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 37,
  "fields": {
    "name": "Windows",
    "pub_date": "2015-12-17T02:00:55.827Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 39,
  "fields": {
    "name": "雑学",
    "pub_date": "2016-01-17T07:18:57.554Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 40,
  "fields": {
    "name": "命名規約",
    "pub_date": "2016-01-17T07:20:11.646Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 41,
  "fields": {
    "name": "アニメ",
    "pub_date": "2016-01-19T12:44:05.096Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 42,
  "fields": {
    "name": "植物",
    "pub_date": "2016-01-26T01:10:23Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 44,
  "fields": {
    "name": "Socket",
    "pub_date": "2016-01-30T12:52:54.854Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 46,
  "fields": {
    "name": "Atom",
    "pub_date": "2016-04-28T01:57:54.663Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 47,
  "fields": {
    "name": "Electron",
    "pub_date": "2016-05-08T00:34:42.168Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 48,
  "fields": {
    "name": "Django",
    "pub_date": "2016-05-21T07:52:30.700Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 49,
  "fields": {
    "name": "居酒屋",
    "pub_date": "2016-05-22T11:38:32.611Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 50,
  "fields": {
    "name": "時計",
    "pub_date": "2016-05-31T13:53:49.235Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 51,
  "fields": {
    "name": "マネジメント",
    "pub_date": "2016-06-13T05:55:27.193Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 52,
  "fields": {
    "name": "Linux",
    "pub_date": "2016-08-11T08:11:30.756Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 53,
  "fields": {
    "name": "機械学習",
    "pub_date": "2016-09-19T02:19:41.558Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 54,
  "fields": {
    "name": "Vivaldi",
    "pub_date": "2016-09-30T14:05:25.017Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 55,
  "fields": {
    "name": "VSCode",
    "pub_date": "2016-12-01T06:02:40.362Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 56,
  "fields": {
    "name": "TypeScript",
    "pub_date": "2016-12-18T09:49:44.330Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 57,
  "fields": {
    "name": "Qt",
    "pub_date": "2017-02-04T12:04:09.735Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 58,
  "fields": {
    "name": "Elixir",
    "pub_date": "2017-02-11T05:16:19.586Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 59,
  "fields": {
    "name": "Jupyter",
    "pub_date": "2017-08-19T03:22:57.286Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 60,
  "fields": {
    "name": "GitHub",
    "pub_date": "2017-09-05T13:42:38.051Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 61,
  "fields": {
    "name": "生活",
    "pub_date": "2017-09-16T01:37:36.884Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 62,
  "fields": {
    "name": "Docker",
    "pub_date": "2017-10-21T11:56:25.554Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 63,
  "fields": {
    "name": "reveal.js",
    "pub_date": "2018-04-05T06:59:24.008Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 64,
  "fields": {
    "name": "Go",
    "pub_date": "2018-12-16T14:07:42.493Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 65,
  "fields": {
    "name": "Node.js",
    "pub_date": "2019-08-04T06:21:35.400Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 66,
  "fields": {
    "name": "VMware",
    "pub_date": "2019-09-01T00:38:40.149Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 67,
  "fields": {
    "name": "WSL",
    "pub_date": "2020-03-08T06:55:48.186Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 68,
  "fields": {
    "name": "Vim",
    "pub_date": "2021-09-20T14:58:52.639Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 69,
  "fields": {
    "name": "AtCoder",
    "pub_date": "2021-12-18T05:38:22.739Z",
    "user": 2
  }
},
{
  "model": "app.tag",
  "pk": 70,
  "fields": {
    "name": "WSL2",
    "pub_date": "2023-02-10T04:00:02.694Z",
    "user": 2
  }
},
{
  "model": "app.memo",
  "pk": 1,
  "fields": {
    "title": "Hello, python!",
    "content": "# Hello World with Python\r\n\r\n```py\r\n# coding: utf-8\r\nprint('Hello, python!')\r\n```",
    "pub_date": "2015-08-09T14:38:01.085Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 2,
  "fields": {
    "title": "LT random",
    "content": "# *random*\r\n\r\n```py\r\nimport random\r\n\r\nwith open('lt_list.txt', 'r', encoding='shift_jis') as f:\r\n    file = f.readlines()\r\n\r\nif file != []:\r\n    choice = random.choice(file)\r\n    print(('最後は ' if len(file) == 1 else '次は ') + choice[:-1] + ' です(っ´∀｀)っ')\r\n    file.remove(choice)\r\n\r\n    with open('lt_list.txt', 'w', encoding='shift_jis') as f:\r\n        f.writelines(file)\r\n```",
    "pub_date": "2015-08-09T14:40:00.343Z",
    "user": 2,
    "tags": [
      1,
      2,
      3
    ]
  }
},
{
  "model": "app.memo",
  "pk": 3,
  "fields": {
    "title": "ブラック・ビューティ",
    "content": "# *t-rex*\r\n\r\n![image](http://2.bp.blogspot.com/-sTfmaquq7xI/UFPEnwmCcHI/AAAAAAAABjk/ZCfXs3Ef_Lw/s1600/Royal+Tyrell+Museum+&+Hoodoo+Formations+011.JPG)",
    "pub_date": "2015-08-09T14:41:37.294Z",
    "user": 2,
    "tags": [
      4,
      5
    ]
  }
},
{
  "model": "app.memo",
  "pk": 4,
  "fields": {
    "title": "T-REXが弱かったとかいうやつ",
    "content": "なめるなよ！！\r\n\r\n![image](http://3.bp.blogspot.com/-kvbJ2Lk3e5g/Ur1GXV2yTsI/AAAAAAAAcck/uu_54SA8zwY/s450/trex_kokkaku.png)</textarea>\r\n",
    "pub_date": "2015-08-09T14:42:48.335Z",
    "user": 2,
    "tags": [
      4,
      5
    ]
  }
},
{
  "model": "app.memo",
  "pk": 5,
  "fields": {
    "title": "攻殻機動隊ARIZE 新劇場版",
    "content": "# ボーマ\r\n活躍するかなぁ．．．\r\n\r\n[http://kokaku-a.jp](http://kokaku-a.jp)\r\n\r\n![image](http://blog-imgs-62.fc2.com/d/d/3/dd360/arise_01.jpg)\r\n",
    "pub_date": "2015-08-09T14:44:31.429Z",
    "user": 2,
    "tags": [
      6,
      7
    ]
  }
},
{
  "model": "app.memo",
  "pk": 6,
  "fields": {
    "title": "C言語のFizzBuzz",
    "content": "# FizzBuzz\r\n\r\nフォーマット文字列のポインタをずらすのと，途中に終端文字`\\0`が入っているのがポイント！\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main(int argc, char const *argv[])\r\n{\r\n    for (size_t i = 1; i < 16; i++)\r\n    {\r\n        printf(\"%d\\n\\0Fizz\\n\\0FizzBuzz\\n\" + ((i % 15) ? (i % 3) ? (i % 5) ? 0 : 14 : 4 : 10), i);\r\n    }\r\n    return 0;\r\n}\r\n```",
    "pub_date": "2015-08-09T14:46:01.320Z",
    "user": 2,
    "tags": [
      1,
      8,
      9
    ]
  }
},
{
  "model": "app.memo",
  "pk": 7,
  "fields": {
    "title": "PythonのFizzBuzz",
    "content": "# FizzBuzz\r\n\r\nこれは**cool!!** `f + b or str(n)`がなんとも(。-∀-)\r\n\r\n```py\r\nfrom itertools import cycle\r\n\r\nfor s in [f + b or str(n) for f, b, n in zip(cycle([''] * 2 + ['Fizz']), cycle([''] * 4 + ['Buzz']), range(1, 16))]: print(s)\r\n```",
    "pub_date": "2015-08-09T14:48:15.652Z",
    "user": 2,
    "tags": [
      1,
      2,
      9
    ]
  }
},
{
  "model": "app.memo",
  "pk": 8,
  "fields": {
    "title": "C#のFizzBuzz",
    "content": "#FizzBuzz\r\n\r\n`LINQ`でやってみた．\r\n\r\n```cs\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApplication\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Enumerable.Range(1, 15).Select(x => (x % 15 == 0) ? \"FizzBuxx\" : (x % 3 == 0) ? \"Fizz\" : (x % 5 == 0) ? \"Buzz\" :  x.ToString()).ToList().ForEach(x => Console.WriteLine(x));\r\n        }\r\n    }\r\n}\r\n```",
    "pub_date": "2015-08-09T14:49:10.206Z",
    "user": 2,
    "tags": [
      1,
      9,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 9,
  "fields": {
    "title": "νガンダム",
    "content": "# 革命論\r\n\r\n革命のことを知らないんだな・・・．革命はいつもインテリがはじめるんだ．夢見たいな目標を持ってやるからいつも過激なことしかやらない！\r\n\r\n![image](https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRrPD-1iRuYSJ3YRRf4eSknNu_rDZHvI3YJqVRK9aeFqByaNROTnw)\r\n",
    "pub_date": "2015-08-09T14:49:59.928Z",
    "user": 2,
    "tags": [
      11
    ]
  }
},
{
  "model": "app.memo",
  "pk": 10,
  "fields": {
    "title": "Google Code Jam 2015",
    "content": "# Google Code Jam\r\n\r\n今年はpythonでやるかぁ．\r\n\r\n* Google Code Jam  \r\n [https://code.google.com/codejam](https://code.google.com/codejam)\r\n\r\n* Go, Hero!  \r\n [http://www.go-hero.net/jam/](http://www.go-hero.net/jam/)\r\n",
    "pub_date": "2015-08-09T14:53:30.686Z",
    "user": 2,
    "tags": [
      1,
      12
    ]
  }
},
{
  "model": "app.memo",
  "pk": 11,
  "fields": {
    "title": "Pythonメモ( ..)φ",
    "content": "# なんか使いそうなのを載せておく\r\n\r\n## リスト操作\r\n[http://qiita.com/clarinet758/items/e181fcfe8ed6f99cbeb5](http://qiita.com/clarinet758/items/e181fcfe8ed6f99cbeb5)\r\n  \r\n## 便利な標準ライブラリ\r\n[http://qiita.com/pika_shi/items/bf3b449a354cc7609ab9](http://qiita.com/pika_shi/items/bf3b449a354cc7609ab9)\r\n  \r\n## ファイルの一覧（サブフォルダも再帰的に）\r\n[http://www.gesource.jp/programming/python/code/0001.html](http://www.gesource.jp/programming/python/code/0001.html)\r\n\r\n![image](https://www.skyarch.net/blog/wp-content/uploads/2015/11/python-logo-master-v3-TM.png)",
    "pub_date": "2015-08-09T14:56:27.365Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 12,
  "fields": {
    "title": "さいたにや",
    "content": "# *久屋のもんじゃ*\r\n\r\n[http://tabelog.com/aichi/A2301/A230103/23038804/](http://tabelog.com/aichi/A2301/A230103/23038804/)\r\n\r\n![image](https://tblg.k-img.com/restaurant/images/Rvw/7367/320x320_rect_7367824.jpg)",
    "pub_date": "2015-08-09T14:58:36.248Z",
    "user": 2,
    "tags": [
      13,
      14
    ]
  }
},
{
  "model": "app.memo",
  "pk": 13,
  "fields": {
    "title": "やんや",
    "content": "# *刈谷のもんじゃ*\r\n\r\n[http://tabelog.com/aichi/A2305/A230503/23009823/](http://tabelog.com/aichi/A2305/A230503/23009823/)\r\n\r\n![image](https://tblg.k-img.com/restaurant/images/Rvw/68139/68139243.jpg)",
    "pub_date": "2015-08-09T15:00:20.441Z",
    "user": 2,
    "tags": [
      13,
      14
    ]
  }
},
{
  "model": "app.memo",
  "pk": 14,
  "fields": {
    "title": "Google Code Jam with Python",
    "content": "# Google Coce Jam用のテンプレート\r\n\r\n```py\r\nimport sys\r\n\r\nfilename = 'sample.txt' if len(sys.argv) == 1 else sys.argv[1]\r\nwith open(filename, 'r', encoding = 'shift_jis') as f:\r\n    T = int(f.readline()[:-1])    # 改行はずすスライス\r\n    for i in range(T):\r\n        print('Case #{0}: {1}'.format(i + 1, 'ans'))\r\n```",
    "pub_date": "2015-08-09T15:01:37.310Z",
    "user": 2,
    "tags": [
      1,
      2,
      12
    ]
  }
},
{
  "model": "app.memo",
  "pk": 15,
  "fields": {
    "title": "5時間と7分",
    "content": "## *君の休暇の最長記録だ．．．*\r\n\r\n![image](http://i.gzn.jp/img/2014/05/24/gits-arise-border3-trailer/00.png)\r\n",
    "pub_date": "2015-08-09T15:02:28.980Z",
    "user": 2,
    "tags": [
      6,
      7
    ]
  }
},
{
  "model": "app.memo",
  "pk": 16,
  "fields": {
    "title": "ニャンピョウ",
    "content": "# 夕方のニュースで\r\n\r\n見つかったらしいです( ﾟДﾟ)\r\n\r\n![image](https://pbs.twimg.com/profile_images/3514992625/d38579deb8642b80d21840b23c428f86_400x400.jpeg)",
    "pub_date": "2015-08-09T15:03:12.116Z",
    "user": 2,
    "tags": [
      15
    ]
  }
},
{
  "model": "app.memo",
  "pk": 17,
  "fields": {
    "title": "C++11使ったサンプル",
    "content": "# CPU負荷を上げるサンプル\r\nstd::threadとかラムダ式とか範囲forとか\r\n\r\n```cpp\r\n#include \"stdafx.h\"\r\n#include <vector>\r\n#include <thread>\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n\tauto threads = std::vector<std::thread>(16);\r\n\tfor (auto& item : threads)\r\n\t{\r\n\t\titem = std::thread([]\r\n\t\t{\r\n\t\t\twhile (true)\r\n\t\t\t{\r\n\t\t\t\tauto x = 10.0 / 3;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfor (auto& item : threads)\r\n\t{\r\n\t\titem.join();\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n```",
    "pub_date": "2015-08-09T15:04:41.670Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 18,
  "fields": {
    "title": "関数ポインタを返す関数",
    "content": "std::functionでいいだろう．．．\r\n\r\n```cpp\r\n#include \"stdafx.h\"\r\n#include <ostream>\r\n#include <functional>\r\n\r\nconst char* hoge(int n)\r\n{\r\n\treturn \"hoge\";\r\n}\r\n\r\ntypedef const char* (*hogetype)(int);\r\n\r\nhogetype piyo(double d)\r\n{\r\n\treturn hoge;\r\n}\r\n\r\nconst char* (*fuga(double d))(int)\r\n{\r\n\treturn hoge;\r\n}\r\n\r\nstd::function<const char* (int)> hogehoge(double d)\r\n{\r\n\treturn hoge;\r\n}\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n\tstd::cout << hoge(42) << std::endl;\r\n\r\n\tauto hoge1 = piyo(23.0);\r\n\tstd::cout << hoge1(42) << std::endl;\r\n\r\n\tauto hoge2 = fuga(23.0);\r\n\tstd::cout << hoge2(42) << std::endl;\r\n\r\n\tauto hoge3 = hogehoge(23.0);\r\n\tstd::cout << hoge3(42) << std::endl;\r\n\r\n\treturn 0;\r\n}\r\n```",
    "pub_date": "2015-08-09T15:05:41.685Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 19,
  "fields": {
    "title": "配列へのポインタ",
    "content": "知らなかったなぁ．．．ただのアドレスの並びってわけでもないのか．\r\n\r\n```cpp\r\n#include \"stdafx.h\"\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n\tint ary[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\r\n\tint (*hoge)[10] = &ary;\r\n\r\n\t::printf(\"%p\\n\", ary);\r\n\t::printf(\"%p\\n\", &ary);\r\n\t::printf(\"%p\\n\", hoge);\t\t// &ary[0]のこと？（実際は違うっぽい．）\r\n\r\n\t::printf(\"%d, %d\\n\", ary[0], ary[1]);\r\n\t::printf(\"%d, %d\\n\", *hoge[0], *hoge[1]);\t\t// あれ？( ﾟДﾟ)\r\n\t::printf(\"%d, %d\\n\", (*hoge)[0], (*hoge)[1]);\t// *hogeは配列であり先頭要素じゃないっぽい．\r\n\t//::pringf(\"%d, %d\\n\", (*ary)[0], (*ary)[1]);\t// aryとhogeは同じアドレスを示すがこれはできない．\r\n\r\n\t//int(*piyo)[20] = &ary;\t// ちなみにこれもダメ．C言語の配列ってちゃんと型だったんだ．．．\r\n\r\n\treturn 0;\r\n}\r\n```",
    "pub_date": "2015-08-09T15:06:25.467Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 20,
  "fields": {
    "title": "Pythonの命名規約",
    "content": "# Google Python Style Guide によるPython の命名規約\r\n\r\n* モジュール： module_name\r\n* パッケージ : package_name\r\n* クラス名 : ClassName\r\n* メソッド名: method_name\r\n* 例外 : ExceptionName\r\n* 関数名 : function_name\r\n* グローバル定数：GLOBAL_CONSTANT_NAME\r\n* グローバル変数：global_var_name\r\n* インスタンス変数 : instance_var_name\r\n* ローカル変数：local_var_name\r\n",
    "pub_date": "2015-08-09T15:07:11.293Z",
    "user": 2,
    "tags": [
      1,
      2,
      40
    ]
  }
},
{
  "model": "app.memo",
  "pk": 21,
  "fields": {
    "title": "りきゅう",
    "content": "# 会社前のもんじゃ\r\n\r\n[http://www.rikyu-japan.com/nadya/](http://www.rikyu-japan.com/nadya/)\r\n\r\n![image](http://www.rikyu-japan.com/wp/wp-content/uploads/2016/07/nadya_0002.jpg)",
    "pub_date": "2015-08-09T15:08:34.387Z",
    "user": 2,
    "tags": [
      13,
      14
    ]
  }
},
{
  "model": "app.memo",
  "pk": 22,
  "fields": {
    "title": "C++のクロージャ",
    "content": "# C++でのクロージャの書き方\r\n\r\n値でキャプチャして`mutable`とすると外の環境を書き換えられる．\r\n\r\n```cpp\r\n#include \"stdafx.h\"\r\n#include <functional>\r\n#include <iostream>\r\n\r\nstd::function<int ()> Somethig()\r\n{\r\n\tauto count = 0;\r\n\treturn [=]() mutable -> int\r\n\t{\r\n\t\treturn ++count;\r\n\t};\r\n}\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n\tauto hoge = Somethig();\r\n\r\n\tfor (int i = 0; i < 100; i++)\r\n\t{\r\n\t\tstd::cout << hoge() << std::endl;\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n```",
    "pub_date": "2015-08-09T15:09:42.595Z",
    "user": 2,
    "tags": [
      1,
      16,
      17
    ]
  }
},
{
  "model": "app.memo",
  "pk": 23,
  "fields": {
    "title": "C#のクロージャ",
    "content": "# C#でのクロージャの書き方\r\n\r\n特にキーワードとかはいらない．\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace cssample\r\n{\r\n    class Program\r\n    {\r\n        static Func<int> Something()\r\n        {\r\n            var count = 0;\r\n            return () => ++count;\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var hoge = Program.Something();\r\n\r\n            for (int i = 0; i < 100; i++)\r\n            {\r\n                Console.WriteLine(hoge());\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
    "pub_date": "2015-08-09T15:10:26.599Z",
    "user": 2,
    "tags": [
      1,
      10,
      17
    ]
  }
},
{
  "model": "app.memo",
  "pk": 24,
  "fields": {
    "title": "Pythonのクロージャ",
    "content": "# Pythonでのクロージャの書き方\r\n\r\n`nonlocal`とすると外側の環境が書き換えられる．\r\n\r\n```py\r\ndef something():\r\n    count = 0\r\n    def inner():\r\n        nonlocal count \r\n        count += 1\r\n        return count\r\n    return inner\r\n\r\nhoge = something()\r\nfor i in range(100):\r\n    print(hoge())\r\n```",
    "pub_date": "2015-08-09T15:12:07.584Z",
    "user": 2,
    "tags": [
      1,
      2,
      17
    ]
  }
},
{
  "model": "app.memo",
  "pk": 25,
  "fields": {
    "title": "オプション引数とオーバーライド",
    "content": "# オプション引数とオーバーライドは相性が悪い(..)\r\n\r\nオプション引数は変数の型の値が使われる．\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApplication1\r\n{\r\n    class B\r\n    {\r\n        public virtual void X(string s = \"B\";)\r\n        {\r\n            Console.WriteLine(\"{0} : B\", s);\r\n        }\r\n    }\r\n\r\n    class S : B\r\n    {\r\n        public override void X(string s = \"S\")\r\n        {\r\n            Console.WriteLine(\"{0} : S\", s);\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            B b = new B();\r\n            b.X();    // B : B\r\n\r\n            S s = new S();\r\n            s.X();    // S : S\r\n\r\n            B bs = new S();\r\n            bs.X();   // B : S\r\n        }\r\n    }\r\n}\r\n```",
    "pub_date": "2015-08-09T15:13:03.431Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 26,
  "fields": {
    "title": "PythonでOpenCV",
    "content": "# 基礎的なことがかなり網羅されているサイト\r\n\r\n[http://opencv.blog.jp/python/使い方](http://opencv.blog.jp/python/使い方)\r\n\r\n![image](http://opencv.jp/wordpress/wp-content/uploads/q100_7.01bpp-300x300.png)",
    "pub_date": "2015-08-09T15:13:58.685Z",
    "user": 2,
    "tags": [
      1,
      2,
      18
    ]
  }
},
{
  "model": "app.memo",
  "pk": 27,
  "fields": {
    "title": "ファイルの一覧取得",
    "content": "いつも毎回調べてしまうので，いろいろなパターンをまとめ．\r\n\r\n```py\r\nimport os\r\nimport glob\r\n\r\ndirectory = 'C:\\\\Python34\\\\'\r\n\r\n# ディレクトリ＋ファイル一覧（名前のみ，ワイルドカード指定不可）\r\nfor f in os.listdir(directory):\r\n    print(f)\r\n\r\n# ディレクトリ＋ファイル一覧（パス付き）\r\nfor f in glob.glob(directory + '*.txt'):\r\n    print(f)\r\n\r\n# ディレクトリ＋ファイル一覧（名前のみ）\r\nfor f in [os.path.basename(r) for r in glob.glob(directory + '*.txt')]:\r\n    print(f)\r\n\r\n# 再帰的にフォルダを渡り歩き\r\nfor r, ds, fs in os.walk(directory):\r\n    print(r, ds, fs)\r\n```",
    "pub_date": "2015-08-13T06:09:48.832Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 29,
  "fields": {
    "title": "ジュラシック・ワールド",
    "content": "恐竜のシーンがかなり良かった．最後も好き！\r\n\r\n![iamge](http://blog-imgs-52.fc2.com/s/e/k/sekiga914/jyura401s.jpg)\r\n",
    "pub_date": "2015-08-14T13:08:00.424Z",
    "user": 2,
    "tags": [
      4,
      20
    ]
  }
},
{
  "model": "app.memo",
  "pk": 30,
  "fields": {
    "title": "唐や",
    "content": "# ビールにあう一口サイズのおいしい餃子\r\n\r\n[http://tabelog.com/aichi/A2301/A230103/23015455/](http://tabelog.com/aichi/A2301/A230103/23015455/)\r\n\r\n![image](http://www.kin3.info/category/gourmet/img/karaya-2.jpg)\r\n",
    "pub_date": "2015-08-16T03:36:44.552Z",
    "user": 2,
    "tags": [
      13,
      21
    ]
  }
},
{
  "model": "app.memo",
  "pk": 31,
  "fields": {
    "title": "うどん錦",
    "content": "# 飲んだ後にぴったりなカレーうどん\r\n\r\n[http://tabelog.com/aichi/A2301/A230103/23000374/](http://tabelog.com/aichi/A2301/A230103/23000374/)\r\n\r\n![image](https://tblg.k-img.com/restaurant/images/Rvw/79120/320x320_rect_79120956.jpg)",
    "pub_date": "2015-08-16T03:42:59.408Z",
    "user": 2,
    "tags": [
      13,
      22
    ]
  }
},
{
  "model": "app.memo",
  "pk": 32,
  "fields": {
    "title": "ハノイの塔",
    "content": "# ハノイの塔の再帰プログラミング\r\n\r\n```py\r\ndef hanoi(n, source, work, dest):\r\n    if 2 <= n:\r\n        hanoi(n - 1, source, dest, work)\r\n\r\n    print('{0} を {1} から {2} へ'.format(n, source, dest))\r\n\r\n    if 2 <= n:\r\n        hanoi(n - 1, work, source, dest)\r\n\r\nif __name__ == '__main__':\r\n    hanoi(64, 'A', 'B', 'C')\r\n```",
    "pub_date": "2015-08-16T09:46:12.731Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 33,
  "fields": {
    "title": "Pythonで正規表現",
    "content": "# Pythonで正規表現の基本的な使い方\r\n\r\n後方参照の取り出し方とかいつも調べてしまうので．\r\n\r\n```py\r\nimport re\r\n\r\ntext = '<h1 style=\"width: 100px; height: 200px;\">'\r\nresult = re.search(r'width: (.*)px; height: (.*)px;', text)\r\n\r\nprint(result.group(0))      # 1回目: width: 100px; height: 200px;\r\nprint(result.group(1))      # 1回目: 100\r\nprint(result.group(2))      # 1回目: 200\r\nprint(result.groups())      # 1回目: ('100', '200')\r\n\r\nprint()\r\n\r\ntext = '[width=30, height=45] [width=40, height=20]'\r\nmatch = re.finditer(r'\\[width=(.*), height=(.*)\\]', text)\r\n\r\nfor match in result:\r\n    print(match.group(0))   # 1回目: [width=30, height=45]   2回目: [width=30, height=45]  \r\n    print(match.group(1))   # 1回目: 30                      2回目: 40           \r\n    print(match.group(2))   # 1回目: 45                      2回目: 20           \r\n    print(match.groups())   # 1回目: ('30', '45')            2回目: ('40', '20')\r\n```",
    "pub_date": "2015-08-16T10:22:06.358Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 34,
  "fields": {
    "title": "プログラマーのためのネーミング辞書",
    "content": "# 名前付けに困ったら\r\n\r\n[https://codic.jp](https://codic.jp)\r\n\r\n![image](https://codic.jp/img/home_screenshot.png)\r\n",
    "pub_date": "2015-08-17T01:26:18.201Z",
    "user": 2,
    "tags": [
      1,
      40
    ]
  }
},
{
  "model": "app.memo",
  "pk": 35,
  "fields": {
    "title": "sizeofの型と比較演算子での暗黙キャスト",
    "content": "# signedとunsignedの比較\r\n\r\nsizeofの型はunsignedとなっている．signedとunsignedを比較するとunsignedへの暗黙のキャストが行われる．ということで`-1`が`0xFF`になってしまうため思ったような結果にならないことが．．．\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\n#define TOTAL_ELEMENTS (sizeof(array) / sizeof(array[0]))\r\nint array[] = { 23, 34, 12, 17, 204, 99, 16 };\r\n\r\nint main()\r\n{\r\n    for (int d = -1; d <= (TOTAL_ELEMENTS - 2); d++)\r\n    {\r\n        printf(\"%d\\n\", array[d + 1]);\r\n    }\r\n\r\n    return 0;\r\n}\r\n```",
    "pub_date": "2015-08-17T02:44:35.314Z",
    "user": 2,
    "tags": [
      1,
      8
    ]
  }
},
{
  "model": "app.memo",
  "pk": 36,
  "fields": {
    "title": "ユニークなヒューマンピクトグラム集",
    "content": "# 他ではあまり見ないようなおもしろいピクトグラム\r\n\r\n[http://pictogram2.com](http://pictogram2.com)\r\n\r\n![image](http://pictogram2.com/p/p0256/i/m.png)\r\n",
    "pub_date": "2015-08-18T06:58:13.361Z",
    "user": 2,
    "tags": [
      25
    ]
  }
},
{
  "model": "app.memo",
  "pk": 37,
  "fields": {
    "title": "Googleマテリアルデザイン",
    "content": "# マテリアルデザインとフラットデザインって結局何が違うの？\r\n\r\n[http://matome.naver.jp/odai/2142379522980270301](http://matome.naver.jp/odai/2142379522980270301)\r\n\r\n[http://photoshopvip.net/archives/76201](http://photoshopvip.net/archives/76201)\r\n\r\n![image](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0Bx4BSt6jniD7SjE5bTNHN3JpQXc/style_color_introduction.png)\r\n",
    "pub_date": "2015-08-18T08:56:46.940Z",
    "user": 2,
    "tags": [
      25
    ]
  }
},
{
  "model": "app.memo",
  "pk": 38,
  "fields": {
    "title": "Adobe Kuler",
    "content": "ベースカラーを指定し，それに対応してgoodな色合いを見つけてくれます．モノトーン系だけでなく，補色を利用した物や類似色など，いろいろなタイプを選べます．\r\n\r\n[https://color.adobe.com/ja/create/color-wheel/](https://color.adobe.com/ja/create/color-wheel/)\r\n\r\n![image](http://cdn-ak.f.st-hatena.com/images/fotolife/b/blacktails2/20140713/20140713004301.png)\r\n",
    "pub_date": "2015-08-19T06:55:37.154Z",
    "user": 2,
    "tags": [
      25
    ]
  }
},
{
  "model": "app.memo",
  "pk": 39,
  "fields": {
    "title": "フォームの2重送信を禁止",
    "content": "djangoのログインシステムでCSRF検証失敗が403エラーで出ていたので，簡易的にクライアント側でjQueryでの防止策．\r\n\r\n[http://weble.org/2012/06/12/jquery-multiplex-disable](http://weble.org/2012/06/12/jquery-multiplex-disable)\r\n\r\n```\r\n$('form').submit(function() {\r\n    $(this).submit(function () {\r\n        alert('フォームからのデータ送信は一度ずつ行なって下さい．');\r\n        return false;\r\n    });\r\n});\r\n```\r\n",
    "pub_date": "2015-08-22T08:32:42.107Z",
    "user": 2,
    "tags": [
      1,
      26
    ]
  }
},
{
  "model": "app.memo",
  "pk": 42,
  "fields": {
    "title": "V-Sido OS",
    "content": "# ヒューマノイドロボット用のOS\r\n\r\nKinectでシャア専用ズゴックを動かしていたのはこれ．KinectはひょっとしてSDKでなくハック？？\r\n\r\n[https://v-sido-developer.com](https://v-sido-developer.com)\r\n\r\n[http://www.v-sido.com/ja/index.html](http://www.v-sido.com/ja/index.html)\r\n\r\n[https://www.youtube.com/watch?v=Qqz28b6SLzQ](https://www.youtube.com/watch?v=Qqz28b6SLzQ)\r\n\r\n![image](https://www.asratec.co.jp/wp-content/uploads/2015/05/robots.png)",
    "pub_date": "2015-08-23T12:05:32.006Z",
    "user": 2,
    "tags": [
      27
    ]
  }
},
{
  "model": "app.memo",
  "pk": 43,
  "fields": {
    "title": "ふらり寿司",
    "content": "# 寿司と天ぷらの両方\r\n\r\n[http://tabelog.com/aichi/A2301/A230102/23045059/](http://tabelog.com/aichi/A2301/A230102/23045059/)\r\n\r\n![image](https://tblg.k-img.com/restaurant/images/Rvw/63717/320x320_rect_63717697.jpg)",
    "pub_date": "2015-08-26T10:52:05.322Z",
    "user": 2,
    "tags": [
      13,
      30,
      31
    ]
  }
},
{
  "model": "app.memo",
  "pk": 44,
  "fields": {
    "title": "Gitで更新ファイルを抽出",
    "content": "Gitで開発していたソースコードを，納品時などに更新したファイルだけ抜き出す方法．\r\n\r\n```\r\n$ git archive --format=zip --prefix=root/ HEAD `git diff --name-only --diff-filter=AMCR tagname HEAD` -o hoge.zip\r\n```\r\n\r\n※`tagname`はスタート時のコミットのtag名．\r\n",
    "pub_date": "2015-08-27T02:29:32.312Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 48,
  "fields": {
    "title": "Herokuコマンド覚え書き",
    "content": "## Herokuアプリの新規作成\r\n\r\n```\r\n$ heroku create アプリ名\r\n```\r\n*アプリ名を省略するとランダムな名前で作成されてしまう．*\r\n\r\n## ログの確認\r\n\r\n```\r\n$ heroku logs\r\n```\r\n\r\n## DBのクリア\r\n\r\n```\r\n$ heroku pg:reset DATABASE\r\n```\r\n\r\n## sshログイン\r\n\r\n```\r\n$ heroku run bash\r\n```\r\n\r\n## pythonの実行方法\r\n\r\n```\r\n$ heroku run python manage.py syncdb\r\n```\r\n\r\n## herokuアカウントの切り替え\r\n\r\n```\r\n$ heroku logout\r\n$ heroku login\r\n```\r\n\r\n*一度ログアウトしてから別アカウントでログイン．*\r\n\r\n## そのほか詳しくは本家で\r\n[https://devcenter.heroku.com](https://devcenter.heroku.com)\r\n",
    "pub_date": "2015-09-06T11:34:52.259Z",
    "user": 2,
    "tags": [
      1,
      33
    ]
  }
},
{
  "model": "app.memo",
  "pk": 53,
  "fields": {
    "title": "Heroku + DjangoのDBバックアップ",
    "content": "# DBバックアップ\r\n\r\n```\r\n$ heroku run python manage.py dumpdata app_name --format=json --indent=2 > app.json\r\n```\r\nローカルにapp.jsonが出力される．\r\n\r\n# DBリストア\r\n\r\n```\r\n$ heroku run python manage.py loaddata app.json\r\n```\r\nまずはじめにgitでjsonをcommit + pushしておく．ローカルからはリストアできないっぽい．",
    "pub_date": "2015-09-13T18:07:34.030Z",
    "user": 2,
    "tags": [
      1,
      2,
      33,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 54,
  "fields": {
    "title": "Heroku + DjangoのDB初期化",
    "content": "# manage.py syncdbがなくなるようなので\r\n\r\n```\r\n$ heroku run python manage.py migrate auth\r\n$ heroku run python manage.py migrate\r\n$ heroku run python manage.py createsuperuser\r\n```\r\n\r\nHeroku環境では`migrate auth`で一部エラーが出るが，この手順が成功率高いっぽい．",
    "pub_date": "2015-09-14T13:44:19.214Z",
    "user": 2,
    "tags": [
      1,
      2,
      33,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 55,
  "fields": {
    "title": "野菜を食べるカレーcamp",
    "content": "# 素揚げした野菜がシャキシャキ\r\n\r\n[http://tabelog.com/aichi/A2301/A230101/23056147/](http://tabelog.com/aichi/A2301/A230101/23056147/)\r\n\r\n![image](http://tabelog.com/imgview/original?id=r3192739255166)\r\n",
    "pub_date": "2015-10-05T13:36:13.866Z",
    "user": 2,
    "tags": [
      13,
      34
    ]
  }
},
{
  "model": "app.memo",
  "pk": 56,
  "fields": {
    "title": "海の目線の露天風呂",
    "content": "# 兵庫県赤穂市の温泉旅館\r\n\r\n温泉かなり最高だった．料理もうまい．\r\n\r\n[http://www.ginpaso.co.jp](http://www.ginpaso.co.jp)\r\n\r\n![image](http://www.ginpaso.co.jp/spa/img/spa_img_iwami_03.png)\r\n",
    "pub_date": "2015-10-13T13:24:45.732Z",
    "user": 2,
    "tags": [
      35
    ]
  }
},
{
  "model": "app.memo",
  "pk": 57,
  "fields": {
    "title": "Pythonでmain関数っぽいやつ",
    "content": "# 直接.pyファイルが呼び出されたときにだけ実行されるやつ\r\n\r\nいつも書き方忘れて調べてしまうので覚書き．  \r\n※ついでにオプション引数の取り方も．\r\n\r\n```py\r\nimport sys\r\n\r\ndef do_something(value):\r\n    print(value)\r\n\r\nif __name__ == '__main__':\r\n    value = 'spam' if len(sys.argv) <= 1 else sys.argv[1]\r\n    do_something(value)\r\n```",
    "pub_date": "2015-10-26T01:51:23.321Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 58,
  "fields": {
    "title": "Python標準のUnitテスト",
    "content": "# 一般的なUnitテストの実行方法．\r\n\r\n```py\r\nimport unittest\r\n\r\nclass MyUnittest(unittest.TestCase):\r\n    def test_01(self):\r\n        a = 1\r\n        b = 1\r\n        self.assertTrue(a == b)\r\n        self.assertTrue(a is b)\r\n\r\n    def test_02(self):\r\n        a = [1, 2, 3]\r\n        b = [1, 2, 3]\r\n        self.assertTrue(a == b)\r\n        self.assertTrue(a is not b)\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```\r\n\r\n## Unitテストの一括での実行方法\r\n\r\nカレントのディレクトリ以下にある`test_*.py`を再帰的に検索して実行してくれる．\r\n\r\n```shell\r\n$ python -m unittest discover\r\n```",
    "pub_date": "2015-10-28T11:50:02.945Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 59,
  "fields": {
    "title": "プログラミング生放送",
    "content": "[http://pronama.azurewebsites.net](http://pronama.azurewebsites.net)\r\n\r\n![image](http://pronama.jp/code/sd.png)\r\n",
    "pub_date": "2015-11-08T07:58:53.702Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 60,
  "fields": {
    "title": "数学史上最も美しい式",
    "content": "# オイラーの等式\r\n\r\n```\r\ne^iπ + 1 = 0\r\n```\r\n\r\n> とはいえ私なんかは，答えが０になるなら取り立てて計算しなくてもいいって思いますけれどね．\r\n",
    "pub_date": "2015-11-13T09:34:30.016Z",
    "user": 2,
    "tags": [
      36
    ]
  }
},
{
  "model": "app.memo",
  "pk": 61,
  "fields": {
    "title": "Pythonのeaster egg",
    "content": "空を飛びたくなったら．．．\r\n\r\n```py\r\nimport this\r\nimport __hello__\r\nimport antigravity\r\n```\r\n\r\n![image](http://imgs.xkcd.com/comics/python.png)",
    "pub_date": "2015-11-22T15:45:23.846Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 62,
  "fields": {
    "title": "Alien Language",
    "content": "ちょっとしたサンプルコード\r\n\r\n```py\r\nimport re\r\n\r\nwith open('A-large-practice.in') as f:\r\n    L, D, N = [int(x) for x in f.readline()[:-1].split()]\r\n    words = [f.readline()[:-1] for _ in range(D)]\r\n    for i in range(N):\r\n        pattern = f.readline()[:-1].replace('(', '[').replace(')', ']')\r\n        K = len([w for w in words if re.match(pattern, w)])\r\n        print('Case #{0}: {1}'.format(i + 1, K))\r\n```",
    "pub_date": "2015-11-28T10:32:46.038Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 63,
  "fields": {
    "title": "Windows環境でのサーバ構築",
    "content": "# SQL ServerとIISの環境構築\r\n\r\nここを参考にしたら，だいたいやれた．\r\n\r\n[https://creativeweb.jp](https://creativeweb.jp)\r\n\r\nあと，ポートの指定でちょいはまった．\r\n\r\n> 192.168.0.3\\SQLExpress で接続できない場合、ポート番号を指定して 192.168.0.3\\SQLExpress,1433 で接続するとうまく接続できる場合があります。",
    "pub_date": "2015-12-17T02:00:55.820Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 64,
  "fields": {
    "title": "WPFの基礎知識",
    "content": "とりあえず下記のはてなブログをざっと見るといいかも．\r\n\r\n[http://blog.okazuki.jp/entry/2014/12/27/200015](http://blog.okazuki.jp/entry/2014/12/27/200015)\r\n\r\n![image](http://hatenablog.com/images/top/top-logo@2x.png)\r\n",
    "pub_date": "2015-12-17T02:23:27.059Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 65,
  "fields": {
    "title": "Bootstrap Theme for Japanese.",
    "content": "# 日本語もきれいに表示されるBootstrapテーマ\r\n\r\n[http://honokak.osaka](http://honokak.osaka)\r\n\r\n![image](http://cdn.honokak.osaka/assets/img/umi.png)\r\n",
    "pub_date": "2015-12-17T04:15:35.220Z",
    "user": 2,
    "tags": [
      1,
      25
    ]
  }
},
{
  "model": "app.memo",
  "pk": 66,
  "fields": {
    "title": "PInvoke.net",
    "content": "# A wiki for .NET developers\r\n\r\nPInvoke.net is primarily a wiki, allowing developers to find, edit and add PInvoke* signatures, user-defined types, and any other information related to calling Win32 and other unmanaged APIs from managed code (written in languages such as C# or VB.\r\nNET).\r\n\r\n[http://www.pinvoke.net](http://www.pinvoke.net)\r\n\r\n![image](http://www.pinvoke.net/images/vsaddin1.png)\r\n",
    "pub_date": "2015-12-18T05:33:20.209Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 67,
  "fields": {
    "title": "Python + OpenCV",
    "content": "# サンプルコード\r\n\r\n画像を読み込んでエッジ検出して表示．\r\n\r\n```py\r\nimport cv2\r\n\r\ndef main():\r\n    gray = cv2.imread('spam.png', 0)    # 入力画像をグレースケールで取得\r\n    edge = cv2.Canny(gray, 100, 200)    # Cannyアルゴリズムでエッジ検出\r\n    cv2.imshow('Show Image', edge)      # エッジ画像を表示\r\n    cv2.waitKey(0)                      # キー入力待機\r\n    cv2.destroyAllWindows()             # ウィンドウ破棄\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2015-12-26T12:07:32.526Z",
    "user": 2,
    "tags": [
      1,
      2,
      18
    ]
  }
},
{
  "model": "app.memo",
  "pk": 68,
  "fields": {
    "title": "mondja開発時の参考ページ",
    "content": "# Markdown変換\r\n\r\nMarkdownからhtmlへの変換と，その関数のテンプレートの自作フィルタ化．あとシンタックスハイライト．\r\n\r\n`markdown2`\r\n\r\n[http://inner2.hatenablog.com/entry/2015/12/02/224831](http://inner2.hatenablog.com/entry/2015/12/02/224831)  \r\n[http://papaeye.tumblr.com/post/27705803009/markdown-処理系の比較](http://papaeye.tumblr.com/post/27705803009/markdown-処理系の比較)  \r\n[http://pistatium.appspot.com/blog/show/103008](http://pistatium.appspot.com/blog/show/103008)  \r\n[https://syncer.jp/how-to-use-highlightjs](https://syncer.jp/how-to-use-highlightjs)\r\n\r\n# ソーシャルログイン\r\n\r\nTwitterやFacebookでの認証\r\n\r\n`python-social-auth`\r\n\r\n[http://nwpct1.hatenablog.com/entry/django-oauth-twitter-facebook-github](http://nwpct1.hatenablog.com/entry/django-oauth-twitter-facebook-github)  \r\n[http://techbooster.org/android/mashup/4525/](http://techbooster.org/android/mashup/4525/)  \r\n[http://blog.unfindable.net/archives/1891](http://blog.unfindable.net/archives/1891)\r\n\r\n# すべてのリクエストをフック\r\n\r\nDjangoのミドルウェア\r\n\r\n[http://hateda.hatenadiary.jp/entry/2014/01/27/151615](http://hateda.hatenadiary.jp/entry/2014/01/27/151615)  \r\n[http://docs.djangoproject.jp/en/latest/topics/http/middleware.html](http://docs.djangoproject.jp/en/latest/topics/http/middleware.html)\r\n\r\n# paginateにGETパラメーター渡し機能を追加\r\n\r\n検索とかタグとかの条件を引き継いでページ情報も更新する方法\r\n\r\n[http://hideharaaws.hatenablog.com/entry/2015/01/16/002813](http://hideharaaws.hatenablog.com/entry/2015/01/16/002813)",
    "pub_date": "2015-12-29T00:50:15.489Z",
    "user": 2,
    "tags": [
      1,
      2,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 69,
  "fields": {
    "title": "ぽよぽよGIFアニメーカー",
    "content": "# ぽよぽよするやつ\r\n\r\n> 好きな画像をぽよぽよかわいいGIFアニメにできるよ！ジェネレーターで作ったミニキャラにもおすすめ！\r\n\r\n[http://poyopoyo.gifanimaker.com](http://poyopoyo.gifanimaker.com)\r\n\r\n![http://i1.wp.com/pronama.azurewebsites.net/wp-content/uploads/2015/12/poyopoyo.gif?resize=400%2C400](http://i1.wp.com/pronama.azurewebsites.net/wp-content/uploads/2015/12/poyopoyo.gif?resize=400%2C400)\r\n",
    "pub_date": "2016-01-01T01:46:45.035Z",
    "user": 2,
    "tags": [
      25
    ]
  }
},
{
  "model": "app.memo",
  "pk": 70,
  "fields": {
    "title": "Windowsのパッケージ管理システム",
    "content": "# apt-getのWindows版みたいなやつ\r\n\r\n[https://chocolatey.org](https://chocolatey.org)\r\n\r\n```\r\nC:\\> @powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\r\n```\r\n\r\n![image](https://chocolatey.org/content/images/hero.png)\r\n",
    "pub_date": "2016-01-05T00:22:56.674Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 71,
  "fields": {
    "title": "今日のまとめ",
    "content": "# 太陽\r\n\r\n太陽はスゴイ．  \r\nエライ\r\n\r\nマウンダーごくしょうき  \r\n相手は死ぬ\r\n\r\n# 犬まとめ\r\n\r\n1961年  \r\nソ連  \r\nズボシホスカ\r\n\r\n# アイス\r\n\r\n冷たくて　おいしい　それが  \r\nアイス．\r\n\r\nメロリン ≒ ドンドゥルマ\r\n\r\n# クジラまとめ\r\n\r\nよく  \r\nわからない\r\n\r\n# 曜日のまとめ\r\n\r\nツェラーの公式により  \r\nポテトは土曜（第2第4は木曜）⇒木曜はやっぱりなしで．\r\n",
    "pub_date": "2016-01-16T17:27:33.548Z",
    "user": 2,
    "tags": [
      39
    ]
  }
},
{
  "model": "app.memo",
  "pk": 73,
  "fields": {
    "title": "umaru-chan",
    "content": "![image](https://i.ytimg.com/vi/rTZGtIoByTg/maxresdefault.jpg)",
    "pub_date": "2016-01-19T12:44:05.085Z",
    "user": 2,
    "tags": [
      41
    ]
  }
},
{
  "model": "app.memo",
  "pk": 74,
  "fields": {
    "title": "Linqで操作しやすいSQL実行ライブラリ",
    "content": "[http://neue.cc/2010/04/07_250.html](http://neue.cc/2010/04/07_250.html)  \r\n[http://neue.cc/2011/04/29_320.html](http://neue.cc/2011/04/29_320.html)\r\n\r\n```cs\r\nvar products = DbExecutor.ExecuteReaderDynamic(new SqlConnection(connStr), @\"\r\n        select ProductName, QuantityPerUnit from Products\r\n        where SupplierID = @SupplierID and UnitPrice > @UnitPrice\r\n        \", new { SupplierID = 1, UnitPrice = 10 })\r\n    .Select(d => new Product\r\n    {\r\n        ProductName = d.ProductName,\r\n        QuantityPerUnit = d.QuantityPerUnit\r\n    })\r\n    .ToArray();\r\n```",
    "pub_date": "2016-01-21T01:56:55.966Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 75,
  "fields": {
    "title": "ランダムな文字列の生成",
    "content": "# pythonでランダムな文字列の生成\r\n\r\n```py\r\nimport random, string\r\n''.join([random.choice(string.ascii_letters + string.digits) for i in range(10)])\r\n```",
    "pub_date": "2016-01-21T05:57:59.313Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 76,
  "fields": {
    "title": "PythonでSQLite",
    "content": "# サンプルコード\r\n\r\n```py\r\nimport sqlite3, random, string\r\n\r\ncon = sqlite3.connect('./db.sqlite3')\r\ncur = con.cursor()\r\n\r\ndef create_table():\r\n    cur.execute(''' create table spam(id integer primary key, name text not null, age integer not null, sexid integer not null) ''')\r\n    cur.execute(''' create table ham(id integer primary key, name text not null) ''')\r\n\r\ndef create_view():\r\n    cur.execute(''' create view eggs as select spam.name, spam.age, ham.name as sex\r\n                    from spam, ham\r\n                    where spam.sexid = ham.id\r\n                    order by spam.sexid, spam.age ''')\r\n\r\ndef insert_table():\r\n    cur.execute(''' insert into ham(name) values('male') ''')\r\n    cur.execute(''' insert into ham(name) values('female') ''')\r\n\r\n    for i in range(10000):\r\n        name = ''.join([random.choice(string.ascii_letters + string.digits) for i in range(10)])\r\n        age = random.randint(0, 100)\r\n        sexid = 1 if random.randint(0, 1) else 2\r\n        cur.execute(''' insert into spam(name, age, sexid) values('{0}', {1}, '{2}') '''.format(name, age, sexid))\r\n\r\n    con.commit()\r\n\r\ndef print_table():\r\n    cur.execute(''' select spam.name, spam.age, ham.name as sex\r\n                    from spam, ham\r\n                    where spam.sexid = ham.id\r\n                    order by spam.sexid, spam.age ''')\r\n    for item in [x for x in cur.fetchall() if len(set(string.digits) & set(x[0])) == 0]:\r\n        print('Name {0}, Age {1}, Sex {2}'.format(item[0], item[1], item[2]))\r\n\r\nif __name__ == '__main__':\r\n    create_table()\r\n    create_view()\r\n    insert_table()\r\n    print_table()\r\n```",
    "pub_date": "2016-01-22T08:43:13.348Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 77,
  "fields": {
    "title": "Air Bonsai",
    "content": "# 宙に浮かんで回転する盆栽\r\n\r\n[http://ideahack.me/article/1697](http://ideahack.me/article/1697)\r\n\r\n![image](http://ideahack.me/img/1697/2.jpg)\r\n",
    "pub_date": "2016-01-26T01:10:22.988Z",
    "user": 2,
    "tags": [
      42
    ]
  }
},
{
  "model": "app.memo",
  "pk": 78,
  "fields": {
    "title": "PythonでTCP",
    "content": "# 超簡単なTCPのサーバ＆クライアント\r\n\r\n```py\r\nimport socket, sys\r\nfrom contextlib import closing\r\n\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\nep = ('127.0.0.1', 50000)\r\n\r\ndef tcp_server():\r\n    with closing(s):\r\n        s.bind(ep)\r\n        s.listen(1)     # 最大接続数\r\n        conn, addr = s.accept()\r\n        recv = conn.recv(1024).decode('utf-8')\r\n        print(addr, 'receive:', recv)\r\n        conn.send(('>> ' + recv).encode('utf-8'))\r\n        conn.close()\r\n\r\ndef tcp_client():\r\n    with closing(s):\r\n        s.connect(ep)\r\n        s.send('Hello, python!'.encode('utf-8'))\r\n        print('reply:', s.recv(1024).decode('utf-8'))\r\n\r\nif __name__ == '__main__':\r\n    if 1 < len(sys.argv) and sys.argv[1] == 'server':\r\n        tcp_server()\r\n    elif 1 < len(sys.argv) and sys.argv[1] == 'client':\r\n        tcp_client()\r\n    else:\r\n        print('option is server or client')\r\n```",
    "pub_date": "2016-01-30T12:51:45.998Z",
    "user": 2,
    "tags": [
      1,
      2,
      44
    ]
  }
},
{
  "model": "app.memo",
  "pk": 79,
  "fields": {
    "title": "PythonでUDP",
    "content": "# 超簡単なUDPの送信&受信\r\n\r\n```py\r\nimport socket, sys\r\nfrom contextlib import closing\r\n\r\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\nep = ('127.0.0.1', 50000)\r\n\r\ndef udp_send():\r\n    with closing(s):\r\n        s.sendto('Hello, python!'.encode('utf-8'), ep)\r\n        print('send: Hello, python!')\r\n\r\ndef udp_recv():\r\n    with closing(s):\r\n        s.bind(ep)\r\n        print('recv:', s.recv(1024).decode('utf-8'))    # recvfromを使えばリモートのEPも受け取れる\r\n\r\nif __name__ == '__main__':\r\n    if 1 < len(sys.argv) and sys.argv[1] == 'send':\r\n        udp_send()\r\n    elif 1 < len(sys.argv) and sys.argv[1] == 'recv':\r\n        udp_recv()\r\n    else:\r\n        print('option is send or recv')\r\n```",
    "pub_date": "2016-01-30T13:05:51.375Z",
    "user": 2,
    "tags": [
      1,
      2,
      44
    ]
  }
},
{
  "model": "app.memo",
  "pk": 80,
  "fields": {
    "title": "Pythonで2次元リストを1次元に",
    "content": "# リスト内包表記を使ったやり方\r\n\r\n```py\r\n>>> list = [[1, 3, 5], [2, 4]]\r\n>>> [flatten for inner in list for flatten in inner]\r\n[1, 3, 5, 2, 4]\r\n```",
    "pub_date": "2016-02-02T06:30:32.957Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 82,
  "fields": {
    "title": "Web技術でデスクトップアプリの開発",
    "content": "# Electron\r\n\r\n> ElectronはGitHub社が開発した、デスクトップアプリを作れるクロスプラットフォーム実行環境です。オープンソースのMITライセンスなので、商用利用も無料で可能となっています。\r\n\r\n[http://electron.atom.io](http://electron.atom.io)\r\n\r\n![image](http://cdn.liginc.co.jp/wp-content/uploads/2015/08/ele.png)",
    "pub_date": "2016-02-12T00:17:29.980Z",
    "user": 2,
    "tags": [
      1,
      47
    ]
  }
},
{
  "model": "app.memo",
  "pk": 83,
  "fields": {
    "title": "DjangoアプリのHerokuデプロイ手順（旧）",
    "content": "# Django関連ライブラリ\r\n\r\n```\r\n$ pip install django-toolbelt\r\n```\r\n\r\n* Django (the web framework)\r\n* Gunicorn (WSGI server)\r\n* dj-database-url (a Django configuration helper)\r\n* dj-static (a Django static file server)\r\n\r\n# Procfileファイル\r\n\r\n```\r\nweb: gunicorn myapp.wsgi --log-file -\r\n```\r\n\r\n# settings.pyの編集\r\n\r\n```py\r\n# Parse database configuration from $DATABASE_URL\r\nimport dj_database_url\r\nDATABASES = {\r\n    'default': dj_database_url.config()\r\n}\r\n\r\n# Honor the 'X-Forwarded-Proto' header for request.is_secure()\r\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\r\n\r\n# Allow all host headers\r\nALLOWED_HOSTS = ('*')\r\n\r\n# Static asset configuration\r\nfrom os import path\r\nPROJECT_ROOT = path.dirname(path.abspath(path.dirname(__file__)))\r\nSTATIC_ROOT = path.join(PROJECT_ROOT, 'staticfiles').replace('\\\\', '/')\r\nSTATIC_URL = '/static/'\r\nSTATICFILES_DIRS = (\r\n    path.join(PROJECT_ROOT, 'static').replace('\\\\', '/'),\r\n)\r\n\r\n# Installed apps\r\nINSTALLED_APPS = (\r\n    ...\r\n    \"gunicorn\",\r\n)\r\n```\r\n\r\n# wsgi.pyの編集\r\n\r\n```py\r\nfrom dj_static import Cling\r\napplication = Cling(get_wsgi_application())\r\n```\r\n\r\n# 環境変数の設定（ローカル用）\r\n\r\n.env\r\n\r\n```\r\nDEBUG=1\r\nDATABASE_URL=sqlite:///db.sqlite3\r\n```\r\n\r\nmanage.py\r\n\r\n```py\r\nimport dotenv\r\ndotenv.read_dotenv()\r\n```\r\n\r\nsettings.py\r\n\r\n```py\r\nfrom os import environ\r\nDEBUG = environ.get('DEBUG') == '1'\r\n```",
    "pub_date": "2016-02-13T13:09:07.591Z",
    "user": 2,
    "tags": [
      1,
      2,
      33,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 84,
  "fields": {
    "title": "間違って消したgit stashを戻す",
    "content": "`git fsck`でどこからもたどることができないコミットを探し，その出力を編集して`git log`で探す．\r\n\r\n```\r\n$ git fsck --unreachable | grep commit | cut -d\\  -f3 | xargs git log --merges --no-walk --grep=WIP\r\n```\r\n\r\n この中で必要なコミットが見つかれば，その`SHA-1`を`git cherry-pick`する．\r\n\r\n```\r\n$ git cherry-pick -n -m1 <SHA-1>\r\n```\r\n\r\n※ 参考にしたサイト  \r\n[http://transitive.info/article/git/command/stash/](http://transitive.info/article/git/command/stash/)",
    "pub_date": "2016-03-21T06:29:30.084Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 86,
  "fields": {
    "title": "What's Milkcocoa?",
    "content": "[https://mlkcca.com](https://mlkcca.com)\r\n\r\n> Milkcocoaを利用すると、自前でサーバを準備せずに弊社が提供するクライアントSDKを介してデータの保存、更新、取得またPub/Sub通信を行うことが出来ます。通信はTLS暗号化され、保存されたデータは自動的にレプリケーションされます。クライアントからの通信はErlangサーバにて処理され、多くのトランザクションに対応することが出来ます。\r\n\r\n![image](https://connpass-tokyo.s3.amazonaws.com/thumbs/75/6c/756c6f59d6c3ac254adc17cd086efc5e.png)\r\n\r\n※参考サイト  \r\n[http://blog.mlkcca.com/frontend/milkcocoa-on-electron/](http://blog.mlkcca.com/frontend/milkcocoa-on-electron/)\r\n",
    "pub_date": "2016-03-30T14:33:58.842Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 87,
  "fields": {
    "title": "Windowsでipythonをインストール",
    "content": "# ipythonの警告を解消\r\n\r\nいつも忘れるのでメモ．pipでipythonをインストールすると以下のエラー．\r\n\r\n```\r\nReadline services not available or not loaded.\r\n```\r\n\r\npyreadlineをインストールすれば解決．\r\n\r\n```\r\n$ pip install pyreadline\r\n```",
    "pub_date": "2016-04-13T13:49:30.911Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 88,
  "fields": {
    "title": "pythonでマルチスレッド",
    "content": "# クラスを用意しない簡易的な方法\r\n\r\nthreading.Threadのサブクラスを用意しない方法と引数の渡し方\r\n\r\n```py\r\nimport threading, random\r\n\r\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\r\n\r\nlock = threading.Lock()\r\ndef sub(num, count):\r\n    with lock:\r\n        for _ in range(count):\r\n            print('{0}: {1}'.format(num, my_list[random.randint(0, len(my_list) - 1)]))\r\n\r\nsub1 = threading.Thread(target = sub, args = (1, 10, ))\r\nsub2 = threading.Thread(target = sub, args = (2, 20, ))\r\nsub1.start()\r\nsub2.start()\r\n```",
    "pub_date": "2016-04-15T12:36:35.539Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 90,
  "fields": {
    "title": "Atomのフォント設定",
    "content": "# 鬱陶しい中華フォントを防ぐ設定\r\n\r\n「ファイル」-「スタイルシート」　・・・　styles.less\r\n\r\n```\r\n@font-family: \"Consolas\", \"Meiryo\";\r\natom-workspace {\r\n  font-family: @font-family;\r\n}\r\n\r\natom-text-editor {\r\n  font-family: @font-family;\r\n}\r\n\r\n.tooltip {\r\n  font-family: @font-family;\r\n}\r\n\r\n.markdown-preview{\r\n  font-family: @font-family;\r\n}\r\n```",
    "pub_date": "2016-04-28T01:57:54.650Z",
    "user": 2,
    "tags": [
      1,
      46
    ]
  }
},
{
  "model": "app.memo",
  "pk": 91,
  "fields": {
    "title": "Pythonのデコレータ",
    "content": "# デコレータを使ってアスペクト指向風に\r\n\r\n```py\r\nimport time\r\n\r\ndef log_deco(func):\r\n    import functools\r\n    @functools.wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        from datetime import datetime as dt\r\n        print('*** {0}: {1} ***'.format(func.__name__, dt.now().strftime('%Y-%m-%d %H:%M:%S')))\r\n        result = func(*args, **kwargs)\r\n        return result\r\n    return wrapper\r\n\r\n@log_deco\r\ndef spam():\r\n    print('spam!!')\r\n\r\n@log_deco\r\ndef ham():\r\n    print('ham!!')\r\n\r\nif __name__ == '__main__':\r\n    spam()\r\n    time.sleep(1)\r\n    ham()\r\n\r\n    '''\r\n    *** spam: 2016-04-28 12:58:41 ***\r\n    spam!!\r\n    *** ham: 2016-04-28 12:58:42 ***\r\n    ham!!\r\n    '''\r\n```",
    "pub_date": "2016-04-28T04:02:20.277Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 92,
  "fields": {
    "title": "pipで一括アップデート",
    "content": "# 一括アップデートのワンライナー\r\n\r\n一発で行うオプションはないのでこれで\r\n\r\n```\r\n$ pip freeze --local | grep -v '^\\-e' | cut -d = -f 1 | xargs pip install -U\r\n```\r\n\r\nちなみにアップデート可能な一覧はこれ\r\n\r\n```\r\n$ pip list -o\r\n```",
    "pub_date": "2016-04-28T16:45:43.510Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 93,
  "fields": {
    "title": "Atomのおすすめパッケージ",
    "content": "# おすすめパッケージ一覧\r\n\r\n```\r\natom-dark-ui-slim\r\natom-monokai\r\natom-runner\r\nauto-encoding\r\nautocomplete-clang\r\nautocomplete-paths\r\nautocomplete-python\r\ncolor-picker\r\nfile-icons\r\ngit-control\r\ngit-diff-details\r\ngit-history\r\ngit-log\r\ngit-plus\r\ngit-time-machine\r\nhighlight-line\r\nhighlight-selected\r\njapanese-menu\r\njumpy\r\nlinter\r\nlinter-gcc\r\nlinter-python\r\nmaximize-panes\r\nmerge-conflicts\r\nminimap\r\nminimap-autohide\r\nminimap-bookmarks\r\nminimap-git-diff\r\nminimap-highlight-selected\r\nminimap-pigments\r\npigments\r\nproject-manager\r\nrailscast-theme\r\nslim-language\r\nsort-lines\r\nsymbols-tree-view\r\ntabs-to-spaces\r\ntree-view-git-status\r\n```\r\n\r\n# 一括インストール\r\n\r\n```\r\n$ apm install --packages-file packages.txt\r\n```\r\n\r\n# packages.txtの出力方法\r\n\r\n```\r\n$ apm list --installed --bare > packages.txt\r\n```",
    "pub_date": "2016-05-03T16:08:03.412Z",
    "user": 2,
    "tags": [
      1,
      46
    ]
  }
},
{
  "model": "app.memo",
  "pk": 94,
  "fields": {
    "title": "リレー小説の課題",
    "content": "第一章 （レベッカ作）\r\n\r\n> ローリーはどの銘柄のティを飲むか決めかねていた。部屋でのんびり過ごしたい夜に、よく飲んでいたお気に入りのカモミール・ティ。  \r\nでも、今それを飲むとカールのことを思い出してしまう。二人が幸せだったあの頃、彼はカモミール・ティが好きだと言っていたわ。けれど、彼のことをはもう頭から追い出さないといけない。彼のことを考えすぎると胸が苦しくなって、なんだか喘息がひどくなったような気持ちになるもの。だからカモミール・ティは選択から外そう。\r\n\r\n第二章 （ビル作）\r\n\r\n> その頃、攻撃艦隊を率いるカール・ハリス軍曹はスカイロン4の軌道上にいた。一年以上も前に、たった一晩だけの熱い夜を過ごしたノイローゼで思慮の足りない喘息持ちのローリーとか言うくだらない女のことよりも、もっと大事なことを考えなくてはいけないのだ。  \r\n銀河通信装置に話しかける。  \r\n「こちらハリス、静止衛星17どうぞ」  \r\n「極軌道は確立しました。現在のところ妨害は入っておりません…」  \r\nしかし彼が通信を切断する直前、粒子砲の青い閃光がきらめき、あろう事か彼の搭乗する戦艦の貨物室をぶち抜いたのだ。この衝撃によって、彼は座席からコックピットの向こう側へと吹き飛ばされてしまった。\r\n\r\n第三章 （レベッカ作）\r\n\r\n> 彼は頭を打ち、ほぼ即死であった。だが死ぬ前に彼が受けた苦痛は、彼のことを心から愛していた唯一の女性を精神的に傷つけてしまったという後悔だった。そして、まもなく地球はこの平和な農夫たちの住むスカイロン4との、無為な敵対関係に終止符を打つことになる。  \r\nある朝、新聞を広げたローリーは「議会は戦争と宇宙旅行を永遠に廃止する法案を可決」という記事を目にした。その記事は彼女にとって嬉しくもあり、どうでもよかった。彼女はぼんやり外を眺め、毎日がゆっくりと屈託なく過ぎていた若かりし頃を思い出していた。思えばあの頃は、新聞もなければ、周りの美しいものに抱く素直な感動を邪魔するテレビもなかった。「どうして無邪気さを捨てて、一人の女性にならなければいけないのかしら」ただ切なく考えを巡らせた。\r\n\r\n第四章 （ビル作）\r\n\r\n> ローリーがそのとき知らなかったのは、彼女にはあと10秒しか命が残されていないことだった。遥か何千マイルも離れた都市から、アヌ・ウドリアン母艦が最初のリチウム核融合ミサイルを発射したのだ。一方的に宇宙における武装廃止条約を議会に通し、無理やり推進しようとする、うすのろで臆病な平和主義者どもは、地球をむざむざと敵対する宇宙人たちの無防備な標的にしてしまった。  \r\n宇宙人たちは人類を破滅させることが狙いなのだ。条約が可決してから2時間と経たずして、彼らの母艦には惑星を粉々にしてしまう兵器が積まれ、地球へと向かっていた。止めるものは誰もおらず、彼らは迅速に極悪な計画を開始した。リチウム核融合ミサイルは妨害を一切受けずに大気圏へと突入する…。  \r\nグアム沖の海底に停泊していたトップ・シークレットの移動潜水艦の中で、大統領は想像も及ばぬほどの巨大な爆発を感じた。それはつまらない馬鹿女のローリーさえも一瞬にして気化させた。\r\n\r\n（レベッカ）\r\n\r\n> ばかばかしすぎるわ。もうこれ以上この文学のまがいものを続けるのは真っ平よ。私の課題のパートナーは、暴力的で男性優位主義で、教養が半分の未熟な奴だわ。\r\n\r\n（ビル）\r\n\r\n> そうかい？それを言うなら俺の課題のパートナーは、自己中心的で退屈で神経質で、書く内容は文字通り精神安定剤と同等だ。\r\n「ああ、カモミール・ティを飲むべきかしら」「ああ、それとも別の種類のくそったれなティがいいかしら」「だめだわ、私どうしたらいいかしら」「私は本当におつむの足りない間抜けだわ。きっとダニエル・スティールの小説を読みすぎたんだわ！」\r\n\r\n（レベッカ）\r\n\r\n> ムカつく！\r\n\r\n（ビル）\r\n\r\n> ビッチ！\r\n\r\n（レベッカ）\r\n\r\n> ふぁっくゆー！この原始人。\r\n\r\n（ビル）\r\n\r\n> 夢でも見ておねんねしてな、そしてティでも飲んで来い。\r\n\r\n（教授）\r\n\r\n> **評価：A+**　とても気に入りました。",
    "pub_date": "2016-05-04T09:42:37.631Z",
    "user": 2,
    "tags": [
      39
    ]
  }
},
{
  "model": "app.memo",
  "pk": 95,
  "fields": {
    "title": "Electronのパッケージング",
    "content": "# electron-packagerでパッケージング\r\n\r\n```\r\n$ npm i electron-packager -g\r\n$ electron-packager ./sample sample --platform=win32 --arch=x64 --version=1.4.12 --asar=true\r\n```\r\n\r\n* platform ・・・ all，linux，win32，darwinをカンマ区切りで．\r\n* arch ・・・ all，ia32，x64のいずれかを選択．\r\n* version ・・・ Electronのバージョンを指定．\r\n\r\n# ちなみにElectron本体のインストールはこちら\r\n\r\n```\r\n$ npm i electron-prebuilt -g\r\n```\r\n\r\n![image](http://codezine.jp/static/images/article/8782/8782_t.gif)",
    "pub_date": "2016-05-08T00:34:42.151Z",
    "user": 2,
    "tags": [
      1,
      47
    ]
  }
},
{
  "model": "app.memo",
  "pk": 96,
  "fields": {
    "title": "Atomのproxy設定",
    "content": "proxy下でパッケージのインストールなどをする場合\r\n\r\n```\r\napm config set http-proxy http://proxy-server.example.com:8080\r\napm config set https-proxy http://proxy-server.example.com:8080\r\n```\r\n\r\nユーザ（パスワード）が必要な場合\r\n\r\n```\r\napm config set http-proxy http://username:password@proxy-server.example.com:8080\r\napm config set https-proxy http://username:password@proxy-server.example.com:8080\r\n```\r\n\r\nLinuxのときは以下の環境変数を設定．`~/.bash_profile`とか`~/.zshenv`\r\n\r\n```\r\nexport ATOM_NODE_URL=http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist\r\n```",
    "pub_date": "2016-05-10T04:08:17.785Z",
    "user": 2,
    "tags": [
      1,
      46
    ]
  }
},
{
  "model": "app.memo",
  "pk": 97,
  "fields": {
    "title": "DjangoアプリのHerokuデプロイ手順",
    "content": "# 最新のHerokuドキュメント\r\n以前ではstaticファイルサーバには`dj-static`が使われていたが，今はWhitenoiseが推奨されているっぽい．\r\n\r\n# Django関連ライブラリ\r\n\r\n```\r\n$ pip install django gunicorn dj-database-url whitenoise\r\n```\r\n\r\n* Django (the web framework)\r\n* Gunicorn (WSGI server)\r\n* dj-database-url (a Django configuration helper)\r\n* Whitenoise (Static file server)\r\n\r\n# Procfileファイル\r\n\r\n```\r\nweb: gunicorn myapp.wsgi --log-file -\r\n```\r\n\r\n# settings.pyの編集\r\n\r\n```py\r\n# Parse database configuration from $DATABASE_URL\r\nimport dj_database_url\r\nDATABASES = {\r\n    'default': dj_database_url.config()\r\n}\r\n\r\n# Honor the 'X-Forwarded-Proto' header for request.is_secure()\r\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\r\n\r\n# Allow all host headers\r\nALLOWED_HOSTS = ['*']\r\n\r\n# Static asset configuration\r\nimport os\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles').replace('\\\\', '/')\r\nSTATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, 'static').replace('\\\\', '/')\r\n]\r\n\r\n# Installed apps\r\nINSTALLED_APPS = (\r\n    ...\r\n    \"gunicorn\",\r\n)\r\n```\r\n\r\nついでにDjango1.9方式でのtemplatesやmediaの設定方法\r\n\r\n```\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [os.path.join(BASE_DIR, 'templates').replace('\\\\', '/')],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n                \"django.template.context_processors.media\",\r\n                \"django.template.context_processors.static\",\r\n                'social.apps.django_app.context_processors.backends',\r\n                'social.apps.django_app.context_processors.login_redirect',\r\n            ],\r\n            'debug': DEBUG,\r\n        },\r\n    },\r\n]\r\n\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\\\', '/')\r\n```\r\n\r\n# wsgi.pyの編集\r\n\r\n```\r\nfrom django.core.wsgi import get_wsgi_application\r\nfrom whitenoise.django import DjangoWhiteNoise\r\napplication = DjangoWhiteNoise(get_wsgi_application())\r\n```\r\n\r\n# 環境変数の設定（ローカル用）\r\n\r\n.env\r\n\r\n```\r\nDEBUG=1\r\nDATABASE_URL=sqlite:///db.sqlite3\r\n```\r\n\r\nmanage.py\r\n\r\n```\r\nimport dotenv\r\ndotenv.read_dotenv()\r\n```\r\n\r\nsettings.py\r\n\r\n```\r\nfrom os import environ\r\nDEBUG = environ.get('DEBUG') == '1'\r\n```",
    "pub_date": "2016-05-10T12:01:36.621Z",
    "user": 2,
    "tags": [
      1,
      2,
      33,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 98,
  "fields": {
    "title": "Material Design for Bootstrap",
    "content": "# BootstrapをMaterial Designに\r\n\r\n[http://mdbootstrap.com](http://mdbootstrap.com)\r\n\r\n![image](https://mdbootstrap.com/wp-content/uploads/2016/05/bootstrap-tutorial-2.jpg)\r\n\r\n```\r\n<!-- Bootstrap core CSS -->\r\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n<!-- MDB core CSS -->\r\n<link href=\"http://mdbootstrap.com/mdbcdn/mdb.min.css\" rel=\"stylesheet\">\r\n\r\n<!-- JQuery -->\r\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.4.min.js\"></script>\r\n<!-- Bootstrap core JavaScript -->\r\n<script type=\"text/javascript\" src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\r\n<!-- MDB core JavaScript -->\r\n<script type=\"text/javascript\" src=\"http://mdbootstrap.com/mdbcdn/mdb.min.js\"></script>\r\n```",
    "pub_date": "2016-05-10T12:26:12.802Z",
    "user": 2,
    "tags": [
      1,
      25
    ]
  }
},
{
  "model": "app.memo",
  "pk": 99,
  "fields": {
    "title": "Cloud9",
    "content": "# クラウド上に環境構築\r\n\r\nかなりお手軽なのでお試し環境や教育用などにぴったり．\r\n\r\n[https://c9.io](https://c9.io)\r\n\r\n![image](http://nelog.jp/wp-content/uploads/2016/01/Cloud9-3.png)",
    "pub_date": "2016-05-10T12:45:12.192Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 100,
  "fields": {
    "title": "はなや 堀蔵",
    "content": "# 掘りごたつで完全個室\r\n\r\n[http://www.hotpepper.jp/strJ000989712/](http://www.hotpepper.jp/strJ000989712/)\r\n\r\n![image](http://imgfp.hotp.jp/IMGH/81/88/P023058188/P023058188_480.jpg)",
    "pub_date": "2016-05-22T11:38:32.556Z",
    "user": 2,
    "tags": [
      13,
      49
    ]
  }
},
{
  "model": "app.memo",
  "pk": 101,
  "fields": {
    "title": "Knot",
    "content": "# 国産の腕時計\r\n\r\n[http://knot-designs.com](http://knot-designs.com)\r\n\r\n![image](https://s3-ap-northeast-1.amazonaws.com/static.makuake-ca.com/upload/project/527/main_527_690_388.jpg)",
    "pub_date": "2016-05-31T13:53:49.194Z",
    "user": 2,
    "tags": [
      50
    ]
  }
},
{
  "model": "app.memo",
  "pk": 102,
  "fields": {
    "title": "Pythonからエクセル操作",
    "content": "# エクセル使ってアート\r\n\r\n[https://pasokonga.com](https://pasokonga.com)\r\n\r\n## インストール\r\n\r\n```\r\n$ pip install openpyxl\r\n```\r\n\r\n## サンプルコード\r\n\r\n```py\r\nimport cv2\r\nfrom openpyxl import Workbook\r\nfrom openpyxl.styles import PatternFill\r\nfrom string import ascii_uppercase as AtoZ\r\n\r\nimage = cv2.imread('spam.jpg')\r\n\r\nwb = Workbook()\r\nws = wb.active\r\n\r\nlenAtoZ = len(AtoZ)\r\ncol_name = list(AtoZ)\r\ncol_name += [AtoZ[i // lenAtoZ] + AtoZ[i % lenAtoZ] for i in range(len(image[0]) - lenAtoZ)]\r\n\r\nfor col in range(len(col_name)):\r\n    ws.column_dimensions[col_name[col]].width = 0.3\r\n\r\nfor row in range(len(image)):\r\n    ws.row_dimensions[row + 1].height = 1.5\r\n\r\n    for col in range(len(image[row])):\r\n        b, g, r = image[row][col]\r\n        color = '{0:>02X}{1:>02X}{2:>02X}'.format(r, g, b)\r\n\r\n        cell_name = col_name[col] + str(row + 1)\r\n        cell = ws[cell_name]\r\n        cell.fill = PatternFill('solid', color)\r\n\r\nwb.save('spam.xlsx')\r\n```",
    "pub_date": "2016-06-02T16:28:18.862Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 103,
  "fields": {
    "title": "Django REST framework",
    "content": "# Djangoを使ってRESTful\r\n\r\n[http://www.django-rest-framework.org](http://www.django-rest-framework.org)\r\n\r\n![image](http://www.django-rest-framework.org/img/logo.png)\r\n\r\n参考：  \r\n[http://qiita.com/kimihiro_n/items/86e0a9e619720e57ecd8](http://qiita.com/kimihiro_n/items/86e0a9e619720e57ecd8)",
    "pub_date": "2016-06-09T13:53:23.238Z",
    "user": 2,
    "tags": [
      1,
      2,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 104,
  "fields": {
    "title": "3行でできる機械学習",
    "content": "# 3行のソースコードだけでできる「indico」\r\n\r\n[https://indico.io](https://indico.io)\r\n\r\n```py\r\nimport indicoio\r\nindicoio.config.api_key = 'YOUR_API_KEY'\r\nprint(indicoio.sentiment_hq('indico is so easy to use!'))\r\n```\r\n\r\n参考：  \r\n[http://qiita.com/n0bisuke/items/868b43411078bc2018fb](http://qiita.com/n0bisuke/items/868b43411078bc2018fb)  \r\n[http://liginc.co.jp/275684](http://liginc.co.jp/275684)",
    "pub_date": "2016-06-09T14:02:15.183Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 105,
  "fields": {
    "title": "Djangoでリダイレクト",
    "content": "urls.pyに記述する方法\r\n\r\n```py\r\nfrom django.views.generic import RedirectView\r\n\r\nurlpatterns = [\r\n    url(r'^spam/', RedirectView.as_view(url = '/ham/')),\r\n]\r\n```\r\n\r\nviews.pyに記述する方法\r\n\r\n```py\r\nfrom django.shortcuts import redirect\r\n\r\ndef spam(request):\r\n    return redirect('/ham/')\r\n```",
    "pub_date": "2016-06-11T09:47:51.885Z",
    "user": 2,
    "tags": [
      1,
      2,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 106,
  "fields": {
    "title": "umaru-chan2",
    "content": "![image](https://cdn-ak.f.st-hatena.com/images/fotolife/j/jii-blog/20171016/20171016102731.jpg)",
    "pub_date": "2016-06-12T09:47:28.427Z",
    "user": 2,
    "tags": [
      41
    ]
  }
},
{
  "model": "app.memo",
  "pk": 107,
  "fields": {
    "title": "pythonで画像検索",
    "content": "# pythonで画像の検索&ダウンロード\r\n\r\nGoogle Image APIが使えなくなったのでその代用．\r\n\r\n## ライブラリインストール\r\n\r\n```\r\n$ pip install beautifulsoup4\r\n```\r\n\r\n## コード\r\n\r\n```py\r\nimport os, sys, time, shutil\r\nimport bs4, urllib.request\r\n\r\ndef download_image(keyword, download_num, dirname):\r\n    if os.path.exists(dirname):\r\n        shutil.rmtree(dirname)\r\n        time.sleep(1)\r\n    os.mkdir(dirname)\r\n\r\n    extensions = ['.jpg', '.jpeg', '.gif', '.png']\r\n    count = 0\r\n    num = 0\r\n    ONE_PAGE_NUM = 20\r\n    while num < download_num:\r\n        count += 1\r\n        url = 'http://image.search.yahoo.co.jp/search?p={0}&ktot=30&dtot=0&ei=UTF-8&xargs={1}&b={2}'.format(urllib.request.quote(keyword), count, ONE_PAGE_NUM * count + 1)\r\n        num += crawring(url, extensions, dirname, download_num - num)\r\n        if download_num * 2 < count * ONE_PAGE_NUM:\r\n            break\r\n\r\ndef crawring(url, extensions, dirname, download_num):\r\n    # 指定したURLのHTMLを取得\r\n    html = get_html_string(url)\r\n    if len(html) < 1:\r\n        print('damepo!!')\r\n        sys.exit(1)\r\n\r\n    # リソース取得\r\n    return get_resource(html, extensions, dirname, download_num)\r\n\r\ndef get_html_string(url):\r\n    decoded_html = ''\r\n\r\n    # HTMLを取得\r\n    try:\r\n        request = urllib.request.urlopen(url)\r\n        html = request.read()\r\n    except:\r\n        return decoded_html\r\n\r\n    # HTMLをデコード\r\n    decoded_html = html.decode('utf_8')\r\n\r\n    return decoded_html\r\n\r\ndef get_resource(html, extensions, dirname, download_num):\r\n    resource_list = []\r\n\r\n    soup = bs4.BeautifulSoup(html)\r\n    for a_tag in soup.find_all('a'):\r\n        href_str = a_tag.get('href')\r\n        try:\r\n            (path, ext) = os.path.splitext(href_str)\r\n            if ext in extensions:\r\n                resource_list.append(href_str)\r\n        except:\r\n            pass\r\n\r\n    resource_list = sorted(set(resource_list), key = resource_list.index)\r\n    count = 0\r\n    for resource in resource_list:\r\n        try:\r\n            filename = os.path.basename(resource)\r\n            savename = '{0}\\\\{1}'.format(dirname, filename)\r\n            if os.path.exists(savename):\r\n                continue\r\n            print('download ---> [{0}]'.format(filename))\r\n            request = urllib.request.urlopen(resource)\r\n            with open(savename, 'wb') as f:\r\n                f.write(request.read())\r\n            count += 1\r\n            if download_num <= count:\r\n                break\r\n        except Exception as e:\r\n            print(e)\r\n            print('download failed ... [{0}]'.format(filename))\r\n\r\n    return count\r\n\r\nif __name__ == '__main__':\r\n    keyword = '佐々木希'\r\n    dirname  = 'image'\r\n    download_image(keyword, 100, dirname)\r\n```",
    "pub_date": "2016-06-12T10:00:43.912Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 108,
  "fields": {
    "title": "カラーセレクタのサンプル",
    "content": "# PyQt5でサンプルプログラム\r\n\r\n## ライブラリのインストール\r\n\r\n```\r\n$ pip install pyqt5 numpy matplotlib opencv_python\r\n```\r\n\r\n## コード\r\n\r\n```py\r\nimport sys\r\nimport numpy as np\r\nimport cv2\r\n\r\nfrom PyQt5.QtCore import *\r\nfrom PyQt5.QtGui import *\r\nfrom PyQt5.QtWidgets import *\r\n\r\ndef hsv_to_rgb(h, s, v):\r\n    bgr = cv2.cvtColor(np.array([[[h, s, v]]], dtype=np.uint8), cv2.COLOR_HSV2BGR)[0][0]\r\n    return (bgr[2], bgr[1], bgr[0])\r\n\r\ndef rgb_to_hsv(r, g, b):\r\n    hsv = cv2.cvtColor(np.array([[[b, g, r]]], dtype=np.uint8), cv2.COLOR_BGR2HSV)[0][0]\r\n    return (hsv[0], hsv[1], hsv[2])\r\n\r\nclass MainWindow(QWidget):\r\n    color_base = (0, 0, 255)\r\n    color_table = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]\r\n\r\n    changedValueRgb = pyqtSignal(int, int, int)\r\n\r\n    def __init__(self, parent = None):\r\n        super(MainWindow, self).__init__(parent)\r\n\r\n        r, g, b = self.color_base\r\n\r\n        self.rsld = QSlider(Qt.Horizontal, self)\r\n        self.rsld.setFocusPolicy(Qt.NoFocus)\r\n        self.rsld.setGeometry(30, 200, 500, 30)\r\n        self.rsld.setMaximum(255)\r\n        self.rsld.setValue(r)\r\n        self.rsld.valueChanged[int].connect(\r\n            lambda x: self.emitChangedValueRgb(x, self.color_base[1], self.color_base[2]))\r\n\r\n        self.gsld = QSlider(Qt.Horizontal, self)\r\n        self.gsld.setFocusPolicy(Qt.NoFocus)\r\n        self.gsld.setGeometry(30, 250, 500, 30)\r\n        self.gsld.setMaximum(255)\r\n        self.gsld.setValue(g)\r\n        self.gsld.valueChanged[int].connect(\r\n            lambda x: self.emitChangedValueRgb(self.color_base[0], x, self.color_base[2]))\r\n\r\n        self.bsld = QSlider(Qt.Horizontal, self)\r\n        self.bsld.setFocusPolicy(Qt.NoFocus)\r\n        self.bsld.setGeometry(30, 300, 500, 30)\r\n        self.bsld.setMaximum(255)\r\n        self.bsld.setValue(b)\r\n        self.bsld.valueChanged[int].connect(\r\n            lambda x: self.emitChangedValueRgb(self.color_base[0], self.color_base[1], x))\r\n\r\n        self.changedValueRgb.connect(self.refresh)\r\n        self.setWindowTitle(\"Color selector!\")\r\n        self.make_color()\r\n\r\n    def emitChangedValueRgb(self, r, g, b):\r\n        self.changedValueRgb.emit(r, g, b)\r\n\r\n    def refresh(self, r, g, b):\r\n        print('r:{0} g:{1} b:{2}'.format(r, g, b))\r\n        self.color_base = (r, g, b)\r\n        self.make_color()\r\n        self.repaint()\r\n\r\n    def paintEvent(self, event):\r\n        painter = QPainter(self)\r\n        size = 100\r\n        xpos = 30\r\n        ypos = 30\r\n        for i in range(5):\r\n            painter.setPen(QColor(*self.color_table[i]))\r\n            painter.setBrush(QColor(*self.color_table[i]))\r\n            painter.drawRect(xpos, ypos, size, size)\r\n            xpos += size\r\n\r\n    def make_color(self):\r\n        base_hsv = rgb_to_hsv(*self.color_base)\r\n        self.color_table[2] = self.color_base\r\n        spam = ((0, 16), (1, 8), (3, -8), (4, -16))\r\n        for item in spam:\r\n            self.make_color2(item[0], item[1], base_hsv)\r\n\r\n    def make_color2(self, index, def_val, base_hsv):\r\n        h, s, v = base_hsv\r\n        h += def_val\r\n        if h < 0:\r\n            h += 180\r\n        self.color_table[index] = hsv_to_rgb(h, s, v)\r\n\r\nif __name__ == '__main__':\r\n    app = QApplication(sys.argv)\r\n    main_window = MainWindow()\r\n    main_window.show()\r\n    sys.exit(app.exec_())\r\n```",
    "pub_date": "2016-06-12T10:56:53.752Z",
    "user": 2,
    "tags": [
      1,
      2,
      57
    ]
  }
},
{
  "model": "app.memo",
  "pk": 109,
  "fields": {
    "title": "Pythonで奇麗なグラフ表示",
    "content": "# Seabornで奇麗なグラフ描画\r\n\r\n![image](http://seaborn.pydata.org/_images/anscombes_quartet.png)\r\n\r\n## requirements.txt\r\n\r\n```\r\ncycler==0.10.0\r\nmatplotlib==1.5.1\r\nnumpy==1.11.0\r\npandas==0.18.1\r\npyparsing==2.1.4\r\npython-dateutil==2.5.3\r\npytz==2016.4\r\nscipy==0.17.1\r\nseaborn==0.7.1\r\nsix==1.10.0\r\n```\r\n\r\n※numpyは `numpy+mkl` が必要\r\n\r\n## サンプルコード\r\n\r\n```py\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nimport pandas as pd\r\n\r\nflip = 1\r\nx = np.linspace(0, 14, 100)\r\nfor i in range(1, 7):\r\n    plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\r\nplt.show()\r\n\r\n# 各種スタイルの変更\r\n# 一次元分布データの描画\r\nsns.set_style(\"whitegrid\")\r\nx = np.random.normal(size=100)\r\nsns.distplot(x)\r\nplt.show()\r\n\r\nsns.set_style(\"dark\")\r\nsns.distplot(x)\r\nplt.show()\r\n\r\nsns.set_style(\"white\")\r\nsns.distplot(x)\r\nplt.show()\r\n\r\nsns.set_style(\"ticks\")\r\nsns.distplot(x)\r\nplt.show()\r\n\r\nsns.set_style(\"ticks\")\r\nsns.distplot(x)\r\nsns.despine()\r\nplt.show()\r\n\r\nsns.set_style(\"darkgrid\")\r\nsns.distplot(x, kde=False, rug=True)\r\nplt.show()\r\n\r\nsns.set_style(\"darkgrid\")\r\nsns.distplot(x, kde=False, rug=True, bins=5)\r\nplt.show()\r\n\r\n# 折れ線グラフ\r\ntitanic = sns.load_dataset(\"titanic\")\r\nsns.pointplot(x=\"class\", y=\"survived\", hue=\"sex\", data=titanic,\r\n              palette={\"male\": \"g\", \"female\": \"m\"},\r\n              markers=[\"^\", \"o\"], linestyles=[\"-\", \"--\"])\r\nplt.show()\r\n\r\n# 棒グラフ\r\ntitanic = sns.load_dataset(\"titanic\")\r\nsns.barplot(x=\"sex\", y=\"survived\", hue=\"class\", data=titanic)\r\nplt.show()\r\n\r\n# 二次元の分布データの描画\r\nmean, cov = [0, 1], [(1, .5), (.5, 1)]\r\ndata = np.random.multivariate_normal(mean, cov, 200)\r\ndf = pd.DataFrame(data, columns=[\"x\", \"y\"])\r\nsns.jointplot(x=\"x\", y=\"y\", data=df)\r\nplt.show()\r\n\r\nsns.jointplot(x=\"x\", y=\"y\", kind=\"hex\", data=df)\r\nplt.show()\r\n\r\nsns.jointplot(x=\"x\", y=\"y\", kind=\"kde\", data=df)\r\nplt.show()\r\n\r\n# データセットの相関分析\r\niris = sns.load_dataset(\"iris\")\r\nsns.pairplot(iris)\r\nplt.show()\r\n\r\nsns.pairplot(iris, hue=\"species\")\r\nplt.show()\r\n```",
    "pub_date": "2016-06-13T05:05:17.896Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 110,
  "fields": {
    "title": "パーキンソンの法則",
    "content": "年末に工事が多くなるあれ．人間は予算と時間はあるだけ使いきってしまう生き物．\r\n\r\n# 第1法則\r\n\r\n仕事の量は，完成のために与えられた時間をすべて満たすまで膨張する\r\n\r\n# 第2法則\r\n\r\n支出の額は，収入の額に達するまで膨張する",
    "pub_date": "2016-06-13T05:55:27.169Z",
    "user": 2,
    "tags": [
      51
    ]
  }
},
{
  "model": "app.memo",
  "pk": 111,
  "fields": {
    "title": "記録の取り方",
    "content": "# 言われたことをそのまま書く\r\n\r\n> 特に若手の意見を進行役が要約して議事録に書いてしまうと，発言者の意見じゃなくなってしまったようで，モチベーションの低下につながってしまう．\r\n\r\nなるほど．．．！",
    "pub_date": "2016-06-13T07:30:34.060Z",
    "user": 2,
    "tags": [
      51
    ]
  }
},
{
  "model": "app.memo",
  "pk": 112,
  "fields": {
    "title": "カラーセレクタのサンプル（OpenCV未使用版）",
    "content": "# PyQt5でサンプルプログラム\r\n\r\n## ライブラリのインストール\r\n\r\n```\r\n$ pip install pyqt5\r\n```\r\n\r\n## コード\r\n\r\n```py\r\nimport sys, math\r\n\r\nfrom PyQt5.QtCore import *\r\nfrom PyQt5.QtGui import *\r\nfrom PyQt5.QtWidgets import *\r\n\r\ndef hsv_to_rgb(h, s, v):\r\n    i = int(math.floor(h / 60)) % 6\r\n    f = float(h / 60) - float(math.floor(h / 60))\r\n    p = int(round(v * (1.0 - (s / 255))))\r\n    q = int(round(v * (1.0 - (s / 255) * f)))\r\n    t = int(round(v * (1.0 - (s / 255) * (1.0 - f))))\r\n\r\n    r, g, b = 0, 0, 0\r\n    if i == 0:\r\n        r = v; g = t; b = p\r\n    elif i == 1:\r\n        r = q; g = v; b = p\r\n    elif i == 2:\r\n        r = p; g = v; b = t\r\n    elif i == 3:\r\n        r = p; g = q; b = v\r\n    elif i == 4:\r\n        r = t; g = p; b = v\r\n    else:\r\n        r = v; g = p; b = q\r\n\r\n    return (r, g, b);\r\n\r\ndef rgb_to_hsv(r, g, b):\r\n    mx = max((r, g, b))\r\n    mn = min((r, g, b))\r\n    \r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * (g - b) / (mx - mn) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * (b - r) / (mx - mn)) + 120\r\n    else:\r\n        h = (60 * (r - g) / (mx - mn)) + 240;   \r\n\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = 255 * ((mx - mn) / mx)\r\n\r\n    v = mx\r\n\r\n    return (h, s, v)\r\n\r\nclass MainWindow(QWidget):\r\n    color_base = (0, 0, 255)\r\n    color_table = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]\r\n\r\n    changedValueRgb = pyqtSignal(int, int, int)\r\n\r\n    def __init__(self, parent = None):\r\n        super(MainWindow, self).__init__(parent)\r\n\r\n        r, g, b = self.color_base\r\n\r\n        self.rsld = QSlider(Qt.Horizontal, self)\r\n        self.rsld.setFocusPolicy(Qt.NoFocus)\r\n        self.rsld.setGeometry(30, 200, 500, 30)\r\n        self.rsld.setMaximum(255)\r\n        self.rsld.setValue(r)\r\n        self.rsld.valueChanged[int].connect(\r\n            lambda x: self.emitChangedValueRgb(x, self.color_base[1], self.color_base[2]))\r\n\r\n        self.gsld = QSlider(Qt.Horizontal, self)\r\n        self.gsld.setFocusPolicy(Qt.NoFocus)\r\n        self.gsld.setGeometry(30, 250, 500, 30)\r\n        self.gsld.setMaximum(255)\r\n        self.gsld.setValue(g)\r\n        self.gsld.valueChanged[int].connect(\r\n            lambda x: self.emitChangedValueRgb(self.color_base[0], x, self.color_base[2]))\r\n\r\n        self.bsld = QSlider(Qt.Horizontal, self)\r\n        self.bsld.setFocusPolicy(Qt.NoFocus)\r\n        self.bsld.setGeometry(30, 300, 500, 30)\r\n        self.bsld.setMaximum(255)\r\n        self.bsld.setValue(b)\r\n        self.bsld.valueChanged[int].connect(\r\n            lambda x: self.emitChangedValueRgb(self.color_base[0], self.color_base[1], x))\r\n\r\n        self.changedValueRgb.connect(self.refresh)\r\n        self.setWindowTitle(\"Color selector!\")\r\n        self.make_color()\r\n\r\n    def emitChangedValueRgb(self, r, g, b):\r\n        self.changedValueRgb.emit(r, g, b)\r\n\r\n    def refresh(self, r, g, b):\r\n        print('r:{0} g:{1} b:{2}'.format(r, g, b))\r\n        self.color_base = (r, g, b)\r\n        self.make_color()\r\n        self.repaint()\r\n\r\n    def paintEvent(self, event):\r\n        painter = QPainter(self)\r\n        size = 100\r\n        xpos = 30\r\n        ypos = 30\r\n        for i in range(5):\r\n            painter.setPen(QColor(*self.color_table[i]))\r\n            painter.setBrush(QColor(*self.color_table[i]))\r\n            painter.drawRect(xpos, ypos, size, size)\r\n            xpos += size\r\n\r\n    def make_color(self):\r\n        base_hsv = rgb_to_hsv(*self.color_base)\r\n        self.color_table[2] = self.color_base\r\n        spam = ((0, 30), (1, 15), (3, -15), (4, -30))\r\n        for item in spam:\r\n            self.make_color2(item[0], item[1], base_hsv)\r\n\r\n    def make_color2(self, index, def_val, base_hsv):\r\n        h, s, v = base_hsv\r\n        h += def_val\r\n        if h < 0:\r\n            h += 360\r\n        self.color_table[index] = hsv_to_rgb(h, s, v)\r\n\r\nif __name__ == '__main__':\r\n    app = QApplication(sys.argv)\r\n    main_window = MainWindow()\r\n    main_window.show()\r\n    sys.exit(app.exec_())\r\n```",
    "pub_date": "2016-06-15T10:12:15.032Z",
    "user": 2,
    "tags": [
      1,
      2,
      57
    ]
  }
},
{
  "model": "app.memo",
  "pk": 113,
  "fields": {
    "title": "Win32アプリでのリムーバブルディスクの取得方法",
    "content": "# ドライブ名と種類の取得\r\n\r\n```cpp\r\n#include <stdio.h>\r\n#include <windows.h>\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n    WCHAR buff[1024] = { '\\0' };\r\n    DWORD buffSize = ::GetLogicalDriveStrings(sizeof(buff), static_cast<LPWSTR>(buff));\r\n\r\n    DWORD index = 0;\r\n    while (index < buffSize)\r\n    {\r\n        const DWORD type = ::GetDriveType(&buff[index]);\r\n        if (type == DRIVE_REMOVABLE)\r\n        {\r\n            ::wprintf(L\"%s\\n\", &buff[index]);\r\n        }\r\n\r\n        index += ::wcslen(&buff[index]) + 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```",
    "pub_date": "2016-06-27T02:40:29.368Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 114,
  "fields": {
    "title": "Visual C++でDebugプリント",
    "content": "# Visual Studioの出力ウィンドウにメッセージ表示\r\n\r\nOutputDebugString APIを使用すると表示される．\r\n\r\nprintfのように書式付き文字列で表示するサンプルコード．\r\n\r\n```cpp\r\n#include \"stdafx.h\"\r\n#include <windows.h>\r\n\r\nvoid PrintDebugLine(LPCTSTR format, ...)\r\n{\r\n    va_list argp;\r\n    wchar_t buff[1024];\r\n    va_start(argp, format);\r\n    _vstprintf(buff, sizeof(buff), format, argp);\r\n    va_end(argp);\r\n    ::OutputDebugString(buff);\r\n    ::OutputDebugString(_T(\"\\n\"));\r\n}\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n    PrintDebugLine(_T(\"Hello, world!\"));\r\n    PrintDebugLine(_T(\"%3d %3d\"), 23, 42);\r\n    PrintDebugLine(_T(\"-- %s --\"), _T(\"にゃんぱすー\"));\r\n    return 0;\r\n}\r\n```",
    "pub_date": "2016-07-27T07:04:04.169Z",
    "user": 2,
    "tags": [
      1,
      16,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 115,
  "fields": {
    "title": "pyvenvの使い方",
    "content": "# Windowsでのpyvenvの使い方\r\n\r\n仮想環境を作るには下記で\r\n\r\n```\r\n> C:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python35\\Tools\\scripts\\pyvenv.py envname\r\n```\r\n\r\nでもこれだと面倒なので，下記でも同じ\r\n\r\n```\r\n> python -m venv envname\r\n```\r\n\r\nあとは仮想環境に入るだけ\r\n\r\n```\r\n> envname\\Scripts\\activate.bat\r\n```\r\n\r\n仮想環境から抜けるのはこれ\r\n\r\n```\r\n> deactivate.bat\r\n```",
    "pub_date": "2016-08-06T12:14:44.463Z",
    "user": 2,
    "tags": [
      1,
      2,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 116,
  "fields": {
    "title": "Pythonでバイナリファイルの入出力",
    "content": "# バイナリモードのファイルのRead/Write\r\n\r\n`bytearray`を使うと簡単．\r\n\r\n```py\r\nimport random\r\n\r\ndef create_file(filename):\r\n    with open(filename, 'wb') as f:\r\n        f.write(bytearray(range(42)))\r\n        f.write(bytearray([0xAA if random.randint(0, 32) == 32 else 0x00 for _ in range(1000)]))\r\n\r\ndef convert_file(infile, outfile):\r\n    with open(infile, 'rb') as f:\r\n        idata = f.read()\r\n\r\n    odata = [x for x in idata[:42]] + [0x55 if x == 0xAA else x for x in idata[42:]]\r\n\r\n    with open(outfile, 'wb') as f:\r\n        f.write(bytearray(odata))\r\n\r\nif __name__ == '__main__':\r\n    create_file('spam.dat')\r\n    convert_file('spam.dat', 'ham.dat')\r\n```\r\n\r\nbytearrayを使わないなら，`0x31.to_bytes(1, 'big')`でbytesに変換．",
    "pub_date": "2016-08-09T16:01:25.425Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 117,
  "fields": {
    "title": "Debianのインストール（VMware）",
    "content": "# sudoのインストール\r\n\r\n`sudo`をインストールと権限の追加\r\n\r\n```console\r\n$ su -\r\n$ aptitude update\r\n$ aptitude install sudo\r\n$ visudo\r\n---\r\nroot      ALL=(ALL:ALL) ALL\r\nusername  ALL=(ALL:ALL) ALL\r\n---\r\n```\r\n\r\n# build-essentialのインストール\r\n\r\n`open-vm-tools`のインストール前に入れておくといいっぽい\r\n\r\n```console\r\n$ sudo aptitude install build-essential\r\n```\r\n\r\n# open-vm-toolsのインストール\r\n\r\nVMwareでフルスクリーン表示するために\r\n\r\n```console\r\n$ sudo aptitude install open-vm-tools\r\n$ sudo aptitude install open-vm-tools-desktop\r\n```\r\n\r\n# Terminatorのインストール\r\n\r\n半透明にできるターミナル\r\n\r\n```console\r\n$ sudo aptitude install terminator\r\n```\r\n\r\n# GitとSubversionのインストール\r\n\r\n```console\r\n$ sudo aptitude install git\r\n$ git config --global alias.mylog 'log --graph --name-status --pretty=format:\"%C(red)%h %C(green)%an %Creset%s %C(yellow)%d%Creset\"'\r\n$ sudo aptitude install subversion subversion-tools\r\n```\r\n\r\n# Zshのインストール\r\n\r\n`Zsh`と`oh-my-zsh`のインストール．aliasの設定も．  \r\n[https://github.com/robbyrussell/oh-my-zsh/wiki/Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\r\n\r\n```console\r\n$ sudo aptitude install zsh\r\n$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\r\n$ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\r\n---\r\nZSH_THEME=\"candy\"\r\n---\r\n```\r\n\r\n# tmuxのインストール\r\n\r\n使用するシェルをZshに\r\n\r\n```console\r\n$ sudo aptitude install tmux\r\n$ sudo aptitude install xsel\r\n---\r\n# .tmux.conf\r\nset-option -g default-shell /bin/zsh\r\n---\r\n```\r\n\r\n# Pythonのインストール\r\n\r\nまず関連パッケージをインストール\r\n\r\n```console\r\n$ sudo aptitude install libsqlite3-dev\r\n$ sudo aptitude install libreadline6-dev\r\n$ sudo aptitude install libgdbm-dev\r\n$ sudo aptitude install zlib1g-dev\r\n$ sudo aptitude install libbz2-dev\r\n$ sudo aptitude install sqlite3\r\n$ sudo aptitude install tk-dev\r\n$ sudo aptitude install zip\r\n$ sudo aptitude install libssl-dev\r\n```\r\n\r\n`pyenv`でpython環境を管理する\r\n\r\n```console\r\n$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv\r\n---\r\n# .zshenv\r\nexport PYENV_ROOT=$HOME/.pyenv\r\nexport PATH=$PYENV_ROOT/bin:$PATH\r\neval \"$(pyenv init -)\"\r\n---\r\n$ pyenv install 3.5.2\r\n$ pyenv install 2.7.9\r\n$ pyenv global 3.5.2\r\n\r\n$ pyenv version    # 現在のバージョン\r\n$ pyenv versions   # インストール済みの全バージョン\r\n$ pyenv install -l # インストール可能なバージョン\r\n```\r\n\r\n# Emacsのインストール\r\n\r\n[https://github.com/clear-code/emacs.d](https://github.com/clear-code/emacs.d)\r\n\r\n```console\r\n$ sudo aptitude install emacs\r\n$ git clone https://github.com/clear-code/emacs.d.git ~/.emacs.d\r\n---\r\n;; .emacs,d/init.el\r\n;; shut up, emacs!\r\n(setq display-warning-minimum-level :error))\r\n---\r\n---\r\n;; .emacs.d/config/builtins/local.el\r\n(custom-set-faces\r\n(hl-line ((t (:background \"color-236\"))))\r\n)\r\n---\r\n```\r\n\r\n# Atomのインストール\r\n\r\n[https://atom.io](https://atom.io)からdebパッケージをダウンロード\r\n\r\n```console\r\n$ sudo aptitude install git gvfs-bin\r\n$ sudo aptitude -f install\r\n$ sudo dpkg -i atom-amd64.deb\r\n$ apm install --packages-file packages.txt\r\n```\r\n\r\n# Rtagsのインストール\r\n\r\n関連パッケージのインストール\r\n\r\n```console\r\n$ sudo aptitude install clang libclang-dev cmake\r\n```\r\n\r\nRtagsのビルド\r\n\r\n```console\r\n$ git clone https://github.com/Andersbakken/rtags\r\n$ cd rtags\r\n$ git submodule init\r\n$ git submodule update\r\n$ mkdir build\r\n$ cd build\r\n$ cmake ..\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\nRtagsのセットアップ\r\n\r\n```console\r\n$ git clone https://github.com/rizsotto/Bear\r\n$ cd Bear\r\n$ mkdir build && cd build\r\n$ cmake ..\r\n$ make && sudo make install\r\n```\r\n\r\n使い方\r\n\r\n```console\r\n$ bear make\r\n$ rdm --daemon\r\n$ rc -J .\r\n```\r\n\r\n# その他\r\n\r\n* pyonpyon\r\n\r\n [https://github.com/sgymtic/sl](https://github.com/sgymtic/sl)\r\n\r\n```console\r\n$ sudo aptitude install libncurses5-dev\r\n$ git clone git@github.com:sgymtic/sl.git\r\n$ git checkout pyonpyon\r\n$ make\r\n```\r\n\r\n* vim\r\n* nodejs\r\n* npm\r\n* tig\r\n* git-cola",
    "pub_date": "2016-08-11T08:11:30.693Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 118,
  "fields": {
    "title": "C# + OpenCV",
    "content": "# 前準備\r\n\r\nNuGetで`OpenCvSharp3`をインストール．\r\n\r\n# サンプルコード\r\n\r\n画像を読み込んでエッジ検出して表示．\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing OpenCvSharp;\r\n\r\nnamespace opencv\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var gray = new Mat(\"sample.png\", ImreadModes.GrayScale))\r\n            using (var edge = new Mat())\r\n            {\r\n                Cv2.Canny(gray, edge, 100, 200);\r\n                using (new Window(\"Show Image\", edge))\r\n                {\r\n                    Cv2.WaitKey();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
    "pub_date": "2016-08-16T00:42:41.838Z",
    "user": 2,
    "tags": [
      1,
      10,
      18
    ]
  }
},
{
  "model": "app.memo",
  "pk": 119,
  "fields": {
    "title": "Pythonでコマンドライン引数解析",
    "content": "# 主な選択肢\r\n\r\n* sys.argv\r\n* argparser\r\n* docopt\r\n\r\n`argparser`が標準ライブラリで結構使えそう．\r\n\r\n# argparserの基本的な使い方\r\n\r\n## 準備\r\n\r\n```py\r\nimport argparse\r\nparser = argparse.ArgumentParser(description = 'spam')\r\n```\r\n\r\n## 位置引数\r\n\r\n```py\r\nparser.add_argument('foo', help = 'foo...')\r\nargs = parser.parse_args()\r\nfoo = args.foo\r\n```\r\n\r\n## 位置引数を省略可に\r\n\r\n```py\r\nparser.add_argument('foo', nargs = '?', default = '', help = 'foo...')\r\n```\r\n\r\n## オプション引数\r\n\r\n```py\r\nparser.add_argument('-f', help = 'foo...')\r\nparser.add_argument('-b', '--bar', default = 42, type = int, help = 'bar...')\r\nargs = parser.parse_args()\r\nfoo = args.f\r\nbar = args.bar\r\n```\r\n\r\n## オプション引数をフラグとして\r\n\r\n```py\r\nparser.add_argument('-f', '--foo', action = 'store_true', help = 'foo...')\r\n```\r\n\r\n## オプション引数をフラグとして\r\n\r\n```py\r\nparser.add_argument('-f', '--foo', action = 'store_true', help = 'foo...')\r\n```",
    "pub_date": "2016-09-19T02:04:45.953Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 120,
  "fields": {
    "title": "3行で機械学習",
    "content": "# 3行のソースコードだけでできる「indico」\r\n\r\nPython，Ruby，Java，PHP，node.js，R言語に対応．\r\n\r\n[https://indico.io](https://indico.io)\r\n\r\n```\r\nimport indicoio\r\nindicoio.config.api_key = 'YOUR_API_KEY'\r\nprint(indicoio.sentiment_hq('indico is so easy to use!'))\r\n```",
    "pub_date": "2016-09-19T02:19:41.537Z",
    "user": 2,
    "tags": [
      1,
      53
    ]
  }
},
{
  "model": "app.memo",
  "pk": 121,
  "fields": {
    "title": "OpenCVでモザイク処理",
    "content": "# OpenCV（Python）でのモザイク処理\r\n\r\nいったん画像を小さくリサイズしてから元のサイズに戻すだけ．\r\n\r\n```py\r\nimport numpy as np\r\nimport cv2\r\n\r\nimg = cv2.imread('spam.png')\r\n\r\nfor x, y, w, h in [(12, 99, 244, 162), (343, 17, 168, 244), (598, 17, 244, 244)]:\r\n    cut_img = img[y:y + h, x:x + w]\r\n    cut_size = cut_img.shape[:2][::-1]\r\n    cut_img = cv2.resize(cut_img, (cut_size[0] // 10, cut_size[0] // 10))\r\n    cut_img = cv2.resize(cut_img,cut_size, interpolation = cv2.INTER_NEAREST)\r\n    img[y:y + h, x:x + w] = cut_img\r\n\r\ncv2.imshow('mosaic', img)\r\ncv2.imwrite('ham.png', img)\r\ncv2.waitKey(0)\r\ncv2.destroyAllWindows()\r\n```",
    "pub_date": "2016-09-22T07:07:08.275Z",
    "user": 2,
    "tags": [
      1,
      2,
      18
    ]
  }
},
{
  "model": "app.memo",
  "pk": 122,
  "fields": {
    "title": "Vivaldiでパスワードを保存しない，に設定したページでパスワードを保存するように変更する",
    "content": "アドレスバーに [chrome://settings](chrome://settings) を入力\r\n\r\nパスワードを管理から該当箇所を削除\r\n\r\n![image](http://mkb.salchu.net/wp/wp-content/uploads/2016/05/icon-vivaldi-1-650x320.png)\r\n\r\n※テキストの履歴の削除は選択してshift＋delete",
    "pub_date": "2016-09-30T14:05:25.008Z",
    "user": 2,
    "tags": [
      54
    ]
  }
},
{
  "model": "app.memo",
  "pk": 123,
  "fields": {
    "title": "electron-packagerでのcannot find module解決",
    "content": "# package.jsonの中にdependencies必要\r\n\r\nnpmでインストールするときに，`npm install <module_name> --save`とすればOK！\r\n\r\n![image](http://codezine.jp/static/images/article/8782/8782_t.gif)",
    "pub_date": "2016-10-09T04:31:41.339Z",
    "user": 2,
    "tags": [
      1,
      47
    ]
  }
},
{
  "model": "app.memo",
  "pk": 124,
  "fields": {
    "title": "PythonでリストのReverse",
    "content": "# スライスを使ったリバース\r\n\r\n```py\r\nspam = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nspam[::-1]\r\n```\r\n\r\n# 普通のやり方\r\n\r\n```py\r\nspam = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nlist(reversed(spam))\r\n```\r\n\r\nとくに文字列の反転なんかはスライスを使ったほうが簡単．（reversedを使うと''.join()しないと文字のリストになってしまう）\r\n\r\n```py\r\nspam = 'Hello, world!'\r\nprint(spam[::-1])\r\nprint(''.join(reversed(spam)))\r\n```",
    "pub_date": "2016-10-28T04:47:25.465Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 125,
  "fields": {
    "title": "Herokuの環境変数の操作",
    "content": "# 基本的な使い方\r\n\r\n```\r\n# 環境変数一覧\r\n$ heroku config\r\n\r\n# 環境変数名を指定して参照\r\n$ heroku config:get ENV_VAR_NAME\r\n\r\n# 追加 (一応addも使えます)\r\n$ heroku config:set ENV_VAR_NAME=\"value\"\r\n\r\n# 削除 (一応removeも使えます)\r\n$ heroku config:unset ENV_VAR_NAME\r\n\r\n# アプリが複数ある場合\r\n$ heroku config --app アプリ名\r\n```",
    "pub_date": "2016-11-01T13:59:41.933Z",
    "user": 2,
    "tags": [
      1,
      33
    ]
  }
},
{
  "model": "app.memo",
  "pk": 126,
  "fields": {
    "title": "CMakeLists.txtの最低限の記述",
    "content": "# CMakeLists.txtの内容\r\n\r\n```\r\ncmake_minimum_required(VERSION 2.8)\r\nadd_definitions(\"-Wall -std=c++11\")\r\nset(CMAKE_BUILD_TYPE Debug)\r\nadd_executable(project_name\r\n    main.cpp\r\n    hoge.cpp\r\n    piyo.cpp\r\n)\r\n```\r\n\r\n# 実行（Windows MSYS）\r\n\r\n```\r\n> cmake . -G \"MSYS Makefiles\"\r\n```\r\n\r\n# 実行（Linux）\r\n\r\n```\r\n$ cmake .\r\n```",
    "pub_date": "2016-11-25T07:19:26.922Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 127,
  "fields": {
    "title": "プログラミング用フォント",
    "content": "# おすすめフォント\r\n\r\n* CamingoCode\r\n* Source Code Pro\r\n* Ricty / Inconsolata\r\n* Consolas\r\n* Monaco / Osaka-Mono\r\n* Menlo\r\n\r\n# Debianでのインストール方法\r\n\r\n```\r\n$ fc-list  # フォント一覧\r\n$ sudo mv CamingoCode /usr/share/fonts/truetype/  # ダウンロードしたフォントをコピー（インストール）\r\n$ fc-cache  # フォントキャッシュを更新\r\n$ fc-list  # フォント一覧（インストールしたフォントが追加）\r\n```",
    "pub_date": "2016-11-28T12:09:27.187Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 128,
  "fields": {
    "title": "EditorConfigのサンプル",
    "content": "# どんなエディタでもコードの統一性を高める\r\n\r\n[http://editorconfig.org/](http://editorconfig.org/)\r\n\r\n![image](http://editorconfig.org/logo.png)\r\n\r\n## .editorconfig\r\n\r\n```\r\n# EditorConfig helps developers define and maintain consistent\r\n# coding styles between different editors and IDEs\r\n# editorconfig.org\r\n\r\nroot = true\r\n\r\n[*]\r\n\r\n# Change these settings to your own preference\r\nindent_style = space    # tab or space\r\nindent_size = 4\r\n\r\n# We recommend you to keep these unchanged\r\nend_of_line = lf        # lf or cr or crls\r\ncharset = utf-8\r\ntrim_trailing_whitespace = true\r\ninsert_final_newline = true\r\n\r\n[*.md]\r\ntrim_trailing_whitespace = false\r\n```",
    "pub_date": "2016-12-01T06:02:40.343Z",
    "user": 2,
    "tags": [
      1,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 129,
  "fields": {
    "title": "VivaldiのスタートページURL",
    "content": "# VivaldiのスタートページURL\r\n\r\n[vivaldi://startpage](vivaldi://startpage)\r\n\r\n![image](https://i.ytimg.com/vi/HPjJszHidhI/hqdefault.jpg)\r\n\r\nホームページに設定しておけばアイコンクリックからスタートページが表示できる．",
    "pub_date": "2016-12-02T11:06:57.319Z",
    "user": 2,
    "tags": [
      54
    ]
  }
},
{
  "model": "app.memo",
  "pk": 130,
  "fields": {
    "title": "TypeScriptでElectron",
    "content": "# TypeScriptを使ってElectronアプリを作成\r\n\r\nTypeScriptと型定義のインストール（ここではローカルに）\r\n\r\n```\r\n$ npm init\r\n$ npm install typescript --save-dev\r\n$ npm install @types/electron --save-dev\r\n$ npm install @types/node --save-dev\r\n```\r\n\r\nTypeScriptの設定（tsconfig.json）\r\n\r\n```\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es6\",\r\n        \"module\": \"commonjs\",\r\n        \"sourceMap\": false\r\n    },\r\n    \"exclude\": [\r\n        \"node_modules\"\r\n    ]\r\n}\r\n```\r\n\r\npackage.jsonを使って起動． `npm run build` でビルド， `npm start` でビルドをしてからElectronで起動．\r\n\r\n```\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"node_modules\\\\.bin\\\\tsc\",\r\n    \"prestart\": \"npm run build\",\r\n    \"start\": \"electron .\"\r\n  },\r\n```\r\n\r\nmain.jsのテンプレート\r\n\r\n```\r\nconst electron = require('electron');\r\nconst app = electron.app;\r\nconst BrowserWindow = electron.BrowserWindow;\r\nclass MyApplication {\r\n    constructor() {\r\n        this.mainWindow = null;\r\n        app.on('window-all-closed', this.onWindowAllClosed);\r\n        app.on('ready', this.onReady);\r\n    }\r\n    onWindowAllClosed() {\r\n        if (process.platform != 'darwin') {\r\n            app.quit();\r\n        }\r\n    }\r\n    onReady() {\r\n        this.mainWindow = new BrowserWindow({\r\n            width: 800,\r\n            height: 400,\r\n            minWidth: 500,\r\n            minHeight: 200,\r\n            acceptFirstMouse: true,\r\n            titleBarStyle: 'hidden'\r\n        });\r\n        this.mainWindow.loadURL('file://' + __dirname + `/index.html`);\r\n        this.mainWindow.on('closed', () => {\r\n            this.mainWindow = null;\r\n        });\r\n    }\r\n}\r\nconst myapp = new MyApplication();\r\n```",
    "pub_date": "2016-12-18T09:49:44.228Z",
    "user": 2,
    "tags": [
      1,
      47,
      56
    ]
  }
},
{
  "model": "app.memo",
  "pk": 131,
  "fields": {
    "title": "NEW GAME!",
    "content": "![image](http://img.gifmagazine.net/gifmagazine/images/974202/original.gif?1477770671)\r\n\r\n![image](http://img.gifmagazine.net/gifmagazine/images/974092/original.gif?1477758607)",
    "pub_date": "2017-01-08T15:26:11.379Z",
    "user": 2,
    "tags": [
      41
    ]
  }
},
{
  "model": "app.memo",
  "pk": 132,
  "fields": {
    "title": "Excelを別ウィンドウで開く方法",
    "content": "# エクスプローラーの「送る」で対応\r\n\r\n1. EXCEL.EXEの場所を調べる\r\n1. 「Shell:SendTo」と入力して「送る」フォルダを表示する\r\n1. EXCEL.EXEのショートカットを「送る」に作成する\r\n1. Excelを開くときに上記の送るで開くと別ウィンドウで立ち上がる\r\n\r\n※Excel 2013／2016では標準で別ウィンドウで表示される．\r\n\r\n![image](https://cdn-img.easyicon.net/png/11211/1121167.gif)",
    "pub_date": "2017-01-16T01:40:29.107Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 133,
  "fields": {
    "title": "各種proxyの設定",
    "content": "# Linux（Debian）\r\n\r\nネットワークの設定画面から設定\r\n\r\n# 環境変数\r\n\r\n```shell\r\n$ export http_proxy=http://proxy.example.com:8080\r\n$ export https_proxy=https://proxy.example.com:8080\r\n$ export ftp_proxy=ftp://proxy.example.com:8080\r\n```\r\n\r\n# Git\r\n\r\n```shell\r\n$ git config --global http.proxy http://proxy.example.com:8080\r\n$ git config --global https.proxy https://proxy.example.com:8080\r\n```\r\n\r\n# Emacs\r\n\r\n~/.emacs.d/init.el\r\n\r\n```\r\n;; proxy\r\n(setq url-proxy-services\r\n      '((\"http\" . \"proxy.example.com:8080\")\r\n        (\"https\" . \"proxy.example.com:8080\")))\r\n(setq url-http-proxy-basic-auth-storage\r\n      '((\"proxy.example.com:8080\" (\"Proxy\" . \"base64string\"))))\r\n```\r\n\r\n# subversion\r\n\r\n~/.subversion/servers\r\n\r\n```\r\n[global]\r\nhttp-proxy-host = proxy.example.com\r\nhttp-proxy-port = 8080\r\n```\r\n\r\n# apt-get\r\n\r\n/etc/apt/apt.conf\r\n\r\n```\r\nAcquire::ftp::proxy \"ftp://proxy.example.com:8080\";\r\nAcquire::http::proxy \"http://proxy.example.com:8080\";\r\nAcquire::https::proxy \"https://proxy.example.com:8080\";\r\n```\r\n\r\n# wget\r\n\r\n~/.wgetrc\r\n\r\n```\r\nhttps_proxy = https://proxy.example.com:8080/\r\nhttp_proxy = http://proxy.example.com:8080/\r\nftp_proxy = ftp://proxy.example.com:8080/\r\n```\r\n\r\n# curl\r\n\r\n~/.curlrc\r\n\r\n```\r\nproxy = \"http://proxy.example.com:8080/\"\r\n```\r\n\r\n# pyenv\r\n\r\nproxyの設定に加えてpipの証明書エラーを回避するために2つの追加の環境変数を設定が必要\r\n\r\n```shell\r\n$ export PIP_INDEX_URL=\"https://pypi.python.org/simple/\"\r\n$ export PIP_TRUSTED_HOST=\"pypi.python.org\"\r\n```\r\n\r\n# docker\r\n\r\n/etc/systemd/system/docker.service.d/http-proxy.conf\r\n\r\n```shell\r\n$ sudo mkdir -p /etc/systemd/system/docker.service.d\r\n$ sudo touch /etc/systemd/system/docker.service.d/http-proxy.conf\r\n```\r\n```\r\n[Service]\r\nEnvironment=\"HTTP_PROXY=http://proxy.example.com:8080/\"\r\n```",
    "pub_date": "2017-01-26T09:12:41.798Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 134,
  "fields": {
    "title": "VSCodeのRunner設定（Windows）",
    "content": "# User Settings\r\n\r\n```\r\n// Specify language name as key, specify execuable as value\r\n\"runner.languageMap\": {\r\n    \"c\": \"C:/VisualCodeRunner/crun.bat\",\r\n    \"cpp\": \"C:/VisualCodeRunner/cpprun.bat\"\r\n},\r\n```\r\n\r\n# C言語用bat（crun.bat）\r\n\r\n```\r\n@echo off\r\n \r\nREM --------------------------------------------\r\nREM 引数が必要\r\nREM 引数が相対パスでもフルパスに変換\r\nREM %~d1 - %1 をドライブ文字だけに展開\r\nREM %~p1 - %1 をパスだけに展開\r\nREM %~n1 - %1 をファイル名だけに展開\r\nREM %~x1 - %1 をファイル拡張子だけに展開\r\nREM --------------------------------------------\r\nif \"%~dpnx1\" equ \"\" goto :eof\r\n \r\nREM --------------------------------------------\r\nREM 環境変数のローカル化開始\r\nREM --------------------------------------------\r\nsetlocal\r\n \r\nREM --------------------------------------------\r\nREM 一時的に使うexeのファイル名を作る\r\nREM --------------------------------------------\r\nREM 日付と時間を使う、dateの前4桁（YYYY）を削除、timeの:を削除\r\nset tempfile=%date:~4%%time::=%\r\nREM / を削除\r\nset tempfile=%tempfile:/=%\r\nREM . を削除\r\nset tempfile=%tempfile:.=%\r\nREM 空白を削除\r\nset tempfile=%tempfile: =%\r\n \r\n \r\nREM --------------------------------------------\r\nREM コンパイル実行（gcc）\r\nREM --------------------------------------------\r\ngcc -o %tempfile%.exe \"%~dpnx1\"\r\n \r\nREM --------------------------------------------\r\nREM EXEファイル実行\r\nREM --------------------------------------------\r\n%tempfile%.exe\r\n \r\n \r\nREM --------------------------------------------\r\nREM EXEファイル削除\r\nREM --------------------------------------------\r\ndel %tempfile%.exe\r\n \r\nREM --------------------------------------------\r\nREM 環境変数のローカル化終了\r\nREM --------------------------------------------\r\nendlocal\r\n```\r\n\r\n# C++用bat（cpprun.bat）\r\n\r\n```\r\n@echo off\r\n \r\nREM --------------------------------------------\r\nREM 引数が必要\r\nREM 引数が相対パスでもフルパスに変換\r\nREM %~d1 - %1 をドライブ文字だけに展開\r\nREM %~p1 - %1 をパスだけに展開\r\nREM %~n1 - %1 をファイル名だけに展開\r\nREM %~x1 - %1 をファイル拡張子だけに展開\r\nREM --------------------------------------------\r\nif \"%~dpnx1\" equ \"\" goto :eof\r\n \r\nREM --------------------------------------------\r\nREM 環境変数のローカル化開始\r\nREM --------------------------------------------\r\nsetlocal\r\n \r\nREM --------------------------------------------\r\nREM 一時的に使うexeのファイル名を作る\r\nREM --------------------------------------------\r\nREM 日付と時間を使う、dateの前4桁（YYYY）を削除、timeの:を削除\r\nset tempfile=%date:~4%%time::=%\r\nREM / を削除\r\nset tempfile=%tempfile:/=%\r\nREM . を削除\r\nset tempfile=%tempfile:.=%\r\nREM 空白を削除\r\nset tempfile=%tempfile: =%\r\n \r\n \r\nREM --------------------------------------------\r\nREM コンパイル実行（gcc）\r\nREM --------------------------------------------\r\ng++ -std=c++11 -o %tempfile%.exe \"%~dpnx1\"\r\n \r\nREM --------------------------------------------\r\nREM EXEファイル実行\r\nREM --------------------------------------------\r\n%tempfile%.exe\r\n \r\n \r\nREM --------------------------------------------\r\nREM EXEファイル削除\r\nREM --------------------------------------------\r\ndel %tempfile%.exe\r\n \r\nREM --------------------------------------------\r\nREM 環境変数のローカル化終了\r\nREM --------------------------------------------\r\nendlocal\r\n```",
    "pub_date": "2017-01-29T10:28:51.983Z",
    "user": 2,
    "tags": [
      1,
      37,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 135,
  "fields": {
    "title": "キータイプ矯正ソフト",
    "content": "# こころぴょんぴょん待ち？\r\n\r\n[https://github.com/sgymtic/sl.git](https://github.com/sgymtic/sl.git)\r\n\r\n![image](http://game.matomame.jp/assets/images/matome/7e7194d92cd92263ca9a/853f6f68646cdc9fcfe94aff187c16e8.jpg)",
    "pub_date": "2017-01-31T13:51:34.922Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 136,
  "fields": {
    "title": "VSCodeのRunner設定（Linux）",
    "content": "# User Settings\r\n\r\n```\r\n// Specify language name as key, specify execuable as value\r\n\"runner.languageMap\": {\r\n    \"c\": \"~/vscrunner/crun_gcc.sh\",\r\n    \"cpp\": \"~/vscrunner/cpprun_gcc.sh\"\r\n},\r\n```\r\n\r\n# C言語用スクリプト（crun_gcc.sh）\r\n\r\n```\r\n#!/bin/sh\r\n\r\nif [ -z \"$1\" ]\r\nthen\r\n    echo \"need argument\"\r\n    exit\r\nfi\r\n\r\n#-------------------------------\r\n# 一時的に使う実行ファイル名を作る\r\n#-------------------------------\r\ntempfile=`date '+%m%d%H%M%S'`\r\n\r\n#-------------------------------\r\n# コンパイル実行\r\n#-------------------------------\r\ngcc -o $tempfile $1\r\n\r\n#-------------------------------\r\n# 実行\r\n#-------------------------------\r\n./$tempfile\r\n\r\n#-------------------------------\r\n# 実行ファイル削除\r\n#-------------------------------\r\nrm $tempfile\r\n```\r\n\r\n# C++用スクリプト（cpprun_gcc.sh）\r\n\r\n```\r\n#!/bin/sh\r\n\r\nif [ -z \"$1\" ]\r\nthen\r\n    echo \"need argument\"\r\n    exit\r\nfi\r\n\r\n#-------------------------------\r\n# 一時的に使う実行ファイル名を作る\r\n#-------------------------------\r\ntempfile=`date '+%m%d%H%M%S'`\r\n\r\n#-------------------------------\r\n# コンパイル実行\r\n#-------------------------------\r\ng++ -std=c++11 -o $tempfile $1\r\n\r\n#-------------------------------\r\n# 実行\r\n#-------------------------------\r\n./$tempfile\r\n\r\n#-------------------------------\r\n# 実行ファイル削除\r\n#-------------------------------\r\nrm $tempfile\r\n```",
    "pub_date": "2017-02-01T00:20:10.211Z",
    "user": 2,
    "tags": [
      1,
      52,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 137,
  "fields": {
    "title": "Qt5アプリのコンパイル",
    "content": "# Qtのインストール\r\n\r\n```shell\r\n$ sudo aptitude install qt5-default\r\n```\r\n\r\n# サンプルコード\r\n\r\n```cpp\r\n#include <QApplication>\r\n#include <QHBoxLayout>\r\n#include <QSlider>\r\n#include <QSpinBox>\r\n#include <stdio.h>\r\n\r\nstatic void prtage(int age)\r\n{\r\n    printf(\"Age = %d\\n\", age);\r\n}\r\n\r\nint main(int argc, char **argv)\r\n{\r\n    QApplication app(argc, argv);\r\n    QWidget window;\r\n    window.setWindowTitle(\"Enter Your Age\");\r\n\r\n    QSpinBox spinBox;\r\n    QSlider slider(Qt::Horizontal);\r\n    spinBox.setRange(0, 130);\r\n    slider.setRange(0, 130);\r\n\r\n    QObject::connect(&spinBox, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), &slider, &QSlider::setValue);\r\n    QObject::connect(&slider, &QSlider::valueChanged, &spinBox, &QSpinBox::setValue);\r\n    QObject::connect(&slider, &QSlider::valueChanged, &prtage);\r\n\r\n    spinBox.setValue(35);\r\n\r\n    QHBoxLayout layout;\r\n    layout.addWidget(&spinBox);\r\n    layout.addWidget(&slider);\r\n    window.setLayout(&layout);\r\n    window.show();\r\n    return app.exec();\r\n}\r\n```\r\n\r\n# ビルド\r\n\r\n```\r\n$ qmake -project -o qtsample.pro\r\n$ echo \"QT += widgets\" >> qtsample.pro\r\n$ qmake\r\n$ make\r\n```",
    "pub_date": "2017-02-04T12:02:22.523Z",
    "user": 2,
    "tags": [
      1,
      16,
      52,
      57
    ]
  }
},
{
  "model": "app.memo",
  "pk": 138,
  "fields": {
    "title": "Visual Studio C/C++でメモリリーク検出",
    "content": "# 調査用サンプルコード\r\n\r\n`crtdbg.h`のincludeと`_CrtSetDbgFlag`を先頭で呼び出し\r\n\r\n```cpp\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <crtdbg.h>\r\n#define malloc(X) _malloc_dbg(X, _NORMAL_BLOCK, __FILE__, __LINE__)\r\n#define new ::new(_NORMAL_BLOCK, __FILE__, __LINE__)\r\n\r\nint main()\r\n{\r\n    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_DELAY_FREE_MEM_DF | _CRTDBG_CHECK_ALWAYS_DF | _CRTDBG_LEAK_CHECK_DF);\r\n\r\n    int* hoge = reinterpret_cast<int*>(malloc(sizeof(int) * 16));\r\n    //free(hoge);\r\n\r\n    int* piyo = new int[32];\r\n    //delete[] piyo;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n# 出力結果\r\n```\r\nDetected memory leaks!\r\nDumping objects ->\r\nc:\\users\\tsutsu\\desktop\\sample\\sample\\sample.cpp(14) : {70} normal block at 0x00E7E238, 128 bytes long.\r\n Data: <                > CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD \r\nc:\\users\\tsutsu\\desktop\\sample\\sample\\sample.cpp(11) : {69} normal block at 0x00E74EE8, 64 bytes long.\r\n Data: <                > CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD \r\nObject dump complete.\r\n```",
    "pub_date": "2017-02-05T04:51:11.175Z",
    "user": 2,
    "tags": [
      1,
      8,
      16,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 139,
  "fields": {
    "title": "valgrindでC/C++のメモリリーク検出",
    "content": "# 調査用サンプルコード\r\n\r\n```cpp\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int* hoge = reinterpret_cast<int*>(malloc(sizeof(int) * 16));\r\n    // free(hoge);\r\n\r\n    int* piyo = new int[32];\r\n    // delete[] piyo;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n# インストール\r\n\r\n```\r\n$ sudo aptitude valgrind\r\n```\r\n\r\n# 実行\r\n\r\n```\r\n$ valgrind --leak-check=full ./sample\r\n```\r\n\r\n# 出力結果\r\n\r\n```\r\n==7234== HEAP SUMMARY:\r\n==7234==     in use at exit: 192 bytes in 2 blocks\r\n==7234==   total heap usage: 2 allocs, 0 frees, 192 bytes allocated\r\n==7234==\r\n==7234== 64 bytes in 1 blocks are definitely lost in loss record 1 of 2\r\n==7234==    at 0x4C28C20: malloc (vg_replace_malloc.c:296)\r\n==7234==    by 0x40081A: main (sample.cpp:6)\r\n==7234==\r\n==7234== 128 bytes in 1 blocks are definitely lost in loss record 2 of 2\r\n==7234==    at 0x4C298A0: operator new[](unsigned long) (vg_replace_malloc.c:389)\r\n==7234==    by 0x400828: main (sample.cpp:9)\r\n==7234==\r\n==7234== LEAK SUMMARY:\r\n==7234==    definitely lost: 192 bytes in 2 blocks\r\n==7234==    indirectly lost: 0 bytes in 0 blocks\r\n==7234==      possibly lost: 0 bytes in 0 blocks\r\n==7234==    still reachable: 0 bytes in 0 blocks\r\n==7234==         suppressed: 0 bytes in 0 blocks\r\n==7234==\r\n==7234== For counts of detected and suppressed errors, rerun with: -v\r\n==7234== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\r\n```",
    "pub_date": "2017-02-05T08:04:13.558Z",
    "user": 2,
    "tags": [
      1,
      8,
      16,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 140,
  "fields": {
    "title": "C++11のスマートポインタ",
    "content": "# std::unique_ptr\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <memory>\r\n\r\nclass MyClass\r\n{\r\nprivate:\r\n    int val_;\r\npublic:\r\n    MyClass() : val_(42) {}\r\n    void Print() { std::cout << this->val_ << std::endl; }\r\n};\r\n\r\nint main()\r\n{\r\n    // コンストラクタの引数として，動的確保したメモリのアドレスを指定\r\n    std::unique_ptr<MyClass> ptr(new MyClass());\r\n    ptr->Print();\r\n\r\n    // reset関数を使って，後から代入することもできる\r\n    std::unique_ptr<MyClass> ptr2;\r\n    ptr2.reset(new MyClass());\r\n\r\n    // C++14以降であれば，make_unique関数を使うこともできる\r\n    std::unique_ptr<MyClass> ptr3 = std::make_unique<MyClass>();\r\n\r\n    // ptr3の所有権がptr4に移動する\r\n    std::unique_ptr<MyClass> ptr4(std::move(ptr3));\r\n    if (!ptr3)\r\n    {\r\n        std::cout << \"prt3 NG\" << std::endl;\r\n    }\r\n    if (ptr4)\r\n    {\r\n        std::cout << \"prt4 OK\" << std::endl;\r\n    }\r\n\r\n    // 生ポインタの取得（所有権はそのまま）\r\n    auto p = ptr4.get();\r\n    p->Print();\r\n    // 生ポインタの取得（所有権を破棄）\r\n    auto p2 = ptr4.release();\r\n    p2->Print();\r\n\r\n    // reset関数を使って，ptr3で管理\r\n    ptr3.reset(p2);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n# std::shared_ptr\r\n\r\n```\r\n#include <iostream>\r\n#include <memory>\r\n\r\nclass MyClass\r\n{\r\nprivate:\r\n    int val_;\r\npublic:\r\n    MyClass() : val_(42) {}\r\n    void Print() { std::cout << this->val_ << std::endl; }\r\n};\r\n\r\nint main()\r\n{\r\n    // コンストラクタや，reset関数を使ってのメモリ割り当てが可能\r\n    std::shared_ptr<MyClass> ptr(new MyClass());\r\n    std::shared_ptr<MyClass> ptr2;\r\n    ptr2.reset(new MyClass());\r\n\r\n    // make_shared関数を使うと，効率よくメモリを確保できる（C++11から使える）\r\n    auto ptr3 = std::make_shared<MyClass>();\r\n\r\n    auto ptr4 = ptr3;\r\n    ptr4->Print();\r\n\r\n    // あとはstd::unique_ptrと同じような感じ\r\n\r\n    return 0;\r\n}\r\n```",
    "pub_date": "2017-02-05T10:54:59.568Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 141,
  "fields": {
    "title": "VSCodeのExtension一覧",
    "content": "# Extension一覧\r\n\r\n* Ayu\r\n* Bash beautify\r\n* Beautify css/sass/scss/less\r\n* Better TOML\r\n* Bookmarks\r\n* C/C++\r\n* C#\r\n* CMake Tools\r\n* Code Runner\r\n* CodeLLDB\r\n* Docker\r\n* EditorConfig for VS Code\r\n* Find Then Jump\r\n* Flake8\r\n* Git Graph\r\n* gitignore\r\n* GitLens\r\n* GlassIt-VSC\r\n* Go\r\n* isort\r\n* Japanese Language Pack for Visual Studio Code\r\n* Marp for VS Code\r\n* Path Intellisense\r\n* PlantUML\r\n* Python\r\n* Qt for Python\r\n* Rainbow CSV\r\n* Remote Development\r\n* rust-analyzer\r\n* SSH FS\r\n* Table Formatter\r\n* Vetur\r\n* Vscode Google Translate\r\n\r\n```shell\r\n$ code --list-extensions\r\nalefragnani.Bookmarks\r\nbungcip.better-toml\r\nchristian-kohler.path-intellisense\r\ncodezombiech.gitignore\r\neamodio.gitlens\r\nEditorConfig.EditorConfig\r\nformulahendry.code-runner\r\nfunkyremi.vscode-google-translate\r\ngolang.go\r\njebbs.plantuml\r\nKelvin.vscode-sshfs\r\nmarp-team.marp-vscode\r\nmechatroner.rainbow-csv\r\nmhutchie.git-graph\r\nmichelemelluso.code-beautifier\r\nms-azuretools.vscode-docker\r\nMS-CEINTL.vscode-language-pack-ja\r\nms-dotnettools.csharp\r\nms-python.flake8\r\nms-python.isort\r\nms-python.python\r\nms-vscode-remote.vscode-remote-extensionpack\r\nms-vscode.cmake-tools\r\nms-vscode.cpptools\r\noctref.vetur\r\nrust-lang.rust-analyzer\r\ns-nlf-fh.glassit\r\nseanwu.vscode-qt-for-python\r\nshakram02.bash-beautify\r\nshuworks.vscode-table-formatter\r\nteabyii.ayu\r\ntranhl.find-then-jump\r\nvadimcn.vscode-lldb\r\n```\r\n\r\n![image](https://www.depthbomb.net/wp-content/uploads/2020/09/vscode.png)",
    "pub_date": "2017-02-08T16:18:28.917Z",
    "user": 2,
    "tags": [
      1,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 142,
  "fields": {
    "title": "CMakeLists.txt（ライブラリの追加）",
    "content": "# OpenGl ESのサンプルをビルドしたときのCMakeLists.txt\r\n\r\n```\r\ncmake_minimum_required(VERSION 2.8)\r\nadd_definitions(\"-Wall -std=c++11\")\r\nset(CMAKE_BUILD_TYPE Debug)\r\nadd_executable(eglsample\r\n    eglsample.cpp\r\n    myegl.cpp\r\n    mygles.cpp\r\n)\r\nfind_package(X11 REQUIRED)\r\nfind_library(EGL_LIBRARY NAMES EGL)\r\nfind_library(GLES2_LIBRARY NAMES GLESv2)\r\ntarget_link_libraries(eglsample\r\n    ${X11_LIBRARIES}\r\n    ${EGL_LIBRARY}\r\n    ${GLES2_LIBRARY}\r\n)\r\n```\r\n\r\ntarget_link_librariesでライブラリを指定する．使用可能なパッケージは`find_package`を使う．パッケージにないライブラリは`find_library`を使う．\r\n\r\n# 使用可能なパッケージの一覧\r\n\r\n```\r\n$ cmake --help-module-list | grep -e '^Find'\r\n```\r\n\r\n# モジュールの詳細\r\n\r\n```\r\n$ cmake --help-module FindX11\r\n```",
    "pub_date": "2017-02-10T04:03:34.364Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 143,
  "fields": {
    "title": "Elixirの環境構築",
    "content": "# Erlangのインストール\r\n\r\n[https://packages.erlang-solutions.com/erlang/](https://packages.erlang-solutions.com/erlang/)\r\n\r\n```\r\n$ sudo aptitude install libwxbase3.0-0\r\n$ sudo aptitude install libwxgtk3.0-0\r\n$ sudo dpkg -i esl-erlang_19.3-1-debian-jessie_amd64.deb\r\n```\r\n\r\n# Elixirのインストール\r\n\r\n```\r\n$ git clone https://github.com/mururu/exenv.git $HOME/.exenv\r\n\r\n$ exec $SHELL -l\r\n$ git clone https://github.com/mururu/elixir-build.git ~/.exenv/plugins/elixir-build\r\n$ echo 'export PATH=\"$HOME/.exenv/bin:$PATH\"' >> ~/.bash_profile\r\n$ echo 'eval \"$(exenv init -)\"' >> ~/.bash_profile\r\n$ exec $SHELL -l\r\n\r\n$ exenv install -list\r\n$ exenv install 1.4.4\r\n$ exenv global 1.4.4\r\n```\r\n\r\n# 確認\r\n\r\n```\r\n$ elixir -v\r\n$ iex\r\n```",
    "pub_date": "2017-02-11T05:16:19.528Z",
    "user": 2,
    "tags": [
      1,
      58
    ]
  }
},
{
  "model": "app.memo",
  "pk": 144,
  "fields": {
    "title": "C++のキャスト",
    "content": "# C++の新しいキャスト演算子\r\n\r\n```cpp\r\nint hgoe = static_cast<int>(piyo);               // 一般的なキャスト\r\nint* hoge = const_cast<int*>(piyo);              // constを除去するキャスト\r\nint* hoge = reinterpret_cast<int*>(piyo);        // 内容無視の強制キャスト\r\nMyClass* hoge = dynamic_cast<MyClass*>(piyo);    // 実行時に判断するダウンキャスト\r\n```\r\n\r\n`reinterpret_cast`をいつも忘れてしまう．",
    "pub_date": "2017-02-19T09:14:14.430Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 145,
  "fields": {
    "title": "Google Testの使い方",
    "content": "# Google Testのインストール\r\n\r\n```\r\n$ git clone https://github.com/google/googletest.git\r\n$ cd googletest\r\n$ git checkout release-1.8.0\r\n$ cd googletest\r\n$ mkdir build && cd build\r\n$ cmake ..\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n## Windows（MinGW64 + msys）でビルドする場合\r\n\r\n※pthread関連でコンパイルエラーとなったので無効化する．\r\n\r\n```\r\n> cmake -G \"MSYS Makefiles\" ..\r\n> make CXX_FLAGS=\"-DGTEST_HAS_PTHREAD=0\"\r\n```\r\n\r\n# テストのビルド\r\n\r\nWindowsの場合はgtestのincludeパスやlibパスは下記のように設定．\r\n\r\n```\r\n> g++ test.cpp test_target.cpp -I../googletest/googletest/include -I../target -L../googletest/googletest/build -lgtest_main -lgtest -o test\r\n```",
    "pub_date": "2017-02-19T09:46:13.410Z",
    "user": 2,
    "tags": [
      1,
      16,
      37,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 146,
  "fields": {
    "title": "バッチファイルで長い1行の処理を改行",
    "content": "# C言語のマクロでの「\\」みたいなこと\r\n\r\n改行を入れて複数の行に分けるには`^`を最後に付ける．\r\n\r\n## 1行の場合\r\n\r\n```\r\ncall g++ %test_file% %target_file% -I..\\googletest\\googletest\\include -I..\\target -L..\\googletest\\googletest\\build -lgtest_main -lgtest -otest.exe\r\n```\r\n\r\n## 複数行の場合\r\n\r\n```\r\ncall g++ %test_file% %target_file% ^\r\n-I..\\googletest\\googletest\\include ^\r\n-I..\\target ^\r\n-L..\\googletest\\googletest\\build ^\r\n-lgtest_main ^\r\n-lgtest ^\r\n-otest.exe\r\n```",
    "pub_date": "2017-02-20T14:52:19.006Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 147,
  "fields": {
    "title": "CMakeでpkg-configを使う",
    "content": "# CMakeでpkg-configを使って共有ライブラリまわりを記述\r\n\r\n```\r\nfind_package(PkgConfig)\r\n\r\npkg_check_modules(LIBSAMPLE REQUIRED libsample)\r\n\r\ninclude_directories(${LIBSAMPLE_INCLUDE_DIRS})\r\nlink_directories(${LIBSAMPLE_LIBRARY_DIRS})\r\n\r\nadd_executable(sample sample.cpp)\r\ntarget_link_libraries(sample ${LIBSAMPLE_LIBRARIES})\r\n```\r\n\r\n# pkg-configでパッケージを一覧表示\r\n\r\n```\r\n$ pkg-config --list-all\r\n```",
    "pub_date": "2017-02-21T01:33:41.963Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 148,
  "fields": {
    "title": "Linuxのファイル圧縮 / 解凍",
    "content": "# まとめ\r\n圧縮 / 解凍\r\n```\r\n$ tar cavf xxxx.tar.gz directory\r\n$ tar xvf xxxx.tar.gz\r\n```\r\n\r\n# tar.gz\r\n圧縮 / 解凍\r\n```\r\n$ tar -zcvf xxxx.tar.gz directory\r\n$ tar -zxvf xxxx.tar.gz\r\n```\r\n\r\n# tar.bz2\r\n圧縮 / 解凍\r\n```\r\n$ tar -jcvf xxxx.tar.bz2 directory\r\n$ tar -jxvf xxxx.tar.bz2\r\n```\r\n\r\n# tar.xz\r\n圧縮 / 解凍\r\n```\r\n$ tar -Jcvf xxxx.tar.xz directory\r\n$ tar -Jxvf xxxx.tar.xz\r\n```\r\n\r\n# tar\r\n圧縮 / 解凍\r\n```\r\n$ tar -cvf xxxx.tar directory\r\n$ tar -xvf xxxx.tar\r\n```\r\n\r\n# zip\r\n圧縮 / 解凍\r\n```\r\n$ zip -r xxxx.zip directory\r\n$ unzip xxxx.zip\r\n```",
    "pub_date": "2017-02-25T14:55:55.167Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 149,
  "fields": {
    "title": "Gitのパッチファイルの作成と適用",
    "content": "# パッチの作成\r\n\r\n```\r\n$ git format-patch -o patches fec09ab        # fec09ab からの HEAD までのコミット\r\n$ git format-patch -o patches fec09ab..      # 同上\r\n$ git format-patch -o patches fec09ab..HEAD  # 同上\r\n```\r\n\r\n# パッチの適用\r\n\r\n```\r\n$ git am patches/*\r\n```\r\n\r\n# エラーが出た時の取り消し\r\n\r\n```\r\n$ git am --abort\r\n```",
    "pub_date": "2017-02-26T16:09:45.752Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 150,
  "fields": {
    "title": "OneDriveのチェックアイコン",
    "content": "# アイコンオーバーレイの設定\r\n\r\nWindowsのアイコンオーバーレイは『15』が上限らしい．下記のレジストリを確認 / 修正．\r\n\r\n```\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers\r\n```\r\n\r\n※ 並び順に優先されるようなので，優先させたいキーの名前の先頭にスペースを入れると次回起動時にソートされて優先される．",
    "pub_date": "2017-02-27T00:42:57.354Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 151,
  "fields": {
    "title": "コメントのフォーマット",
    "content": "# コメントのフォーマットの意味\r\n\r\n* XXX: その部分のコードが正しくないが多くの場合動いてしまう\r\n* FIXME: コードが間違っていて修正を要する\r\n* TODO: 将来強化すべき箇所の表示",
    "pub_date": "2017-03-03T03:58:54.731Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 152,
  "fields": {
    "title": "C++11の生文字リテラル",
    "content": "# 基本的な使い方\r\n\r\n`R`プレフィックスを付けた文字列リテラル内で丸カッコ( )で囲む．\r\n\r\n```cpp\r\n// 通常\r\nstd::string json = \"{\\\"user_id\\\": 123, \\\"name\\\": \\\"Alice\\\"}\";\r\n// 生文字リテラル\r\nstd::string json = R\"({\"user_id\": 123, \"name\": \"Alice\"})\";\r\n```\r\n\r\n# 改行もOK\r\n\r\n```cpp\r\nstd::string text = R\"(begin\r\na,\r\nb,\r\nc\r\nend)\";\r\n```\r\n\r\n# 範囲を指定する丸カッコ( )をユーザ指定形式に\r\n\r\n文字の中に丸カッコ( )が使える．\r\n\r\n```cpp\r\nstd::string text = R\"***\"(文字列中に生文字列リテラルの閉じカッコと閉じダブルクォーテーションを書く)\")***\";\r\n```",
    "pub_date": "2017-03-03T04:07:51.323Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 153,
  "fields": {
    "title": "C++のコンストラクタ",
    "content": "# C++の各種コンストラクタ\r\n\r\n```cpp\r\nclass X\r\n{\r\npublic:\r\n    X() {}\r\n    ~X() = default;\r\n\r\nprivate:\r\n    X(const X&) = delete;\r\n    X(X&&) = delete;\r\n    X& operator=(const X&) = delete;\r\n    X& operator=(X&&) = delete;\r\n};\r\n```",
    "pub_date": "2017-03-03T09:37:06.599Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 154,
  "fields": {
    "title": "Pythonのデコレータでfunctools.wraps()を使う理由",
    "content": "# 使わなかった場合\r\n\r\n```py\r\ndef my_decorator(f):\r\n    def wrapper(*args, **kwds):\r\n        print('deco!!')\r\n        return f(*args, **kwds)\r\n    return wrapper\r\n\r\n@my_decorator\r\ndef spam():\r\n    '''spam doc.'''\r\n    print('spam!!')\r\n\r\nif __name__ == '__main__':\r\n    spam()\r\n    print(spam.__name__)\r\n    print(spam.__doc__)\r\n```\r\n\r\n結果，spamの情報が失われている．\r\n\r\n```\r\ndeco!!\r\nspam!!\r\nwrapper\r\nNone\r\n```\r\n\r\n# functools.wraps()を使った場合\r\n\r\n```py\r\ndef my_decorator(f):\r\n    import functools\r\n    @functools.wraps(f)\r\n    def wrapper(*args, **kwds):\r\n        print('deco!!')\r\n        return f(*args, **kwds)\r\n    return wrapper\r\n\r\n@my_decorator\r\ndef spam():\r\n    '''spam doc.'''\r\n    print('spam!!')\r\n\r\nif __name__ == '__main__':\r\n    spam()\r\n    print(spam.__name__)\r\n    print(spam.__doc__)\r\n```\r\n\r\n結果，期待通りに動く．\r\n\r\n```\r\ndeco!!\r\nspam!!\r\nspam\r\nspam doc.\r\n```\r\n\r\n実際的には，`help()`とか`doctest`とかで問題にりそう．",
    "pub_date": "2017-03-05T00:47:10.075Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 155,
  "fields": {
    "title": "Pythonのdoctestの使い方",
    "content": "# docstringにテストケースを書いて実行\r\n\r\n対話環境で実行したときのフォーマットでテストケースを記述する．\r\n\r\n```py\r\ndef fizz_buzz(n):\r\n    '''\r\n    FizzBuzzです\r\n\r\n    >>> from spam import fizz_buzz\r\n    >>> fizz_buzz(1)\r\n    1\r\n    >>> fizz_buzz(3)\r\n    Fizz\r\n    >>> fizz_buzz(5)\r\n    Buzz\r\n    >>> fizz_buzz(15)\r\n    FizzBuzz\r\n    '''\r\n\r\n    if n % 3 == 0 and n % 5 == 0:\r\n        print('FizzBuzz')\r\n    elif n % 3 == 0:\r\n        print('Fizz')\r\n    elif n % 5 == 0:\r\n        print('Buzz')\r\n    else:\r\n        print(n)\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n```\r\n\r\n実行しすると問題ない場合は何も出力されない．Failがあると以下のように出力．\r\n\r\n```\r\n**********************************************************************\r\nFile \"spam.py\", line 8, in __main__.fizz_buzz\r\nFailed example:\r\n    fizz_buzz(3)\r\nExpected:\r\n    Fizz\r\nGot:\r\n    Fiz\r\n**********************************************************************\r\n1 items had failures:\r\n   1 of   5 in __main__.fizz_buzz\r\n***Test Failed*** 1 failures.\r\n```\r\n\r\nPassしていても出力する場合は`-v`オプションで実行．\r\n\r\n```\r\n> python spam.py -v\r\n```\r\n\r\n出力内容\r\n\r\n```\r\nTrying:\r\n    from spam import fizz_buzz\r\nExpecting nothing\r\nok\r\nTrying:\r\n    fizz_buzz(1)\r\nExpecting:\r\n    1\r\nok\r\nTrying:\r\n    fizz_buzz(3)\r\nExpecting:\r\n    Fizz\r\nok\r\nTrying:\r\n    fizz_buzz(5)\r\nExpecting:\r\n    Buzz\r\nok\r\nTrying:\r\n    fizz_buzz(15)\r\nExpecting:\r\n    FizzBuzz\r\nok\r\n1 items had no tests:\r\n    __main__\r\n1 items passed all tests:\r\n   5 tests in __main__.fizz_buzz\r\n5 tests in 2 items.\r\n5 passed and 0 failed.\r\nTest passed.\r\n```",
    "pub_date": "2017-03-05T01:07:08.868Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 156,
  "fields": {
    "title": "ログの表示を消す方法",
    "content": "# ログの表示を消す方法\r\n\r\n```\r\n$ ./sample > /dev/null 2>&1\r\n```\r\n`2>&1`でエラー出力を標準出力にリダイレクトしている．これでエラーログも表示されなくなる．（右側に書くのがポイント）",
    "pub_date": "2017-03-06T09:07:19.386Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 157,
  "fields": {
    "title": "Pythonのプロパティ",
    "content": "# デコレータを使用した一般的な書き方\r\n\r\n`@property`でgetterを作って，追加でsetterとdeleterを定義できる．\r\n\r\n```py\r\nclass Spam:\r\n    def __init__(self, x):\r\n        self.__x = x\r\n\r\n    @property\r\n    def x(self):\r\n        return self.__x\r\n\r\n    @x.setter\r\n    def x(self, value):\r\n        self.__x = value\r\n\r\n    @x.deleter\r\n    def x(self):\r\n        del self.__x\r\n\r\ndef main():\r\n    spam = Spam(42)\r\n    print(spam.x)\r\n\r\n    spam.x = 23\r\n    print(spam.x)\r\n\r\n    del spam.x\r\n    print(spam.x)   # AttributeError: 'Spam' object has no attribute '_Spam__x'\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2017-03-11T08:09:57.308Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 158,
  "fields": {
    "title": "Pythonでメモ化",
    "content": "# デコレータlru_cacheによるメモ化再帰\r\n\r\nmaxsizeには直近の何回分を記憶しておくかを指定する\r\n\r\n```py\r\nfrom functools import lru_cache\r\n\r\n@lru_cache(maxsize = None)\r\ndef fibo(n):\r\n    if n <= 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return fibo(n - 1) + fibo(n - 2)\r\n\r\nif __name__== '__main__':\r\n    from datetime import datetime as dt\r\n    start = dt.now()\r\n    print('*** {0} : {1} ***'.format(fibo(35), dt.now() - start))\r\n```\r\n\r\n結果\r\n\r\n```\r\n*** 9227465 : 0:00:00 ***           # メモ化有効時\r\n*** 9227465 : 0:00:03.859904 ***    # メモ化無効時\r\n```\r\n\r\n※副作用のある関数を考慮せずにキャッシュするので注意",
    "pub_date": "2017-03-11T13:32:16.785Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 159,
  "fields": {
    "title": "MinGW (64bit) + MSYS 環境の構築",
    "content": "# MinGW-w64 - for 32 and 64 bit Windows\r\n\r\n[https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/](https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/)\r\n\r\n# MSYS\r\n\r\n[https://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/](https://sourceforge.net/projects/mingwbuilds/files/external-binary-packages/)\r\n\r\n# セットアップ\r\n\r\n1. MinGWを展開．`C:\\mingw64`\r\n1. MSYSを展開．`C:\\mingw64\\msys`\r\n1. `C:\\mingw64\\msys\\etc\\fstab.sample`を`fstab`の名前でコピー  して以下を修正．\r\n    * パスを修正．`c:/mingw64    /mingw`\r\n    * コメントアウト．`c:/ActiveState/perl    /perl`\r\n1. 環境変数pathを設定．\r\n`C:\\mingw64\\bin`と`C:\\mingw64\\msys\\bin`",
    "pub_date": "2017-03-18T18:53:40.065Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 160,
  "fields": {
    "title": "Linuxでシリアル通信",
    "content": "# screenのインストール\r\n\r\n```\r\n$ sudo aptitude install screen\r\n```\r\n\r\n# screenの使用方法\r\n\r\n* parenb/-parenb  \r\nパリティビットあり/なし\r\n* parodd/-parodd  \r\nパリティビットODD/EVEN\r\n* cs<数字>  \r\n文字サイズ\r\n* cstopb/-cstopb  \r\nストップビット2ビット/1ビット\r\n\r\n```\r\n$ screen /dev/ttyS1 115200,cs8,-parenb,-cstopb\r\n```",
    "pub_date": "2017-03-23T02:49:31.883Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 161,
  "fields": {
    "title": "GNOME 3のおすすめテーマ",
    "content": "# Arc Theme\r\n\r\n[https://github.com/horst3180/arc-theme](https://github.com/horst3180/arc-theme)\r\n\r\n![image](https://camo.githubusercontent.com/ec3edb8af6e682676cef3ae8f71da60f70a72819/687474703a2f2f692e696d6775722e636f6d2f4e43366471796c2e706e67)\r\n\r\n依存パッケージ`gtk2-engines-murrine`をあらかじめインストールしておく．\r\n\r\n```\r\n$ sudo aptitude install gtk2-engines-murrine\r\n$ sudo sudo dpkg -i arc-theme_1488477732.766ae1a-0_all.deb\r\n```",
    "pub_date": "2017-03-27T00:23:07.747Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 162,
  "fields": {
    "title": "settings.pyの定数を使用する方法",
    "content": "# settings.pyに定数を定義する\r\n\r\n```\r\nSPAM_TEXT = 'spam text'\r\n```\r\n\r\n# pythonの中で使用する\r\n\r\n```\r\nfrom django.conf import settings\r\nspam = settings.SPAM_TEXT\r\n```\r\n\r\n# settings.pyの定数をテンプレートで使用する\r\n\r\ncontext_processors.pyを作成\r\n\r\n```py\r\nfrom django.conf import settings\r\n\r\ndef enabled_social_auth(request):\r\n    return {'SPAM_TEXT': settings.SPAM_TEXT}\r\n```\r\n\r\nsettings.pyにcontext_processorsを記述\r\n\r\n```\r\nTEMPLATES = [\r\n    {\r\n        ：\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                ：\r\n                'mondja.context_processors.enabled_social_auth',\r\n                ：\r\n            ],\r\n        },\r\n    },\r\n]\r\n```\r\n\r\nテンプレート内で使用\r\n\r\n```\r\n{% if ENABLED_SOCIAL_AUTH %}\r\n    ：\r\n{% endif %}\r\n```",
    "pub_date": "2017-04-02T03:20:50.213Z",
    "user": 2,
    "tags": [
      1,
      2,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 163,
  "fields": {
    "title": "Deepコピーする拡張メソッド",
    "content": "# Deepコピーする拡張メソッド（ジェネリック）\r\n\r\nジェネリックスで拡張メソッドが書けるので、明示的に継承しなくても自動でMix-in的なことができる。\r\n\r\n```cs\r\nstatic class MyExtension\r\n{\r\n    public static Type DeepClone<Type>(this Type self)\r\n    {\r\n        using (var ms = new System.IO.MemoryStream())\r\n        {\r\n            var bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();\r\n            bf.Serialize(ms, self);\r\n            ms.Seek(0, System.IO.SeekOrigin.Begin);\r\n            return (Type)bf.Deserialize(ms);\r\n        }\r\n    }\r\n}\r\n```",
    "pub_date": "2017-05-25T07:01:08.559Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 164,
  "fields": {
    "title": "Djangoでセッションタイムアウト",
    "content": "`settings.py`で`SESSION_COOKIE_AGE`を指定するだけ．\r\n\r\n[https://docs.djangoproject.com/en/1.10/ref/settings/#std:setting-SESSION_COOKIE_AGE](https://docs.djangoproject.com/en/1.10/ref/settings/#std:setting-SESSION_COOKIE_AGE)\r\n\r\n```\r\nSESSION_COOKIE_AGE = 3600  # on hour in seconds\r\n```\r\n\r\nデフォルト値: 1209600 (2 週間の秒表記)",
    "pub_date": "2017-05-27T00:39:44.915Z",
    "user": 2,
    "tags": [
      1,
      2,
      48
    ]
  }
},
{
  "model": "app.memo",
  "pk": 165,
  "fields": {
    "title": "VSCodeでのC++のコンパイル方法",
    "content": "# tasks.jsonの設定内容\r\n\r\nプロジェクトルートに`build`ディレクトリを用意して，そこに`Makefile`を配置している場合．\r\n\r\n```\r\n{\r\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\r\n    // for the documentation about the tasks.json format\r\n    \"version\": \"0.1.0\",\r\n    \"command\": \"make\",\r\n    \"isShellCommand\": true,\r\n    \"args\": [\r\n        \"-C./build\",\r\n        \"-j4\"\r\n    ],\r\n    \"showOutput\": \"always\",\r\n    \"problemMatcher\": {\r\n        \"owner\": \"cpp\",\r\n        \"fileLocation\": [\r\n            \"absolute\"\r\n        ],\r\n        \"pattern\": {\r\n            \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\r\n            \"file\": 1,\r\n            \"line\": 2,\r\n            \"column\": 3,\r\n            \"severity\": 4,\r\n            \"message\": 5\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 複数のタスクを設定する場合\r\n\r\n`tasks`の中に`taskName`を指定して定義する．\r\n\r\n```\r\n{\r\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\r\n    // for the documentation about the tasks.json format\r\n    \"version\": \"0.1.0\",\r\n    \"tasks\": [\r\n        {\r\n            \"taskName\": \"build\",\r\n            \"command\": \"make\",\r\n            \"isShellCommand\": true,\r\n            \"args\": [\r\n                \"-C./build\",\r\n                \"-j4\"\r\n            ],\r\n            \"showOutput\": \"always\",\r\n            \"problemMatcher\": {\r\n                \"owner\": \"cpp\",\r\n                \"fileLocation\": [\r\n                    \"absolute\"\r\n                ],\r\n                \"pattern\": {\r\n                    \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\r\n                    \"file\": 1,\r\n                    \"line\": 2,\r\n                    \"column\": 3,\r\n                    \"severity\": 4,\r\n                    \"message\": 5\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"taskName\": \"clean\",\r\n            \"command\": \"make\",\r\n            \"isShellCommand\": true,\r\n            \"args\": [\r\n                \"clean\",\r\n                \"-C./build\"\r\n            ],\r\n            \"showOutput\": \"always\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n# ビルド出力が相対パスの場合\r\n\r\n`fileLocation`を相対パスで設定する．\r\n\r\n```\r\n\"fileLocation\": [\r\n    \"relative\",\r\n    \"${workspaceRoot}\"\r\n],\r\n```",
    "pub_date": "2017-05-27T03:00:54.324Z",
    "user": 2,
    "tags": [
      1,
      8,
      16,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 166,
  "fields": {
    "title": "Python で並行処理（マルチスレッド / マルチコア）",
    "content": "# マルチスレッド\r\n\r\nPythonのthreadはシングルコアでしか動かないのでCPU負荷は上がらない\r\n\r\n```py\r\nimport threading\r\n\r\ndef foo():\r\n    while True:\r\n        pass\r\n\r\ndef main():\r\n    threads = []\r\n    for _ in range(4):\r\n        th = threading.Thread(target=foo, daemon=True)\r\n        th.start()\r\n        threads += [th]\r\n    for th in threads:\r\n        th.join()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n# マルチコア\r\n\r\nPoolを使うと複数プロセスを立ち上げマルチコアで動く．pool.Poolの引数が最大プロセス数の指定\r\n\r\n```py\r\nfrom multiprocessing import pool\r\n\r\ndef foo(n):\r\n    while True:\r\n        pass\r\n\r\ndef main():\r\n    p = pool.Pool(4)\r\n    p.map(foo, range(4))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2017-06-11T13:33:47.440Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 167,
  "fields": {
    "title": ".NET CoreでC#をビルド",
    "content": "# 1. Install .NET SDK\r\n\r\n[https://www.microsoft.com/net/core#windowscmd](https://www.microsoft.com/net/core#windowscmd)\r\n\r\n# 2. Initialize some code\r\n\r\n```\r\n> dotnet new console -o samplecs\r\n> cd samplecs\r\n```\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace samplecs\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 3. Run the app\r\n\r\n```\r\n> dotnet restore\r\n> dotnet run\r\n> dotnet run --configuration Release    # リリースビルド\r\n```",
    "pub_date": "2017-08-11T16:35:06.403Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 168,
  "fields": {
    "title": "Herokuのアプリを常時起動",
    "content": "# Herokuでの常時起動方法\r\n\r\n通常はHerokuのアドオンのHeroku Schedulerで対応可能だが，クレジットカードの登録が必要なので別方法で実現．\r\n\r\n代替の手段としてAPSchedulerを使って対応する．\r\n\r\n[https://devcenter.heroku.com/articles/clock-processes-python](https://devcenter.heroku.com/articles/clock-processes-python)\r\n\r\n# HTTPでアクセスするサンプル\r\n\r\nPythonでアクセスするサンプルコード\r\n\r\n```py\r\nimport urllib.request\r\nurllib.request.urlopen('https://mondja.herokuapp.com')\r\n```\r\n\r\n# Herokuの起動時間\r\n\r\nHerokuの残り無料インスタンス時間はこちらで確認可能．\r\n\r\n[https://dashboard.heroku.com/account/billing](https://dashboard.heroku.com/account/billing)",
    "pub_date": "2017-08-16T05:50:01.814Z",
    "user": 2,
    "tags": [
      1,
      2,
      33
    ]
  }
},
{
  "model": "app.memo",
  "pk": 169,
  "fields": {
    "title": "Pythonの例外でstack traceを表示する",
    "content": "# tracebackを使って表示\r\n\r\n```py\r\ntry:\r\n    x = 1 / 0\r\nexcept:\r\n    import traceback\r\n    traceback.print_exc()\r\n```\r\n\r\n## 出力結果\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"Main.py\", line 2, in <module>\r\n    x = 1 / 0\r\nZeroDivisionError: division by zero\r\n```",
    "pub_date": "2017-08-18T11:47:44.303Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 170,
  "fields": {
    "title": "Jupyterをリモートから使う方法",
    "content": "# 1. notebook_config.pyの生成\r\n\r\n下記コマンドを実行\r\n\r\n```\r\n$ jupyter notebook --generate-config\r\n```\r\n\r\n`~/.jupyter/jupyter_notebook_config.py`が生成される\r\n\r\n# 2. パスワードのハッシュ値を生成\r\n\r\nipythonから下記コードを実行\r\n\r\n```\r\nIn [1]: from IPython.lib import passwd\r\nIn [2]: passwd()\r\n```\r\n\r\nパスワードを入力して出力されたハッシュ値をコピーする\r\n\r\n# 3. jupyter_notebook_config.pyを更新\r\n\r\nファイルの末尾に下記を追記\r\n\r\n```\r\nc.IPKernelApp.pylab = 'inline'\r\nc.NotebookApp.ip = '*'\r\nc.NotebookApp.open_browser = False\r\nc.NotebookApp.port = 9999\r\nc.NotebookApp.password = 'sha1:XXXXXXX（#先ほど保存したハッシュ値を記載）'\r\n```\r\n\r\n# 4. 起動\r\n\r\nJupyter notebookを起動\r\n\r\n```\r\n$ jupyter notebook\r\n```\r\n\r\n# 5. アクセス\r\n\r\nブラウザから`http://<jupyter実行ホストのIP Address>:9999`にアクセス",
    "pub_date": "2017-08-19T03:13:33.960Z",
    "user": 2,
    "tags": [
      1,
      2,
      59
    ]
  }
},
{
  "model": "app.memo",
  "pk": 171,
  "fields": {
    "title": "make実行時の詳細表示",
    "content": "# CMakeで生成したMakefileの詳細表示\r\n\r\n```\r\n$ make VERBOSE=1\r\n```\r\n\r\n忘れたらMakefileの中で次の記述を確認．\r\n\r\n```\r\n# Suppress display of executed commands.\r\n$(VERBOSE).SILENT:\r\n```",
    "pub_date": "2017-08-27T01:25:17.412Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 172,
  "fields": {
    "title": "VMwareの一覧から削除",
    "content": "# iniファイルを直接修正\r\n\r\n消せない場合は，`C:\\Users\\username\\AppData\\Roaming\\VMware\\preferences.ini`から削除すればOK．\r\n\r\n```\r\npref.mruVM0.filename = \"C:\\VMware\\Debian9.x64bit\\Debian 9.x 64 ビット.vmx\"\r\npref.mruVM0.displayName = \"Debian 9.x 64 ビット\"\r\npref.mruVM0.index = \"0\"\r\n```",
    "pub_date": "2017-08-28T06:20:22.762Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 173,
  "fields": {
    "title": "LD_PRELOADで既存の関数をラップ",
    "content": "# ラップ対象の関数呼び出し\r\n\r\nコード（print.c）\r\n```cpp\r\n#include <stdio.h>\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    puts(\"hoge\");\r\n    return 0;\r\n}\r\n```\r\n\r\n実行結果\r\n```\r\n$ gcc print.c \r\n$ ./a.out \r\nhoge\r\n```\r\n\r\n# ラップ関数\r\n\r\nコード（override.c）\r\n```cpp\r\n#include <stdio.h>\r\n#include <assert.h>\r\n#define __USE_GNU\r\n#include <dlfcn.h>\r\n\r\nint puts(const char *__s)\r\n{\r\n    fprintf(stdout, \"before\\n\");\r\n\r\n    void *handle = dlsym(RTLD_NEXT, \"puts\");\r\n    assert(handle);\r\n    int (*func)(const char *) = (int (*)(const char*))handle;\r\n    int ret = func(__s);\r\n\r\n    fprintf(stdout, \"after\\n\");\r\n\r\n    return ret;\r\n}\r\n```\r\n\r\n実行結果\r\n```\r\n$ gcc -shared -fPIC override.c -ldl -o liboverride.so\r\n$ LD_PRELOAD=./liboverride.so ./a.out \r\nbefore\r\nhoge\r\nafter\r\n```\r\n\r\n※詳細はBINARY HACKSの「#61 LD_PRELOAD で既存の関数をラップする」",
    "pub_date": "2017-08-29T00:46:20.979Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 174,
  "fields": {
    "title": "Jupyterのテーマを変更",
    "content": "# jupyterthemesでテーマを変更\r\n\r\n```\r\n$ pip install jupyterthemes    # インストール\r\n$ jt -l                        # テーマの一覧を表示\r\nAvailable Themes:\r\n   chesterish\r\n   grade3\r\n   monokai\r\n   oceans16\r\n   onedork\r\n   solarizedd\r\n   solarizedl\r\n$ jt -t onedork -T             # テーマを適用．-Tはツールバーの表示\r\n$ jt -r                        # 適用したテーマを戻す\r\n```\r\n\r\n![image](https://github.com/dunovank/jupyter-themes/raw/master/screens/onedork_code_headers.png)",
    "pub_date": "2017-08-29T04:22:48.354Z",
    "user": 2,
    "tags": [
      1,
      2,
      59
    ]
  }
},
{
  "model": "app.memo",
  "pk": 175,
  "fields": {
    "title": "VSCodeからssh経由でリモートのファイルを編集",
    "content": "# プラグインのインストール\r\n\r\n`Remote VSCode`をインストール\r\n\r\n```\r\next install remote-vscode\r\n```\r\n\r\n# VSCodeサーバー起動\r\n\r\n```\r\nRemote: Start server\r\n```\r\n\r\n起動すると右下にアイコンが表示\r\n\r\n# SSH接続\r\n\r\n```\r\n$ ssh -R 52698:127.0.0.1:52698 <リモートユーザ>@<リモートIPアドレス>\r\n```\r\n\r\n`52698`はsettings.jsonの`remote.port`の設定内容\r\n\r\n# rmateのインストール\r\n\r\nsshでの接続先でrmateをインストール\r\n\r\n```\r\n$ sudo wget -O /usr/local/bin/rmate https://raw.github.com/aurora/rmate/master/rmate\r\n$ sudo chmod a+x /usr/local/bin/rmate\r\n```\r\n\r\n# ファイル編集\r\n\r\n```\r\n$ rmate -p 52698 ファイル名\r\n```\r\n\r\nローカルのVSCodeでファイルが開いて編集できる",
    "pub_date": "2017-09-04T00:50:41.772Z",
    "user": 2,
    "tags": [
      1,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 176,
  "fields": {
    "title": "GitHubのIdenticon",
    "content": "# GitHubのIdenticonの取得方法\r\n\r\nGitHubの設定画面からプロフィール画像をアップロードしてしまうと，デフォルトのIdenticonに戻せない．\r\nただし，以下のURLからいつでも確認することができる．\r\n\r\n[https://identicons.github.com/<自分のユーザー名>.png](https://identicons.github.com/y-tsutsu.png)\r\n\r\n![https://identicons.github.com/y-tsutsu.png](https://identicons.github.com/y-tsutsu.png)",
    "pub_date": "2017-09-05T13:42:38.015Z",
    "user": 2,
    "tags": [
      1,
      60
    ]
  }
},
{
  "model": "app.memo",
  "pk": 177,
  "fields": {
    "title": "Pythonで進捗状況を表示する",
    "content": "# tqdmを使ってプログレスバーを表示\r\n\r\n## インストール\r\n```\r\n$ pip install tqdm\r\n```\r\n\r\n## サンプルコード\r\n```py\r\nfrom tqdm import tqdm\r\nimport time\r\n\r\ndef main():\r\n    for i in tqdm(range(100)):\r\n        time.sleep(0.1)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n## 結果表示\r\n\r\n```\r\n$ python sample.py\r\n100%|##################################| 100/100 [00:10<00:00,  9.94it/s]\r\n```",
    "pub_date": "2017-09-06T07:20:10.911Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 178,
  "fields": {
    "title": "Yogibo",
    "content": "# 人をダメにするソファ\r\n\r\n[https://yogibo.jp](https://yogibo.jp)\r\n\r\n![image](https://cdn.yogibo.jp/assets/img/coordinate/room_003.jpg)",
    "pub_date": "2017-09-16T01:37:36.871Z",
    "user": 2,
    "tags": [
      61
    ]
  }
},
{
  "model": "app.memo",
  "pk": 179,
  "fields": {
    "title": "プログラミング言語Kuin",
    "content": "# 簡単で高速な実用プログラミング言語「Kuin」です！\r\n\r\n[https://github.com/kuina/Kuin](https://github.com/kuina/Kuin)\r\n\r\n![image](https://kuina.ch/images/common/category_kuin.png)\r\n\r\n```\r\nfunc main()\r\n    for i(2, 100)\r\n        var b: bool :: false\r\n        for j(2, i - 1)\r\n            if(i % j = 0)\r\n                do b :: true\r\n            end if\r\n        end for\r\n        if(!b)\r\n            do cui@print(\"\\{i}\\n\")\r\n        end if\r\n    end for\r\nend func\r\n```",
    "pub_date": "2017-09-19T02:11:08.083Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 180,
  "fields": {
    "title": "ランチャー Keypirinha",
    "content": "# Alfredライクで高速なランチャー Keypirinha\r\n\r\n[http://keypirinha.com](http://keypirinha.com)\r\n\r\n![image](http://keypirinha.com/_images/wndrun-jumbo.png)\r\n\r\n```\r\n# Keypirinha.ini\r\n\r\n[app]\r\nlaunch_at_startup = yes\r\nhotkey_run = Ctrl+Alt+Space\r\n\r\n[gui]\r\nshow_on_taskbar = no\r\ntheme = MediumLayout, SolarizedDarkColors\r\n```",
    "pub_date": "2017-09-29T04:11:11.416Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 181,
  "fields": {
    "title": "Gitで空ディレクトリを管理する手順",
    "content": "# 1 .gitkeepという空ファイルを配置\r\n\r\n管理したいディレクトリに`.gitkeep`という空のファイルを作成する．（tmp/.gitkeep）\r\n\r\n# 2 .gitignoreを更新\r\n\r\n`.gitignore`で.gitkeepの除外をキャンセルする．\r\n\r\n```\r\ntmp/*  \r\n!.gitkeep\r\n```",
    "pub_date": "2017-10-06T05:38:28.014Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 182,
  "fields": {
    "title": "Requestsで日本語を扱うときの文字化けを直す",
    "content": "# apparent_encodingで文字コードを判定\r\n\r\nRequestsを使って日本語ページを取得したときに表示すると文字化けが起こる．\r\n`apparent_encoding`を呼び出すと，ライブラリ使ってちゃんと文字コードを判定するらしい．\r\n\r\n```\r\nimport requests\r\nimport re\r\n\r\ndef main():\r\n    r = requests.get('http://bootcamp-text.readthedocs.io/textbook/index.html')\r\n    r.encoding = r.apparent_encoding\r\n\r\n    repatter = re.compile('<li class=\"toctree-l1.*>(.*)</a>')\r\n    for x in r.text.split('\\n'):\r\n        result = repatter.search(x)\r\n        if result:\r\n            print(result.groups(1)[0].encode().decode('utf-8'))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2017-10-15T02:13:54.450Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 183,
  "fields": {
    "title": "モンティ・ホール問題",
    "content": "# モンティ・ホール問題をPythonで解く\r\n\r\n> 正解は『ドアを変更する』である。なぜなら、ドアを変更した場合には景品を当てる確率が2倍になるからだ\r\n\r\n[https://ja.wikipedia.org/wiki/モンティ・ホール問題](https://ja.wikipedia.org/wiki/モンティ・ホール問題)\r\n\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef do_notchange(count):\r\n    c = 0\r\n    for i in range(count):\r\n        x = np.random.permutation([True, False, False])\r\n        idx = np.random.randint(0, 3)\r\n        if x[idx]:\r\n            c += 1\r\n    return c\r\n\r\ndef do_change(count):\r\n    c = 0\r\n    for i in range(count):\r\n        x = list(np.random.permutation([True, False, False]))\r\n        idx = np.random.randint(0, 3)\r\n        x.pop(idx)\r\n        x.remove(False)\r\n        if x[0]:\r\n            c += 1\r\n    return c\r\n\r\ndef main():\r\n    c1 = do_notchange(10000)\r\n    c2 = do_change(10000)\r\n    print(c1)\r\n    print(c2)\r\n    plt.pie(np.array([c1, c2]), counterclock=False, startangle=90,\r\n            autopct=\"%1.1f%%\", labels=['net change', 'change'])\r\n    plt.show()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2017-10-15T15:49:14.560Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 184,
  "fields": {
    "title": "PythonのFizzBuzz（その2）",
    "content": "# リスト内包表記を使ってワンライナー\r\n\r\nリスト内包表記で範囲外の場合はエラーでなく空リストが返る．\r\n\r\n```py\r\nprint('\\n'.join(['Fizz'[i % 3 * 4:] + 'Buzz'[i % 5 * 4:] or str(i) for i in range(1, 16)]))\r\n```",
    "pub_date": "2017-10-18T06:09:16.229Z",
    "user": 2,
    "tags": [
      1,
      2,
      9
    ]
  }
},
{
  "model": "app.memo",
  "pk": 185,
  "fields": {
    "title": "DockerでFedoraの環境を作成",
    "content": "# Docker Pull\r\n\r\nDocker HubからFedoraのイメージをpull\r\n\r\n```shell\r\n$ sudo docker pull fedora\r\n```\r\n\r\n# Docker Run\r\n\r\nContainerの作成\r\n\r\n```shell\r\n$ sudo docker run -it --name myfedora fedora /bin/bash\r\n```\r\n\r\n# Setup ssh\r\n\r\nssh接続のためのSetup\r\n\r\n```shell\r\n# dnf -y update --refresh\r\n# dnf clean packages\r\n# dnf -y update --refresh\r\n# dnf -y install openssh-server passwd\r\n# mkdir -p /var/run/sshd\r\n# ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ''\r\n# passwd root\r\n# exit\r\n```\r\n\r\n# Docker Commit\r\n\r\nssh接続のための環境を作ったContainerをCommit\r\n\r\n```shell\r\n$ sudo docker commit myfedora tsutsu/fedora\r\n```\r\n\r\n# Docker Run\r\n\r\nCommitしたImageでContainerの作成．ここでは22ポート（ssh）と80ポート（http）を開けている．\r\n\r\n```shell\r\n$ sudo docker run -d --expose 22 --expose 80 --name myfedora2 tsutsu/fedora /usr/sbin/sshd -D\r\n```\r\n\r\n外部からアクセスする場合はport forwardを設定する．\r\n\r\n```shell\r\n$ sudo docker run -d --expose 22 --expose 80 -p 2200:22 -p 8080:80 --name myfedora2 tsutsu/fedora /usr/sbin/sshd -D\r\n```\r\n\r\n# Connect\r\n\r\nDocker Execで接続\r\n\r\n```shell\r\n$ sudo docker exec -it myfedora2 /bin/bash\r\n```\r\n\r\nsshで接続\r\n\r\n```shell\r\n$ ssh root@172.17.0.2\r\n```\r\n\r\n# Install Tools\r\n\r\nその他，必要なツールをインストール．\r\n\r\n```shell\r\n# dnf -y groupinstall \"Development Tools\"\r\n# dnf -y install kernel-devel kernel-headers git net-tools procps wget\r\n```",
    "pub_date": "2017-10-21T11:56:25.533Z",
    "user": 2,
    "tags": [
      1,
      62
    ]
  }
},
{
  "model": "app.memo",
  "pk": 186,
  "fields": {
    "title": "C++ 未定義動作コード",
    "content": "# g++とclang++で違う結果になるコード\r\n\r\n```c++\r\n#include <vector>\r\n#include <cstdio>\r\n\r\nint f(std::vector<int> &a, std::vector<int> &b)\r\n{\r\n    a.push_back(-1);\r\n    b.push_back(-1);\r\n    return (int)a.size();\r\n}\r\n\r\nint main()\r\n{\r\n    std::vector<int> a, b;\r\n    int first = f(a, b);\r\n    printf(\"a[0]=%d, b[0]=%d\\n\", a[0], b[0]);\r\n    a[0] = f(a, b);\r\n    printf(\"a[0]=%d, b[0]=%d\\n\", a[0], b[0]);\r\n    return 0;\r\n}\r\n```\r\n\r\n# 実行結果\r\n\r\n```shell\r\n$ ./gcc.out\r\na[0]=-1, b[0]=-1\r\na[0]=-1, b[0]=2\r\n$ ./clang.out\r\na[0]=-1, b[0]=-1\r\na[0]=2, b[0]=-1\r\n```\r\n\r\na.push_back() は a[0] のアドレスを変更する可能性があるから，前もって評価された a[0] のアドレスは必ずしも有効ではない\r\n\r\n# バージョン\r\n\r\n```shell\r\n$ g++ --version\r\ng++ (Debian 6.3.0-18) 6.3.0 20170516\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n$ clang++ --version\r\nclang version 3.8.1-24 (tags/RELEASE_381/final)\r\nTarget: x86_64-pc-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n```\r\n\r\n# C++17\r\n\r\nC++17では`厳密な式の評価順`が入るらしい",
    "pub_date": "2017-10-22T01:50:25.231Z",
    "user": 2,
    "tags": [
      1,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 187,
  "fields": {
    "title": "tmuxのセッション操作",
    "content": "# tmuxのセッション関連の操作\r\n\r\n## セッションの一覧\r\n\r\n```shell\r\n$ tmux ls\r\n```\r\n\r\n## アタッチ\r\n\r\n```shell\r\n$ tmux a\r\n$ tmux a -t セッション名\r\n```\r\n\r\n## デタッチ\r\n\r\n```shell\r\n$ tmux d\r\n```\r\n\r\n## tmux上からセッション一覧 & 切り替え\r\n\r\n```\r\nPREFIX s\r\n```",
    "pub_date": "2017-10-22T15:05:12.987Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 188,
  "fields": {
    "title": "sshfsでリモートホストのファイルを共有",
    "content": "# リモートのディレクトリをローカルにマウント\r\n\r\nローカルにいながらにしてリモートのファイルを触れるようになる方法．\r\n\r\n## インストール\r\n\r\n```shell\r\n$ sudo apt install sshfs\r\n```\r\n\r\n## マウント・アンマウント\r\n\r\n```shell\r\n$ sshfs <user>@<host>:<dir> <mountpoiut>\r\n$ fusermount -u <mountpoint>\r\n```",
    "pub_date": "2017-10-28T12:12:00.587Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 189,
  "fields": {
    "title": "LinuxからWindowsの共有フォルダをマウント",
    "content": "# cifs-utilsを使って共有フォルダをマウント\r\n\r\n## インストール\r\n\r\n```shell\r\n$ sudo apt install cifs-utils \r\n```\r\n\r\n## マウント・アンマウント\r\n\r\n```shell\r\n$ sudo mount.cifs //192.168.11.02/disk /home/tsutsu/nas/x/\r\n$ sudo umount /home/tsutsu/nas/x/\r\n```\r\n\r\n## ユーザが windows ドメインの場合\r\n\r\n```shell\r\n$ sudo mount.cifs -o username=<user>,password=<password>,domain=<domain> //192.168.20.10/ts ~/nas\r\n```\r\n\r\n## 自動マウント\r\n\r\n```shell\r\n$ sudo vi /etc/fstab\r\n//192.168.11.2/disk /home/tsutsu/nas/x cifs username=<user>,password=<password>\r\n```",
    "pub_date": "2017-10-28T12:28:19.048Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 190,
  "fields": {
    "title": "pip-toolsでパッケージ管理",
    "content": "# pip-toolsのインストール\r\n\r\n```shell\r\n$ pip install pip-tools\r\n```\r\n\r\n# requirements.txtの更新\r\n\r\nあらかじめ`requirements.in`を作成しておく．\r\n\r\n```\r\ndj-database-url\r\ndjango\r\ndjango-dotenv\r\n```\r\n\r\n`pip-compile`コマンドで最新バージョンの内容でrequirements.txtを更新．\r\n\r\n```shell\r\n$ pip-compile requirements.in\r\n```\r\n\r\n# パッケージの更新\r\n\r\nrequirements.txtの内容に合わせてパッケージ一式を更新．不要になったパッケージのアンインストールも行ってくれる．\r\n\r\n```shell\r\n$ pip-sync\r\n```",
    "pub_date": "2018-01-04T07:52:04.318Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 191,
  "fields": {
    "title": "コマンドプロンプトでUTF-8を表示",
    "content": "# 文字コードを変更\r\n\r\n`chcp`コマンドを使って文字コードを変更する．\r\n\r\n## UTF-8\r\n\r\n```console\r\n> chcp 65001\r\n```\r\n\r\n## Shift_JIS\r\n\r\n```console\r\n> chcp 932\r\n```",
    "pub_date": "2018-01-05T05:42:37.604Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 192,
  "fields": {
    "title": "PyQtでQtQuickのサンプルアプリ",
    "content": "# PyQtのインストール\r\n\r\n```shell\r\n$ pip install pyqt5\r\n```\r\n\r\n# PyQt側のコード\r\n\r\n```\r\nimport sys\r\nfrom os.path import dirname, join\r\n\r\nfrom PyQt5.QtCore import QUrl\r\nfrom PyQt5.QtGui import QGuiApplication\r\nfrom PyQt5.QtQuick import QQuickView\r\n\r\ndef main():\r\n    app = QGuiApplication(sys.argv)\r\n    view = QQuickView()\r\n\r\n    view.engine().quit.connect(app.quit)\r\n    view.rootContext().setContextProperty(\r\n        \"imageUrl\", 'https://pbs.twimg.com/profile_images/712812877439062017/xZNnGcXW.jpg')\r\n\r\n    url = QUrl(join(dirname(__file__), 'sample.qml'))\r\n    view.setSource(url)\r\n    view.show()\r\n    sys.exit(app.exec_())\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n# QML側のコード\r\n\r\n```\r\nimport QtQuick 2.0\r\n\r\nRectangle {\r\n    id: imageViewer\r\n    width: 512\r\n    height: 512\r\n\r\n    Image {\r\n        id: view\r\n        clip: true\r\n        sourceSize.width: 0\r\n        anchors.fill: parent\r\n        source: imageUrl\r\n    }\r\n\r\n    Rectangle {\r\n        id: closeButton\r\n        width: 100\r\n        height: 100\r\n        color: 'gray'\r\n        anchors.right: parent.right\r\n\r\n        MouseArea {\r\n            anchors.fill: parent\r\n            onPressed: {\r\n                Qt.quit()\r\n            }\r\n        }\r\n\r\n        Text {\r\n            text: 'close'\r\n            horizontalAlignment: Text.AlignHCenter\r\n            verticalAlignment: Text.AlignVCenter\r\n            anchors.horizontalCenter: parent.horizontalCenter\r\n            anchors.verticalCenter: parent.verticalCenter\r\n            wrapMode: Text.NoWrap\r\n        }\r\n    }\r\n}\r\n```",
    "pub_date": "2018-01-27T10:27:29.332Z",
    "user": 2,
    "tags": [
      1,
      2,
      57
    ]
  }
},
{
  "model": "app.memo",
  "pk": 193,
  "fields": {
    "title": "cmderでのlsコマンドの文字化け対策",
    "content": "# Monospaceの解除\r\n\r\n「Main」の`Monospace`のチェックを外す．\r\n\r\n# エンコーディング設置\r\n\r\n「Startup」-「Environment」に下記環境変数を設定．\r\n\r\n```bash\r\nset PATH=C:\\Program Files\\Git\\usr\\bin;%ConEmuBaseDir%\\Scripts;%PATH%\r\nset LANG=ja_JP.UTF-8\r\n```\r\n\r\n# msysのコマンドについて\r\n\r\n`ls`と`git`は挙動が不安定，バージョンが古いなど調子が悪いため，環境変数のPATHにGit for Windowsのディレクトリを追加して、そちらが優先的に読み込まれるようにする．Git for Windowsの`ls`コマンド等は文字化けしてしまうため，文字コードの対策が必要．",
    "pub_date": "2018-02-04T10:25:02.526Z",
    "user": 2,
    "tags": [
      1
    ]
  }
},
{
  "model": "app.memo",
  "pk": 194,
  "fields": {
    "title": "Westonのビルド手順",
    "content": "# 環境変数\r\n\r\n適当な名前（wlenv）で保存．\r\n\r\n*wlenv*\r\n\r\n```bash\r\nexport USRFS=$HOME/usrfs\r\nexport WLD=$USRFS\r\nexport LD_LIBRARY_PATH=$USRFS/lib\r\nexport PKG_CONFIG_PATH=$USRFS/lib/pkgconfig:$USRFS/share/pkgconfig\r\nexport ACLOCAL=\"aclocal -I $USRFS/share/aclocal\"\r\nexport PATH=$HOME/usrfs/bin:$PATH\r\n```\r\n\r\n# ビルド&インストール\r\n\r\n上記の環境変数を読み込んで，`~/usrfs`にビルド&インストール．\r\n\r\n*install.sh*\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nWORK_DIR=$(cd $(dirname $0) && pwd)\r\n\r\nmkdir -p ~/usrfs\r\nsudo apt install -y libxml++2.6-dev bison flex libmtdev-dev libudev-dev libevdev-dev libgtk-3-dev check libunwind-dev libwacom-dev libxcb-composite0-dev libpam0g-dev\r\n\r\ncd $WORK_DIR\r\nsource ./wlenv\r\n\r\ngit clone http://anongit.freedesktop.org/git/wayland/wayland.git\r\ncd wayland\r\ngit checkout 1.14.0\r\n./autogen.sh --prefix=$WLD --disable-documentation\r\n./autogen.sh --prefix=$WLD --disable-documentation\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone http://anongit.freedesktop.org/git/mesa/mesa.git\r\ncd mesa\r\ngit checkout mesa-17.0.7\r\npyenv local 2.7.18\r\npip install mako\r\n./autogen.sh --prefix=$WLD --with-gallium-drivers=svga --with-dri-drivers= --enable-gles1 --enable-gles2 --enable-gallium-egl --enable-gbm --enable-shared-glapi --with-egl-platforms=x11,wayland\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone http://anongit.freedesktop.org/git/cairo\r\ncd cairo\r\ngit checkout 1.15.8\r\n./autogen.sh --prefix=$WLD --enable-gl --enable-xcb\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone git://anongit.freedesktop.org/wayland/libinput\r\ncd libinput\r\ngit checkout 1.8.4\r\n./autogen.sh --prefix=$WLD\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone http://anongit.freedesktop.org/git/wayland/weston.git\r\ncd weston\r\ngit checkout 2.0.0\r\n./autogen.sh --prefix=$WLD\r\nmake -j4\r\nsudo make install\r\ncp ivi-shell/weston.ini ~/.config/.\r\ncd $WORK_DIR\r\n```",
    "pub_date": "2018-02-12T11:39:08.662Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 195,
  "fields": {
    "title": "WindowsでUSBメモリのパーティションの削除",
    "content": "# パーティションの削除方法\r\n\r\n`diskpart`をコマンドプロンプト等から起動する．（コンソールが立ち上がる．）\r\n\r\n```console\r\n> diskpart\r\n```\r\n\r\nディスクNo.を確認する．サイズ等で確認．\r\n\r\n```console\r\nDISKPART> list disk\r\n\r\n  ディスク      状態           サイズ   空き   ダイナ GPT\r\n  ###                                          ミック\r\n  ------------  -------------  -------  -------  ---  ---\r\n  ディスク 0    オンライン           465 GB      0 B\r\n  ディスク 1    オンライン            14 GB  7823 MB\r\n```\r\n\r\nディスクを選択してクリーン，パーティションの作成を行う．\r\n\r\n```\r\nDISKPART> select disk 1\r\n\r\nディスク 1 が選択されました。\r\n\r\nDISKPART> clean\r\n\r\nDiskPart はディスクを正常にクリーンな状態にしました。\r\n\r\nDISKPART> create partition primary\r\n\r\nDiskPart は指定したパーティションの作成に成功しました。\r\n```\r\n\r\nあとはエクスプローラ上のコンテキストメニューからFAT32等でフォーマットを実施．",
    "pub_date": "2018-03-20T07:16:43.724Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 196,
  "fields": {
    "title": "pip installでUnicodeDecodeErrorが出る対策",
    "content": "# pip\\compat\\\\_\\_init\\_\\_.pyの修正\r\n\r\n`locale`のimportを追加して`console_to_str`を修正．\r\n\r\n```diff\r\nimport os\r\nimport sys\r\n+import locale\r\n：\r\nif sys.version_info >= (3,):\r\n    def console_to_str(s):\r\n-       try:\r\n-           return s.decode(sys.__stdout__.encoding)\r\n-       except UnicodeDecodeError:\r\n-           return s.decode('utf_8')\r\n+       return s.decode(locale.getpreferredencoding() or 'utf-8', 'replace')\r\n```",
    "pub_date": "2018-03-31T19:17:48.217Z",
    "user": 2,
    "tags": [
      1,
      2,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 197,
  "fields": {
    "title": "Gitで差分行数をカウントする方法",
    "content": "# シンプルに全体の差分行数を表示する\r\n\r\n`git diff`に`--shortstat`オプションをつけると，全体の変更フィル数と追加/削除の行数が出力される．\r\n\r\n```shell\r\n$ git diff --shortstat dc2b1199f4..master\r\n 362 files changed, 52423 insertions(+), 24979 deletions(-)\r\n```\r\n\r\n# 各ファイルごとの差分行数を表示する\r\n\r\n`--numstat`オプションを使用する．\r\n\r\n```shell\r\n$ git diff --numstat dc2b1199f4..master\r\n0       3       app/__init__.py\r\n11      0       app/admin.py\r\n5       0       app/apps.py\r\n13      16      app/forms.py\r\n57      4       app/models.py\r\n42      27      app/tests.py\r\n36      0       app/urls.py\r\n194     46      app/views.py\r\n```\r\n\r\n# もう少しグラフィカルに表示する\r\n\r\n`--stat`オプションを使用する．\r\n\r\n```shell\r\n$ git diff --stat dc2b1199f4..master\r\n app/__init__.py                                    |     3 -\r\n app/admin.py                                       |    11 +\r\n app/apps.py                                        |     5 +\r\n app/forms.py                                       |    29 +-\r\n app/models.py                                      |    61 +-\r\n app/tests.py                                       |    69 +-\r\n app/urls.py                                        |    36 +\r\n app/views.py                                       |   240 +-\r\n```",
    "pub_date": "2018-04-05T06:53:16.759Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 198,
  "fields": {
    "title": "reveal.jsをPDFに印刷",
    "content": "# reveal.jsのスライドをPDFに印刷する\r\n\r\n1. URLに`?print-pdf`を追加する．\r\n1. スライドが縦に並んで表示される．\r\n1. ブラウザからPDFに印刷する．\r\n\r\n## 参考例\r\n\r\n* 通常版  \r\n[https://y-tsutsu.github.io/reveal.js-lt-wintools/](https://y-tsutsu.github.io/reveal.js-lt-wintools/)\r\n* PDF印刷版  \r\n[https://y-tsutsu.github.io/reveal.js-lt-wintools/?print-pdf](https://y-tsutsu.github.io/reveal.js-lt-wintools/?print-pdf)",
    "pub_date": "2018-04-05T06:59:24Z",
    "user": 2,
    "tags": [
      63
    ]
  }
},
{
  "model": "app.memo",
  "pk": 199,
  "fields": {
    "title": "Dockerをsudoなしで使う方法",
    "content": "# dockerグループに追加する\r\n\r\nユーザをdockerグループに追加するとsudoなしで実行可能．\r\n\r\n```shell\r\n$ groups\r\ntsutsu cdrom floppy audio dip video plugdev netdev bluetooth lpadmin scanner docker\r\n$ sudo groupadd docker            # dockerグループがなければ作成する\r\n$ sudo gpasswd -a $USER docker    # ユーザをdockerグループに所属させる\r\n$ sudo systemctl restart docker\r\n$ exit\r\n```",
    "pub_date": "2018-04-06T04:16:43.004Z",
    "user": 2,
    "tags": [
      1,
      62
    ]
  }
},
{
  "model": "app.memo",
  "pk": 200,
  "fields": {
    "title": "reveal.jsの便利な設定変更",
    "content": "# reveal.jsへの設定\r\n\r\n* 履歴機能の有効化（F5を押してもページが戻らない）\r\n* スライドのアニメーションの変更\r\n\r\n```diff\r\n<script>\r\n    Reveal.initialize({\r\n        dependencies: [\r\n            { src: 'plugin/markdown/marked.js' },\r\n            { src: 'plugin/markdown/markdown.js' },\r\n            { src: 'plugin/notes/notes.js', async: true },\r\n            { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }\r\n        ],\r\n+\t\thistory: true,\r\n+\t\ttransition: 'convex', // none/fade/slide/convex/concave/zoom\r\n    });\r\n</script>\r\n```\r\n\r\n# Markdownでの記述設定\r\n\r\n* Markdownの有効化\r\n* セパレータの設定\r\n\r\n```diff\r\n<div class=\"reveal\">\r\n    <div class=\"slides\">\r\n+       <section data-markdown data-separator=\"\\n---\\n\" data-separator-vertical=\"\\n--\\n\">\r\n+           <textarea data-template>\r\n+               # XXX\r\n+               ---\r\n+               ## YYY\r\n+               --\r\n+               ### ZZZ\r\n+           </textarea>\r\n+       </section>\r\n    </div>\r\n</div>\r\n```",
    "pub_date": "2018-05-01T07:46:00.095Z",
    "user": 2,
    "tags": [
      63
    ]
  }
},
{
  "model": "app.memo",
  "pk": 201,
  "fields": {
    "title": "Pythonで2次元配列を転置",
    "content": "# 2次元配列の行と列を入れ替える\r\n\r\n関数の引数に`*`をリストにつけて渡すと，分解されて引数に渡される．\r\n\r\n```py\r\na = [[y for y in range(1, 4)] for x in range(3)]\r\nprint(a)\r\nprint(*a, sep='\\n')\r\nb = [x for x in zip(*a)]\r\nprint(b)\r\nprint(*b, sep='\\n')\r\n```\r\n\r\n実行結果\r\n\r\n```shell\r\n$ python spam.py\r\n[[1, 2, 3], [1, 2, 3], [1, 2, 3]]\r\n[1, 2, 3]\r\n[1, 2, 3]\r\n[1, 2, 3]\r\n[(1, 1, 1), (2, 2, 2), (3, 3, 3)]\r\n(1, 1, 1)\r\n(2, 2, 2)\r\n(3, 3, 3)\r\n```",
    "pub_date": "2018-05-05T00:42:19.747Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 202,
  "fields": {
    "title": "Pythonで階乗，順列，組み合わせ",
    "content": "# 階乗，順列，組み合わせの総数算出\r\n\r\n`math.factorial()`を使ってそれぞれ算出．\r\n\r\n```py\r\nimport math\r\n\r\ndef factorial(n):\r\n    ''' 階乗 '''\r\n    return math.factorial(n)\r\n\r\ndef permutations_count(n, r):\r\n    ''' 順列 '''\r\n    return math.factorial(n) // math.factorial(n - r)\r\n\r\ndef combinations_count(n, r):\r\n    ''' 組み合わせ '''\r\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\r\n\r\ndef main():\r\n    print(factorial(5))\r\n    print(permutations_count(5, 2))\r\n    print(combinations_count(5, 2))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n実行結果\r\n\r\n```shell\r\n$ python spam.py\r\n120\r\n20\r\n10\r\n```",
    "pub_date": "2018-05-05T01:00:54.869Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 203,
  "fields": {
    "title": "素数列挙と素数判定",
    "content": "# Pythonで素数列挙と素数判定\r\n\r\n「エラトステネスのふるい」と「ためし割り」\r\n\r\n```py\r\ndef primes(n):\r\n    if n < 2:\r\n        return []\r\n\r\n    primes = [i for i in range(n)]\r\n    primes[1] = 0\r\n\r\n    for i in primes:\r\n        if i > n ** (1 / 2):\r\n            break\r\n        if i == 0:\r\n            continue\r\n        for j in range(i * 2, n, i):\r\n            primes[j] = 0\r\n\r\n    return [x for x in primes if x != 0]\r\n\r\ndef is_prime(n):\r\n    if n < 2:\r\n        return False\r\n    if n == 2 or n == 3 or n == 5:\r\n        return True\r\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\r\n        return False\r\n\r\n    prime = 7\r\n    step = 4\r\n    while prime <= n ** (1 / 2):\r\n        if n % prime == 0:\r\n            return False\r\n        prime += step\r\n        step = 6 - step\r\n\r\n    return True\r\n\r\ndef main():\r\n    pri = primes(10000)\r\n    print(len(pri))\r\n    print(len([x for x in pri if is_prime(x)]))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n    '''\r\n    $ python spam.py\r\n    1229\r\n    1229\r\n    '''\r\n```",
    "pub_date": "2018-05-06T15:56:59.755Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 204,
  "fields": {
    "title": "動的にグラフを生成",
    "content": "# Pythonで動的にグラフを生成する\r\n\r\nmatplotlibの`animation`を使って動的に描画する．\r\n\r\n```py\r\nimport math\r\n\r\nimport numpy as np\r\nfrom matplotlib import animation\r\nfrom matplotlib import pyplot as plt\r\n\r\ndef _update(frame, x, y):\r\n    plt.cla()\r\n    x.append(frame)\r\n    y.append(math.sin(frame))\r\n    plt.plot(x, y)\r\n\r\ndef main():\r\n    fig = plt.figure(figsize=(10, 6))\r\n\r\n    x = []\r\n    y = []\r\n\r\n    params = {\r\n        'fig': fig,\r\n        'func': _update,                        # グラフを更新する関数\r\n        'fargs': (x, y),                        # 関数の引数 (フレーム番号を除く)\r\n        'interval': 10,                         # 更新間隔 (ミリ秒)\r\n        'frames': np.arange(0, 10, 0.1),        # フレーム番号を生成するイテレータ\r\n        'repeat': False,                        # 繰り返さない\r\n    }\r\n    anime = animation.FuncAnimation(**params)\r\n\r\n    plt.show()\r\n    # anime.save('sin.gif', writer='pillow')    # 保存する場合\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2018-07-16T14:41:21.825Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 205,
  "fields": {
    "title": "DockerHubのイメージのタグ一覧",
    "content": "# DockerHubのレジストリのAPIを直に叩いて情報を取得する方法\r\n\r\n```console\r\n$ curl -s https://registry.hub.docker.com/v1/repositories/<イメージ名>/tags | sed \"s/,/\\n/g\" | grep name | cut -d '\"' -f 4\r\n```",
    "pub_date": "2018-07-20T04:13:12.163Z",
    "user": 2,
    "tags": [
      1,
      62
    ]
  }
},
{
  "model": "app.memo",
  "pk": 206,
  "fields": {
    "title": "Pipenvのscriptsに登録しておきたいコマンド",
    "content": "# 関連パッケージのインストール\r\n\r\n```console\r\n$ pipenv install --dev autopep8 flake8\r\n```\r\n\r\n# Pipfileに以下の内容を記述する\r\n\r\n```ini\r\n[scripts]\r\nstart = \"python main.py runserver\"\r\ntest = \"python -m unittest discover -v\"\r\nformat = \"autopep8 -ivr .\"\r\nlint = \"flake8 --show-source .\"\r\n```",
    "pub_date": "2018-12-09T11:20:15.896Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 207,
  "fields": {
    "title": "バッチファイルでコマンド実行結果を変数に受け取る",
    "content": "# Gitのコミットハッシュ値を取得する例\r\n\r\nfor文に「usebackq」オプションを指定して，INで指定するコマンドにバッククォーテーションでくくる．\r\n\r\n```bash\r\nfor /f \"usebackq tokens=*\" %%i in (`git rev-parse HEAD`) do @set GIT_COMMIT_HASH=%%i\r\necho __version__ = '%GIT_COMMIT_HASH%' > __version__.py\r\n```",
    "pub_date": "2018-12-14T07:41:11.501Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 208,
  "fields": {
    "title": "Goの環境設定",
    "content": "# はじめにインストールするツール\r\n\r\n```console\r\n$ go get -u github.com/motemen/gore/cmd/gore\r\n$ go get -u github.com/nsf/gocode\r\n$ go get -u github.com/k0kubun/pp\r\n$ go get -u golang.org/x/tools/cmd/godoc\r\n$ go get -u github.com/jessevdk/go-assets-builder\r\n```\r\n\r\n# vscodeからインストールできるツール\r\n\r\n`Go: Install/update Tools`からインストールできる．\r\n\r\n* github.com/uudashr/gopkgs/v2/cmd/gopkgs\r\n* github.com/ramya-rao-a/go-outline\r\n* github.com/cweill/gotests/...\r\n* github.com/fatih/gomodifytags\r\n* github.com/josharian/impl\r\n* github.com/haya14busa/goplay/cmd/goplay\r\n* github.com/go-delve/delve/cmd/dlv\r\n* golang.org/x/lint/golint\r\n* golang.org/x/tools/gopls\r\n\r\n# 別途バイナリをダウンロードしてインストールするツール\r\n\r\n* ghq  \r\n[https://github.com/motemen/ghq](https://github.com/motemen/ghq)\r\n* peco  \r\n[https://github.com/peco/peco](https://github.com/peco/peco)\r\n* dep  \r\n[https://github.com/golang/dep](https://github.com/golang/dep)",
    "pub_date": "2018-12-16T14:07:42.402Z",
    "user": 2,
    "tags": [
      1,
      64
    ]
  }
},
{
  "model": "app.memo",
  "pk": 209,
  "fields": {
    "title": "pip installでエラー",
    "content": "# New XPS 13でpip installするとエラーが出る\r\n\r\n```console\r\n'ProtocolError('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))': /simple/pip/\r\n```\r\n\r\n## 対処方法\r\n\r\nNew XPS 13にインストールされている「Killer Control Center」の「Advanced Stream Detect」を無効化するとエラーが出なくなる．",
    "pub_date": "2019-01-17T13:32:35.281Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 210,
  "fields": {
    "title": "WSLのUbuntu環境を日本語化",
    "content": "# aptのリポジトリを日本に変更\r\n\r\n```console\r\n$ sudo sed -i.bak -e \"s/http:\\/\\/archive\\.ubuntu\\.com/http:\\/\\/jp\\.archive\\.ubuntu\\.com/g\" /etc/apt/sources.list\r\n$ sudo apt update\r\n$ sudo apt upgrade\r\n```\r\n\r\n# 日本語言語パックのインストール\r\n\r\n```console\r\n$ sudo apt install language-pack-ja\r\n```\r\n\r\n# ロケールを日本語に設定（終わったら再起動）\r\n\r\n```console\r\n$ sudo update-locale LANG=ja_JP.UTF8\r\n```\r\n\r\n# タイムゾーンをJSTに設定\r\n\r\n```console\r\n$ sudo dpkg-reconfigure tzdata\r\n```\r\n\r\n# 日本語マニュアルのインストール\r\n\r\n```console\r\n$ sudo apt install manpages-ja manpages-ja-dev\r\n```",
    "pub_date": "2019-01-20T10:29:42.009Z",
    "user": 2,
    "tags": [
      1,
      37,
      67
    ]
  }
},
{
  "model": "app.memo",
  "pk": 211,
  "fields": {
    "title": "PC起動時にネットワークドライブが切断される問題の解決",
    "content": "# スクリプトからネットワークドライブの接続を行う\r\n\r\nネットワークドライブへの接続を行うvbsスクリプトをスタートアップから実行する．PCの再起動時などすでにネットワークドライブに接続できているときはエラーが出るため`On Error Resume Next`でエラーを無視するようにする．\r\n\r\n```\r\nWScript.sleep 3000\r\nSet objNetwork = CreateObject(\"WScript.Network\")\r\nOn Error Resume Next\r\nDim i\r\nFor i = 1 To 6\r\n    objNetWork.MapNetworkDrive \"X:\",\"\\\\192.168.11.2\\disk\"\r\n    objNetWork.MapNetworkDrive \"Y:\",\"\\\\192.168.11.10\\share\"\r\n    objNetWork.MapNetworkDrive \"Z:\",\"\\\\192.168.11.20\\share\"\r\n    WScript.sleep 10000\r\nNext\r\n```\r\n\r\n※ たまにうまく繋がらないから1分程度繰り返す",
    "pub_date": "2019-02-17T09:22:14.124Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 212,
  "fields": {
    "title": "パスワードの生成スクリプト",
    "content": "# ランダムな文字列を生成するPythonのOne-liner\r\n\r\n```bash\r\npython -c \"import random, string, pyperclip; pyperclip.copy(''.join([random.choice(string.ascii_letters + string.digits) for i in range(10)]))\"\r\n```",
    "pub_date": "2019-02-18T00:56:34.103Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 213,
  "fields": {
    "title": "保存されている全ての履歴を消す",
    "content": "# Git管理のファイルを履歴ごと削除する方法\r\n\r\n誤ってパスワードの記述されたファイルをコミットしてしまったときに，履歴も含めてファイルを削除する手順．\r\n\r\n```console\r\n$ git filter-branch --tree-filter \"rm -f [消したいファイルパス]\" HEAD\r\n$ git filter-branch --tree-filter \"rm -f -r [消したいディレクトリパス]\" HEAD\r\n```",
    "pub_date": "2019-02-28T03:59:54.089Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 214,
  "fields": {
    "title": "gccのパスの確認方法（インクルード・ライブラリ）",
    "content": "# インクルードパスの確認方法\r\n\r\n`-v`オプションをつけて確認する．\r\n\r\n```console\r\n$ gcc -v foo.c 2>&1 | less\r\n:\r\n#include \"...\" search starts here:\r\n#include <...> search starts here:\r\n C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\r\n C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\r\n C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\r\n C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\r\n C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\r\n C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\r\nEnd of search list.\r\n:\r\n```\r\n\r\n結果を見ると，例えばstdio.hなどはmingw64のインストールディレクトリ以下の`x86_64-w64-mingw32\\include`あたりが読み込まれていそう．\r\n\r\n# ライブラリパスの確認方法\r\n\r\n```console\r\n$ gcc -print-search-dirs\r\ninstall: C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/\r\nprograms: =C:/mingw64/bin/../libexec/gcc/x86_64-w64-mingw32/8.1.0/;C:/mingw64/bin/../libexec/gcc/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/bin/x86_64-w64-mingw32/8.1.0/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/bin/\r\nlibraries: =C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/;C:/mingw64/bin/../lib/gcc/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/lib/x86_64-w64-mingw32/8.1.0/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/lib/../lib/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../x86_64-w64-mingw32/8.1.0/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../lib/;C:/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/mingw/lib/x86_64-w64-mingw32/8.1.0/;C:/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/mingw/lib/../lib/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/lib/;C:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../;C:/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/mingw/lib/\r\n```\r\n\r\n`libraries:`にライブラリディレクトリが出力されている．",
    "pub_date": "2019-03-03T01:34:43.208Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 215,
  "fields": {
    "title": "VSCodeでのC++のビルドタスク設定",
    "content": "# tasks.jsonの設定内容\r\n\r\n`Makefile`はbuildディレクトリにある想定．問題ビューにビルドのエラーログを表示するときに，`\"fileLocation\": \"absolute\"`でファイルパスを絶対パスとして解析するように設定．`\"focus\": true`でビルドタスク実行後にターミナルにフォーカスが当たるように設定．\r\n\r\n`Ctrl`+`Shift`+`B`でビルドタスクを実行．\r\n\r\n```json\r\n{\r\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\r\n    // for the documentation about the tasks.json format\r\n    \"version\": \"2.0.0\",\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"build\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"make\",\r\n            \"args\": [\r\n                \"-C${workspaceFolder}/build\",\r\n                \"-j4\"\r\n            ],\r\n            \"group\": {\r\n                \"kind\": \"build\",\r\n                \"isDefault\": true\r\n            },\r\n            \"presentation\": {\r\n                \"focus\": true\r\n            },\r\n            \"problemMatcher\": {\r\n                \"base\": \"$gcc\",\r\n                \"fileLocation\": \"absolute\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n```",
    "pub_date": "2019-03-16T13:04:46.027Z",
    "user": 2,
    "tags": [
      1,
      8,
      16,
      55
    ]
  }
},
{
  "model": "app.memo",
  "pk": 216,
  "fields": {
    "title": "VMwareでsshがつながらないときの対応",
    "content": "# VMware上のLinuxでsshがつながらないときの対応\r\n\r\n## エラー内容\r\n\r\n下記のエラーでsshがつながらない\r\n\r\n```console\r\n$ ssh git@github.com\r\npacket_write_wait: Connection to 192.30.255.112 port 22: Broken pipe\r\n```\r\n\r\n## 回避策\r\n\r\n`~/.ssh/config`に下記を設定\r\n\r\n```\r\nHost *\r\n    IPQoS throughput\r\n```\r\n\r\n## 関連issue\r\n\r\n[https://github.com/vmware/open-vm-tools/issues/287](https://github.com/vmware/open-vm-tools/issues/287)",
    "pub_date": "2019-03-22T13:19:34.629Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 217,
  "fields": {
    "title": "再帰的にパーミッションを変更",
    "content": "# 再帰的にパーミッションを変更\r\n\r\n### すべて一括\r\n\r\n```console\r\n$ chmod -R a+x .\r\n```\r\n\r\n### ディレクトリのみ\r\n\r\n```console\r\n$ find . -type d -exec chmod 755 \\{\\} \\;\r\n```\r\n\r\n### ファイルのみ\r\n\r\n```console\r\n$ find . -type f -exec chmod 644 \\{\\} \\;\r\n$ find . -type f -name '*.sh' -exec chmod 644 \\{\\} \\;  # 拡張子指定\r\n```\r\n\r\n# WSLのデフォルトのパーミッションを変更\r\n\r\n`.bashrc`に以下を記述しておく\r\n\r\n```console\r\numask 022\r\n```",
    "pub_date": "2019-06-30T01:04:03Z",
    "user": 2,
    "tags": [
      1,
      52,
      67
    ]
  }
},
{
  "model": "app.memo",
  "pk": 218,
  "fields": {
    "title": "DataGridViewのダブルバッファリングを手軽に有効化する方法",
    "content": "# 継承なしでダブルバッファリングを有効化\r\n\r\nReflectionを使ってprotectedのメンバーを書きかえる．\r\n\r\n```cs\r\nusing System.Reflection;\r\n\r\ngrid.GetType().InvokeMember(\r\n    \"DoubleBuffered\",\r\n    BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty,\r\n    null,\r\n    grid,\r\n    new object[] { true });\r\n```",
    "pub_date": "2019-07-03T03:32:58.604Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 219,
  "fields": {
    "title": "Westonのビルド手順（Debian10版）",
    "content": "# 環境変数\r\n\r\n適当な名前（wlenv）で保存．\r\n\r\n*wlenv*\r\n\r\n```bash\r\nexport USRFS=$HOME/usrfs\r\nexport WLD=$USRFS\r\nexport LD_LIBRARY_PATH=$USRFS/lib\r\nexport PKG_CONFIG_PATH=$USRFS/lib/pkgconfig:$USRFS/share/pkgconfig\r\nexport ACLOCAL=\"aclocal -I $USRFS/share/aclocal\"\r\nexport PATH=$HOME/usrfs/bin:$PATH\r\n```\r\n\r\n# ビルド&インストール\r\n\r\n上記の環境変数を読み込んで，`~/usrfs`にビルド&インストール．\r\n\r\n*install.sh*\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nWORK_DIR=$(cd $(dirname $0) && pwd)\r\n\r\nmkdir -p ~/usrfs\r\nsudo apt install -y libxml++2.6-dev bison flex libmtdev-dev libudev-dev libevdev-dev libgtk-3-dev check libunwind-dev libwacom-dev libxcb-composite0-dev libpam0g-dev libgbm-dev autoconf libtool gettext\r\n\r\ncd $WORK_DIR\r\nsource ./wlenv\r\n\r\ngit clone http://anongit.freedesktop.org/git/wayland/wayland.git\r\ncd wayland\r\ngit checkout 1.17.0\r\n./autogen.sh --prefix=$WLD --disable-documentation\r\n./autogen.sh --prefix=$WLD --disable-documentation\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone http://anongit.freedesktop.org/git/mesa/mesa.git\r\ncd mesa\r\ngit checkout mesa-18.3.6\r\npyenv local 2.7.18\r\npip install mako\r\n./autogen.sh --prefix=$WLD --with-gallium-drivers=svga --with-dri-drivers= --enable-gles1 --enable-gles2 --enable-gallium-egl --enable-gbm --enable-shared-glapi --with-egl-platforms=x11,wayland\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone http://anongit.freedesktop.org/git/cairo\r\ncd cairo\r\ngit checkout 1.17.2\r\n./autogen.sh --prefix=$WLD --enable-gl --enable-xcb\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone git://anongit.freedesktop.org/wayland/libinput\r\ncd libinput\r\ngit checkout 1.8.4\r\n./autogen.sh --prefix=$WLD\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone http://anongit.freedesktop.org/git/wayland/weston.git\r\ncd weston\r\ngit checkout 2.0.0\r\necho \"diff --git a/libweston/weston-launch.c b/libweston/weston-launch.c\r\nindex 140fde1d..eecb911a 100644\r\n--- a/libweston/weston-launch.c\r\n+++ b/libweston/weston-launch.c\r\n@@ -42,6 +42,7 @@\r\n #include <sys/wait.h>\r\n #include <sys/socket.h>\r\n #include <sys/signalfd.h>\r\n+#include <sys/sysmacros.h>\r\n #include <signal.h>\r\n #include <unistd.h>\r\n #include <fcntl.h>\" > weston-launch.patch\r\npatch -p1 < weston-launch.patch\r\n./autogen.sh --prefix=$WLD\r\nmake -j4\r\nsudo make install\r\ncp ivi-shell/weston.ini ~/.config/.\r\ncd $WORK_DIR\r\n```",
    "pub_date": "2019-07-09T06:55:37.620Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 220,
  "fields": {
    "title": "WindowsアップデートやストアアプリのインストールのためのProxy設定",
    "content": "# WinHTTP設定を行う\r\n\r\ncmdを管理者権限で起動して，以下のコマンドを実行する．\r\n\r\n```console\r\n> netsh winhttp show proxy                # 現在のWinHTTP設定を確認\r\n> netsh winhttp set proxy proxy-server=\"192.168.0.1:15080\" bypass-list=\";*.microsoft.com;*.foo.ne\"\r\n> netsh winhttp import proxy source=ie    # InternetExplorerの設定を反映\r\n> netsh winhttp reset proxy               # WinHTTP設定をリセット\r\n```",
    "pub_date": "2019-07-09T07:27:41.008Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 221,
  "fields": {
    "title": "npmでよく使うコマンド",
    "content": "# npmでよく使うコマンドを整理\r\n\r\n`npm ci`が`pipenv sync`相当のインストール操作\r\n\r\n```console\r\n$ npm install\r\n$ npm install --save <package-name>\r\n$ npm install --save-dev <package-name>\r\n$ npm update\r\n$ npm uninstall\r\n$ npm list\r\n$ npm list --depth=0\r\n$ npm ci    # package-lock.jsonの固定バージョンをインストール\r\n```",
    "pub_date": "2019-08-04T06:21:35.366Z",
    "user": 2,
    "tags": [
      1,
      65
    ]
  }
},
{
  "model": "app.memo",
  "pk": 222,
  "fields": {
    "title": "VMwareでホストとフォルダを共有",
    "content": "# ホストとのフォルダ共有\r\n\r\nVMwareのフォルダ共有を行った後にDebian側で下記コマンドを実行\r\n\r\n```console\r\n$ sudo mkdir /mnt/hgfs\r\n$ sudo vmhgfs-fuse .host:/ /mnt/hgfs\r\n$ echo '.host:/ /mnt/hgfs fuse.vmhgfs-fuse allow_other 0 0' | sudo tee -a /etc/fstab  # 自動で共有\r\n```\r\n\r\n# 所有権とパーミッションの変更\r\n\r\n共有フォルダ内のファイルはroot権限になっているので，ファイルのコピー後に所有権とパーミッションを変更．\r\n\r\n```console\r\n$ sudo chown user:user file_name\r\n$ chmod a-x file_name\r\n```",
    "pub_date": "2019-09-01T00:38:40.135Z",
    "user": 2,
    "tags": [
      52,
      66
    ]
  }
},
{
  "model": "app.memo",
  "pk": 223,
  "fields": {
    "title": "IPアドレスを設定するbatファイル",
    "content": "# batファイルからIPアドレスを設定\r\n\r\n管理者権限で実行する必要があるので，ショートカットを作成しておくと便利．ついでにショートカットからコマンドライン引数を渡して，3通りのIPアドレスを指定している．\r\n\r\n```bash\r\n@echo off\r\n\r\nif %1 == 1 (\r\n    netsh interface ip set address \"Wi-Fi\" static 192.168.1.16 255.255.255.0 192.168.1.246\r\n    netsh interface ip set dns \"Wi-Fi\" static 192.168.9.101 primary\r\n    reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /f /v ProxyEnable /t reg_dword /d 1\r\n) else if %1 == 20 (\r\n    netsh interface ip set address \"Wi-Fi\" static 192.168.20.16 255.255.255.0 192.168.20.254\r\n    netsh interface ip set dns \"Wi-Fi\" static 192.168.9.101 primary\r\n    reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /f /v ProxyEnable /t reg_dword /d 1\r\n) else (\r\n    netsh interface ip set address \"Wi-Fi\" dhcp\r\n    netsh interface ip set dns \"Wi-Fi\" dhcp\r\n    reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /f /v ProxyEnable /t reg_dword /d 0\r\n)\r\n\r\ntimeout 5\r\nipconfig\r\npause\r\n```",
    "pub_date": "2019-11-22T01:21:59.061Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 224,
  "fields": {
    "title": "Hyper-VのON/OFF切り替え",
    "content": "# コマンドプロンプト（管理者）から以下のコマンドを実行\r\n\r\n設定の反映は再起動後から有効\r\n\r\n```console\r\n> bcdedit    # 現在のステータス確認\r\n：\r\nnx                      OptIn\r\nbootmenupolicy          Standard\r\nhypervisorlaunchtype    Off\r\n> bcdedit /set hypervisorlaunchtype auto    # 再起動後ON\r\n> bcdedit /set hypervisorlaunchtype off     # 再起動後OFF\r\n```\r\n\r\nbatファイルでON/OFF切り替え\r\n\r\n```bash\r\n@echo off\r\n\r\nif %1 == 1 (\r\n    bcdedit /set hypervisorlaunchtype auto\r\n) else (\r\n    bcdedit /set hypervisorlaunchtype off\r\n)\r\n```",
    "pub_date": "2020-01-19T11:08:29.481Z",
    "user": 2,
    "tags": [
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 225,
  "fields": {
    "title": "WinMergeを使って差分レポートの自動出力",
    "content": "# PythonでWinMergeを利用して差分レポートをHTML出力\r\n\r\n```\r\nfrom subprocess import check_call\r\n\r\ndef output_diff_html(a_file_name, b_file_name, out_file_name):\r\n    try:\r\n        winmerge = '\"C:/Program Files/WinMerge/WinMergeU.exe\"'\r\n        cmd = f'{winmerge} {a_file_name} {b_file_name} /minimize /noninteractive /u /or {out_file_name}'\r\n        check_call(cmd)\r\n    except Exception as ex:\r\n        print(ex)\r\n\r\ndef main():\r\n    output_diff_html('a.txt', 'b.txt', 'result.html')\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2020-03-21T06:07:59.345Z",
    "user": 2,
    "tags": [
      1,
      2,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 226,
  "fields": {
    "title": "Pythonの関数の呼び出し履歴",
    "content": "# inspect.stackを使ってスタックトレースを確認\r\n\r\nファイル名と行番号と関数名を表示\r\n\r\n```py\r\nimport inspect\r\n\r\ndef f1():\r\n    f2()\r\n\r\ndef f2():\r\n    f3()\r\n\r\ndef f3():\r\n    for s in inspect.stack():\r\n        print(f'file: {s.filename}, line: {s.lineno}, func: {s.function}')\r\n\r\ndef main():\r\n    f1()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n実行結果\r\n\r\n```console\r\nfile: spam.py, line: 10, func: f3\r\nfile: spam.py, line: 7, func: f2\r\nfile: spam.py, line: 4, func: f1\r\nfile: spam.py, line: 14, func: main\r\nfile: spam.py, line: 17, func: <module>\r\n```",
    "pub_date": "2020-03-27T01:24:36.999Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 227,
  "fields": {
    "title": "bashプロンプトのカスタマイズ",
    "content": "# 間違ったコマンドを入力すると顔が変わるプロンプト\r\n\r\n> もっともおもしろいプロンプトのひとつだが、使いやすくもあるプロンプト。コマンドの実行が成功したか失敗したかで、プロンプトに表示されるアスキーアートの顔を変更するというもの。コマンドの実行に失敗すると悲しい顔が表示される。成功すると元に戻る。\r\n\r\n```bash\r\nPS1=\"\\`if [ \\$? = 0 ]; then echo \\[\\e[33m\\]^_^\\[\\e[0m\\]; else echo \\[\\e[31m\\]O_O\\[\\e[0m\\]; fi\\`[\\u@\\h:\\w]\\\\$ \"\r\n```\r\n\r\n# 間違ったコマンドを入力すると色が変わるプロンプト\r\n\r\n> アイディアはコマンドの成功の可否で表示する顔を変えるというものだが、これは顔の代わりに色を変更する。また、履歴に記憶されているコマンドの実行回数や、パスの表示を短縮表記からフルパス表記に変更している。\r\n\r\n```bash\r\nPROMPT_COMMAND='PS1=\"\\[\\033[0;33m\\][\\!]\\`if [[ \\$? = \"0\" ]]; then echo \"\\\\[\\\\033[32m\\\\]\"; else echo \"\\\\[\\\\033[31m\\\\]\"; fi\\`[\\u.\\h: \\`if [[ `pwd|wc -c|tr -d \" \"` > 18 ]]; then echo \"\\\\W\"; else echo \"\\\\w\"; fi\\`]\\$\\[\\033[0m\\] \"; echo -ne \"\\033]0;`hostname -s`:`pwd`\\007\"'\r\n```\r\n\r\n# 複数行プロンプト\r\n\r\n> 複数行にわたってプロンプトを表示し、より多くの情報を出力する。日付、時間、フルパス、ユーザ名、ホスト名、端末名、カレントディレクトリにあるディレクトリやファイルの総数、カレントディレクトリにあるディレクトリやファイルの総合サイズが表示される。\r\n\r\n```bash\r\nPS1=\"\\n\\[\\033[35m\\]\\$(date)\\n\\[\\033[32m\\]\\w\\n\\[\\033[1;31m\\]\\u@\\h: \\[\\033[1;34m\\]\\$(tty | sed -e 's:/dev/::'): \\[\\033[1;36m\\]\\$(ls -1 | wc -l | sed 's: ::g') files \\[\\033[1;33m\\]\\$(ls -lah | grep -m 1 total | sed 's/total //')b\\[\\033[0m\\] -> \\[\\033[0m\\]\"\r\n```\r\n\r\n# データごとに色を変えて見やすくしたプロンプト\r\n\r\n> 時刻、ユーザ名、ホスト名、カレントディレクトリを表示するミニマムなプロンプト。ほかのプロンプトのような特徴はないが、うまく色を活用して短いなかでも視認性をあげている。\r\n\r\n```bash\r\nPS1=\"\\[\\033[35m\\]\\t\\[\\033[m\\]-\\[\\033[36m\\]\\u\\[\\033[m\\]@\\[\\033[32m\\]\\h:\\[\\033[33;1m\\]\\w\\[\\033[m\\]\\$ \"\r\n```\r\n\r\n# フルパスを表示する複数行プロンプト\r\n\r\n> ユーザ名とカレントディレクトリのフルパスを表示するシンプルでナイスな複数行プロンプト。\r\n\r\n```bash\r\nPS1=\"\\[\\033[32m\\][\\w]\\[\\033[0m\\]\\n\\[\\033[1;36m\\]\\u\\[\\033[1;33m\\]-> \\[\\033[0m\\]\"\r\n```\r\n\r\n# バックグラウンドジョブ数を表示する複数行プロンプト\r\n\r\n> 1行目はユーザ名とホスト名、カレントディレクトリのフルパス、2行目はコマンドの履歴数とバックグラウンドジョブの総数を表示する複数行プロンプト。\r\n\r\n```bash\r\nPS1='\\[\\e[1;32m\\]\\u@\\H:\\[\\e[m\\] \\[\\e[1;37m\\]\\w\\[\\e[m\\]\\n\\[\\e[1;33m\\]hist:\\! \\[\\e[0;33m\\] \\[\\e[1;31m\\]jobs:\\j \\$\\[\\e[m\\] \r\n```\r\n\r\n# カレントディレクトリ情報を表示する複数行プロンプト\r\n\r\n> 洗練されたデザインの複数行プロンプト。ユーザ名、ホスト名、ジョブ数、日付、時刻、カレントディレクトリのフルパス、カレントディレクトリにあるファイルやディレクトリの総数、カレントディレクトリにあるファイルやディレクトリの総合サイズが表示される。\r\n\r\n```bash\r\nPS1=\"\\n\\[\\e[30;1m\\]┌(\\[\\e[34;1m\\]\\u@\\h\\[\\e[30;1m\\])-(\\[\\e[34;1m\\]\\j\\[\\e[30;1m\\])-(\\[\\e[34;1m\\]\\@ \\d\\[\\e[30;1m\\])->\\[\\e[30;1m\\]\\n└─(\\[\\e[32;1m\\]\\w\\[\\e[30;1m\\])-(\\[\\e[32;1m\\]\\$(ls -1 | wc -l | sed 's: ::g') files, \\$(ls -lah | grep -m 1 total | sed 's/total //')b\\[\\e[30;1m\\])--> \\[\\e[0m\\]\"\r\n```\r\n\r\n# Joshua Price氏の使っているプロンプト\r\n\r\n> Joshua Price氏が使っているプロンプト。ひとつ前の複数行プロンプトをベースにしつつ、よりシンプルで場所をとらないものへ調整されている。\r\n\r\n```bash\r\nPS1=\"\\n\\[\\e[32;1m\\](\\[\\e[37;1m\\]\\u\\[\\e[32;1m\\])-(\\[\\e[37;1m\\]jobs:\\j\\[\\e[32;1m\\])-(\\[\\e[37;1m\\]\\w\\[\\e[32;1m\\])\\n(\\[\\e[37;1m\\]! \\!\\[\\e[32;1m\\])-> \\[\\e[0m\\]\"\r\n```",
    "pub_date": "2020-04-01T13:51:19.079Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 228,
  "fields": {
    "title": "vimのおすすめ設定",
    "content": "# $HOME/.vimrcに以下を設定\r\n\r\n```bash\r\nset fenc=utf-8\r\nset nobackup\r\nset noswapfile\r\nset autoread\r\nset hidden\r\nset showcmd\r\n\r\nset number\r\nset cursorline\r\nset virtualedit=onemore\r\nset smartindent\r\nset visualbell\r\nset showmatch\r\nset laststatus=2\r\nset wildmode=list:longest\r\nnnoremap j gj\r\nnnoremap k gk\r\nsyntax enable\r\ncolorscheme koehler\r\nset background=dark\r\n\r\nset list listchars=tab:\\▸\\-\r\nset expandtab\r\nset tabstop=4\r\nset shiftwidth=4\r\n\r\nset ignorecase\r\nset smartcase\r\nset incsearch\r\nset wrapscan\r\nset hlsearch\r\nnmap <Esc><Esc> :nohlsearch<CR><Esc>\r\n```",
    "pub_date": "2020-04-19T06:49:08.880Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 229,
  "fields": {
    "title": "CMakeLists.txtの最低限の記述",
    "content": "# CMakeLists.txtの基本的な内容\r\n\r\n```\r\ncmake_minimum_required(VERSION 3.0.0)\r\nproject(eglsample VERSION 0.1.0)\r\n\r\nset(CMAKE_CONFIGURATION_TYPES \"Debug;Release\" CACHE STRING \"limited configs\" FORCE)\r\n\r\nadd_executable(eglsample\r\n    eglsample.cpp\r\n)\r\n\r\ntarget_compile_features(eglsample\r\n    PRIVATE cxx_std_17\r\n)\r\n\r\nfind_package(X11 REQUIRED)\r\nfind_package(PNG REQUIRED)\r\nfind_library(EGL_LIBRARY NAMES EGL)\r\nfind_library(GLES2_LIBRARY NAMES GLESv2)\r\n\r\ntarget_link_libraries(eglsample\r\n    ${X11_LIBRARIES}\r\n    ${EGL_LIBRARY}\r\n    ${GLES2_LIBRARY}\r\n    ${PNG_LIBRARIES}\r\n)\r\n```\r\n\r\n# ビルド（Release/Debug）\r\n\r\n```\r\n$ mkdir build && cd build\r\n$ cmake -DCMAKE_BUILD_TYPE=Release(Debug) ..\r\n$ cmake --build .\r\n```",
    "pub_date": "2020-06-03T15:07:00.865Z",
    "user": 2,
    "tags": [
      1,
      8,
      16
    ]
  }
},
{
  "model": "app.memo",
  "pk": 230,
  "fields": {
    "title": "MSYS + MinGW (64bit) 環境の構築",
    "content": "# MSYS2のインストール\r\n\r\n[https://www.msys2.org](https://www.msys2.org)\r\n\r\n```console\r\n$ pacman -Syuu\r\n$ pacman -S base-devel msys2-devel mingw-w64-x86_64-toolchain\r\n```\r\n\r\n## 環境変数（Path）\r\n\r\n```text\r\nC:\\msys64\\mingw64\\bin\r\nC:\\msys64\\usr\\bin\r\n```",
    "pub_date": "2020-06-20T05:03:56.526Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 231,
  "fields": {
    "title": "プロセスが使用しているポートの一覧表示",
    "content": "# プロセスが使用しているポートを表示する\r\n\r\n```console\r\n$ lsof -i\r\nCOMMAND     PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\r\nvivaldi-b  4061 tsutsu  189u  IPv4  42489      0t0  UDP 224.0.0.251:mdns \r\nvivaldi-b  4137 tsutsu   34u  IPv4  44316      0t0  UDP 224.0.0.251:mdns \r\nvivaldi-b  4137 tsutsu   43u  IPv4 314001      0t0  TCP debian:34174->151.101.228.157:https (ESTABLISHED)\r\nvivaldi-b  4137 tsutsu   46u  IPv4  71782      0t0  UDP 224.0.0.251:mdns \r\nvivaldi-b  4137 tsutsu   47u  IPv6 321651      0t0  TCP localhost:35158->localhost:3000 (ESTABLISHED)\r\nvivaldi-b  4137 tsutsu   49u  IPv4  43943      0t0  TCP debian:45956->cache.google.com:http (CLOSE_WAIT)\r\nvivaldi-b  4137 tsutsu   66u  IPv4 312670      0t0  TCP debian:59778->151.101.229.19:https (ESTABLISHED)\r\nvivaldi-b  4137 tsutsu   80u  IPv4 314823      0t0  TCP debian:42224->104.244.42.5:https (ESTABLISHED)\r\nvivaldi-b  4137 tsutsu   84u  IPv4 313980      0t0  TCP debian:57192->104.244.42.131:https (ESTABLISHED)\r\nvivaldi-b  4137 tsutsu   90u  IPv4 312131      0t0  TCP debian:52512->210.132.245.66:http (ESTABLISHED)\r\nnode      20294 tsutsu   21u  IPv6 318168      0t0  TCP *:3000 (LISTEN)\r\nnode      20294 tsutsu   23u  IPv6 318206      0t0  TCP localhost:3000->localhost:35158 (ESTABLISHED)\r\n```\r\n\r\n# ポート番号から使用しているプログラムを表示する\r\n\r\n```console\r\n$ lsof -i:3000\r\nCOMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\r\nnode    20413 tsutsu   21u  IPv6 319411      0t0  TCP *:3000 (LISTEN)\r\n```",
    "pub_date": "2020-10-04T15:36:36.429Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 232,
  "fields": {
    "title": "Gitの管理外ファイルの削除",
    "content": "# git cleanのオプション\r\n\r\n* -n（消す予定のファイルを確認）\r\n* -f（削除の実施）\r\n* -d（追跡されていないディレクトリも削除）\r\n* -x（gitignore に設定した無視ファイルも削除）\r\n* -X（gitignore に設定した無視ファイルだけを削除）\r\n\r\n```console\r\n$ git clean -nfdx\r\nWould remove .coverage\r\nWould remove .vscode/\r\nWould remove media/identicon/YusukeTsutsumi.png\r\nWould remove media/identicon/admin.png\r\nWould remove media/identicon/guest.png\r\nWould remove media/identicon/tsutsu.png\r\nWould remove media/identicon/tsutsu09282.png\r\nWould remove staticfiles/\r\n```",
    "pub_date": "2020-10-25T03:44:29.530Z",
    "user": 2,
    "tags": [
      1,
      32
    ]
  }
},
{
  "model": "app.memo",
  "pk": 233,
  "fields": {
    "title": "Pythonでのasync/await",
    "content": "# async/awaitを使った非同期処理\r\n\r\n`loop.run_in_executor()`を使うと，通常の関数をawaitできるようにすることが可能．このコードだと`run_until_complete`のほうが先に終わってしまうとうまく動かないので注意．\r\n\r\n```py\r\nimport asyncio\r\nimport logging\r\nimport time\r\n\r\nformatter = '%(levelname)s : %(asctime)s : %(message)s'\r\nlogging.basicConfig(level=logging.INFO, format=formatter)\r\n\r\ndef my_sleep(secs):\r\n    logging.info(f'start sleep. secs:{secs}')\r\n    time.sleep(secs)\r\n    logging.info(f'stop sleep. secs:{secs}')\r\n    return secs\r\n\r\nasync def my_sleep_async(secs):\r\n    loop = asyncio.get_event_loop()\r\n    return await loop.run_in_executor(None, my_sleep, secs)  # run_in_executorでmy_sleepをawaitableにする\r\n\r\ndef main():\r\n    logging.info('start!!!')\r\n    loop = asyncio.get_event_loop()\r\n    r1 = loop.create_task(my_sleep_async(1))              # create_taskの戻り値はTask\r\n    r2 = loop.run_until_complete(my_sleep_async(2))       # run_until_completeの戻り値はmy_sleep_asyncの結果\r\n    logging.info(f'stop!!! r1: {r1.result()}, r2: {r2}')  # r1.result()でmy_sleep_asyncの結果がとれる\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n```console\r\nINFO : 2020-10-28 16:53:50,838 : start!!!\r\nINFO : 2020-10-28 16:53:50,840 : start sleep. secs:1\r\nINFO : 2020-10-28 16:53:50,840 : start sleep. secs:2\r\nINFO : 2020-10-28 16:53:51,841 : stop sleep. secs:1\r\nINFO : 2020-10-28 16:53:52,843 : stop sleep. secs:2\r\nINFO : 2020-10-28 16:53:52,843 : stop!!! r1: 1, r2: 2\r\n```\r\n\r\n# async/awaitを使った並列処理\r\n\r\n`asyncio.gather()`を使って書くと，より並列処理を自然に書ける．終わる順番は関係なく複数の並列処理の終了を待つことができる．\r\n\r\n```py\r\nimport asyncio\r\nimport logging\r\nimport time\r\n\r\nformatter = '%(levelname)s : %(asctime)s : %(message)s'\r\nlogging.basicConfig(level=logging.INFO, format=formatter)\r\n\r\ndef my_sleep(secs):\r\n    logging.info(f'start sleep. secs:{secs}')\r\n    time.sleep(secs)\r\n    logging.info(f'stop sleep. secs:{secs}')\r\n    return secs\r\n\r\nasync def my_sleep_async(secs):\r\n    loop = asyncio.get_event_loop()\r\n    return await loop.run_in_executor(None, my_sleep, secs)  # returnでmy_sleepの結果を返す\r\n\r\ndef main():\r\n    logging.info('start!!!')\r\n    gather = asyncio.gather(my_sleep_async(1), my_sleep_async(2))\r\n    loop = asyncio.get_event_loop()\r\n    r1, r2 = loop.run_until_complete(gather)\r\n    logging.info(f'stop!!! r1: {r1}, r2: {r2}')\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n```console\r\nINFO : 2020-10-28 17:05:09,349 : start!!!\r\nINFO : 2020-10-28 17:05:09,351 : start sleep. secs:1\r\nINFO : 2020-10-28 17:05:09,351 : start sleep. secs:2\r\nINFO : 2020-10-28 17:05:10,353 : stop sleep. secs:1\r\nINFO : 2020-10-28 17:05:11,354 : stop sleep. secs:2\r\nINFO : 2020-10-28 17:05:11,355 : stop!!! r1: 1, r2: 2\r\n```\r\n\r\n# asyncioのAPIを使った書き方\r\n\r\n`asyncio.run()`や`asyncio.create_task()`を使って書くとイベントループを用意せずに簡潔に書くことができる．\r\n\r\n```py\r\nimport asyncio\r\nimport logging\r\nimport time\r\n\r\nformatter = '%(levelname)s : %(asctime)s : %(message)s'\r\nlogging.basicConfig(level=logging.INFO, format=formatter)\r\n\r\ndef my_sleep(secs):\r\n    logging.info(f'start sleep. secs:{secs}')\r\n    time.sleep(secs)\r\n    logging.info(f'stop sleep. secs:{secs}')\r\n    return secs\r\n\r\nasync def my_sleep_async(secs):\r\n    loop = asyncio.get_event_loop()\r\n    return await loop.run_in_executor(None, my_sleep, secs)\r\n\r\nasync def main_async():\r\n    t1 = asyncio.create_task(my_sleep_async(1))\r\n    t2 = asyncio.create_task(my_sleep_async(2))\r\n    return await t1, await t2  # returnでmy_sleepの結果をTupleで返す\r\n\r\ndef main():\r\n    logging.info('start!!!')\r\n    r1, r2 = asyncio.run(main_async())\r\n    logging.info(f'stop!!! r1: {r1}, r2: {r2}')\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n```console\r\nINFO : 2020-10-28 17:20:27,202 : start!!!\r\nINFO : 2020-10-28 17:20:27,204 : start sleep. secs:1\r\nINFO : 2020-10-28 17:20:27,208 : start sleep. secs:2\r\nINFO : 2020-10-28 17:20:28,206 : stop sleep. secs:1\r\nINFO : 2020-10-28 17:20:29,213 : stop sleep. secs:2\r\nINFO : 2020-10-28 17:20:29,214 : stop!!! r1: 1, r2: 2\r\n```\r\n\r\n# 各コルーチンが終了した時点で即座に結果を受け取る\r\n\r\n`asyncio.as_completed`を使ってそれぞれの終了時に戻り値を受け取りつつ，すべてのコルーチンの完了を待ち受けることができる．\r\n\r\n```py\r\nimport asyncio\r\nimport logging\r\nimport time\r\n\r\nformatter = '%(levelname)s : %(asctime)s : %(message)s'\r\nlogging.basicConfig(level=logging.INFO, format=formatter)\r\n\r\ndef my_sleep(secs):\r\n    logging.info(f'start sleep. secs:{secs}')\r\n    time.sleep(secs)\r\n    logging.info(f'stop sleep. secs:{secs}')\r\n    return secs\r\n\r\nasync def my_sleep_async(secs):\r\n    loop = asyncio.get_event_loop()\r\n    return await loop.run_in_executor(None, my_sleep, secs)\r\n\r\nasync def fmap(futers):\r\n    for f in asyncio.as_completed(futers):  # 終了したコルーチンから受け取る\r\n        result = await f\r\n        logging.info(f'result: {result}')\r\n\r\ndef main():\r\n    logging.info('start!!!')\r\n    futer1 = asyncio.ensure_future(my_sleep_async(1))\r\n    futer2 = asyncio.ensure_future(my_sleep_async(2))\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(fmap([futer1, futer2]))\r\n    logging.info('stop!!!')\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n```console\r\nINFO : 2020-10-28 17:32:42,783 : start!!!\r\nINFO : 2020-10-28 17:32:42,784 : start sleep. secs:1\r\nINFO : 2020-10-28 17:32:42,785 : start sleep. secs:2\r\nINFO : 2020-10-28 17:32:43,787 : stop sleep. secs:1\r\nINFO : 2020-10-28 17:32:43,788 : result: 1\r\nINFO : 2020-10-28 17:32:44,788 : stop sleep. secs:2\r\nINFO : 2020-10-28 17:32:44,788 : result: 2\r\nINFO : 2020-10-28 17:32:44,788 : stop!!!\r\n```\r\n# 参考URL\r\n\r\n下記のブログがPythonの非同期処理について詳しく書いてある．\r\n\r\n[https://note.crohaco.net/2019/python-asyncio/](https://note.crohaco.net/2019/python-asyncio/)",
    "pub_date": "2020-10-28T08:36:26.921Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 234,
  "fields": {
    "title": "Windows XP in React",
    "content": "# Windows XPのデスクトップをReactで再現\r\n\r\n🏁 Web based Windows XP desktop recreation.\r\n\r\n[https://winxp.now.sh](https://winxp.now.sh)\r\n\r\n![image](https://github.com/ShizukuIchi/winXP/raw/master/demo/demo.gif)",
    "pub_date": "2020-11-03T04:58:35.039Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 235,
  "fields": {
    "title": "Windows TerminalでCmderを使う設定",
    "content": "# guidを発行\r\n\r\nPowerShellでguidを発行\r\n\r\n```console\r\nPS > [guid]::NewGuid()\r\n```\r\n\r\n# Windows TerminalにCmderを追加\r\n\r\nCmderを追加してデフォルトのシェルに設定．ついでにGit Bashと背景透過やカラーテーマなどを設定．\r\n\r\n```json\r\n{\r\n    \"defaultProfile\": \"{30c5d884-3168-4c08-9182-1134fa529caf}\",\r\n    \"profiles\": {\r\n        \"defaults\": {\r\n          \"fontSize\": 10,\r\n          \"useAcrylic\": true,\r\n          \"acrylicOpacity\": 0.8,\r\n          \"colorScheme\": \"Tango Dark\",\r\n          \"cursorShape\":\"filledBox\"\r\n        },\r\n        \"list\": [\r\n          {\r\n            \"guid\": \"{30c5d884-3168-4c08-9182-1134fa529caf}\",\r\n            \"hidden\": false,\r\n            \"name\": \"Cmder\",\r\n            \"icon\": \"%USERPROFILE%\\\\cmder\\\\icons\\\\cmder.ico\",\r\n            \"startingDirectory\": \"%USERPROFILE%\",\r\n            \"commandline\": \"cmd.exe /k %USERPROFILE%\\\\cmder\\\\vendor\\\\init.bat\",\r\n            \"colorScheme\": \"Monokai Cmder\"\r\n          },\r\n          {\r\n            \"guid\": \"{f1b8dfad-637e-422a-a353-c06de4efdebc}\",\r\n            \"hidden\": false,\r\n            \"name\": \"Git Bash\",\r\n            \"icon\": \"C:\\\\Program Files\\\\Git\\\\mingw64\\\\share\\\\git\\\\git-for-windows.ico\",\r\n            \"startingDirectory\": \"%USERPROFILE%\",\r\n            \"commandline\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe -l\",\r\n            \"colorScheme\": \"Hybrid\"\r\n          }\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n# Windows Terminalのテーマ\r\n\r\n`Monokai Cmder`や`Hybrid`などのテーマはこちらから．\r\n\r\n[https://windowsterminalthemes.dev](https://windowsterminalthemes.dev)",
    "pub_date": "2020-11-11T16:50:25.997Z",
    "user": 2,
    "tags": [
      1,
      37
    ]
  }
},
{
  "model": "app.memo",
  "pk": 236,
  "fields": {
    "title": "Westonのビルド手順（新リポジトリ版）",
    "content": "# 環境変数\r\n\r\n適当な名前（wlenv）で保存．\r\n\r\n*wlenv*\r\n\r\n```bash\r\nexport USRFS=$HOME/usrfs\r\nexport WLD=$USRFS\r\nexport LD_LIBRARY_PATH=$USRFS/lib\r\nexport PKG_CONFIG_PATH=$USRFS/lib/pkgconfig:$USRFS/share/pkgconfig\r\nexport ACLOCAL=\"aclocal -I $USRFS/share/aclocal\"\r\nexport PATH=$HOME/usrfs/bin:$PATH\r\n```\r\n\r\n# ビルド&インストール\r\n\r\n上記の環境変数を読み込んで，`~/usrfs`にビルド&インストール．\r\n\r\n*install.sh*\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nWORK_DIR=$(cd $(dirname $0) && pwd)\r\n\r\nmkdir -p ~/usrfs\r\nsudo apt install -y libxml++2.6-dev bison flex libmtdev-dev libudev-dev libevdev-dev libgtk-3-dev check libunwind-dev libwacom-dev libxcb-composite0-dev libpam0g-dev libgbm-dev autoconf libtool gettext libx11-xcb-dev\r\n\r\ncd $WORK_DIR\r\nsource ./wlenv\r\n\r\ngit clone https://github.com/wayland-project/wayland.git\r\ncd wayland\r\ngit checkout 1.17.0\r\n./autogen.sh --prefix=$WLD --disable-documentation\r\n./autogen.sh --prefix=$WLD --disable-documentation\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone https://gitlab.freedesktop.org/mesa/mesa.git\r\ncd mesa\r\ngit checkout mesa-18.3.6\r\npyenv local 2.7.18\r\npip install mako\r\n./autogen.sh --prefix=$WLD --with-gallium-drivers=svga --with-dri-drivers= --enable-gles1 --enable-gles2 --enable-gallium-egl --enable-gbm --enable-shared-glapi --with-egl-platforms=x11,wayland\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone https://github.com/freedesktop/cairo.git\r\ncd cairo\r\ngit checkout 1.17.2\r\n./autogen.sh --prefix=$WLD --enable-gl --enable-xcb\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone https://github.com/wayland-project/libinput.git\r\ncd libinput\r\ngit checkout 1.8.4\r\n./autogen.sh --prefix=$WLD\r\nmake -j4\r\nmake install\r\ncd $WORK_DIR\r\n\r\ngit clone https://github.com/wayland-project/weston.git\r\ncd weston\r\ngit checkout 2.0.0\r\necho \"diff --git a/libweston/weston-launch.c b/libweston/weston-launch.c\r\nindex 140fde1d..eecb911a 100644\r\n--- a/libweston/weston-launch.c\r\n+++ b/libweston/weston-launch.c\r\n@@ -42,6 +42,7 @@\r\n #include <sys/wait.h>\r\n #include <sys/socket.h>\r\n #include <sys/signalfd.h>\r\n+#include <sys/sysmacros.h>\r\n #include <signal.h>\r\n #include <unistd.h>\r\n #include <fcntl.h>\" > weston-launch.patch\r\npatch -p1 < weston-launch.patch\r\n./autogen.sh --prefix=$WLD\r\nmake -j4\r\nsudo make install\r\ncp ivi-shell/weston.ini ~/.config/.\r\ncd $WORK_DIR\r\n```",
    "pub_date": "2020-11-14T05:30:47.529Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 237,
  "fields": {
    "title": "WSL2でaptが使えなくなったときの対処法",
    "content": "# 問題の原因\r\n\r\nDNSの名前解決ができていない．apt以外にもgit cloneなどネットワークへの接続に失敗してしまう．\r\n\r\n# 解決方法\r\n\r\nDNSサーバの設定を変更する．例えばGoogleの`8.8.8.8`を指定すればOK．\r\n\r\nまずは`resolv.conf`の生成をオフにする．\r\n\r\n```bash\r\n# /etc/wsl.conf\r\n[network]\r\ngenerateResolvConf = false\r\n```\r\n\r\n次にWindowsからいったんWSLをシャットダウンする．\r\n\r\n```console\r\n$ wsl --shutdown\r\n```\r\n\r\nその後，再度WSLに入って`resolv.conf`を編集する．もともとシンボリックリンクがはってあるので，削除してから新規にファイルを作成する．\r\n\r\n```console\r\n$ cd /etc/\r\n$ sudo unlink resolv.conf\r\n$ sudo vim resolv.conf\r\n```\r\n\r\n```bash\r\n# /etc/resolv.conf\r\n# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:\r\n# [network]\r\n# generateResolvConf = false\r\n# nameserver 172.30.64.1\r\nnameserver 8.8.8.8\r\n```",
    "pub_date": "2020-11-20T04:10:48.722Z",
    "user": 2,
    "tags": [
      1,
      37,
      67
    ]
  }
},
{
  "model": "app.memo",
  "pk": 238,
  "fields": {
    "title": "UbuntuでディスプレイなしのPCにVNC接続する設定",
    "content": "# ダミービデオドライバのインストール\r\n\r\nディスプレイを接続せずにVNCで画面表示させるために，ダミーのビデオドライバを使って X.Org（X11）を動作させる．\r\n\r\n```console\r\n$ sudo apt install xserver-xorg-video-dummy\r\n```\r\n\r\n# VNC表示画面設定ファイル\r\n\r\nVNCで接続した画面の表示設定をファイルに保存する．ファイル名の数字は優先順位．\r\n\r\n```console\r\n$ cat /usr/share/X11/xorg.conf.d/80-dummy.conf\r\nSection \"Device\"\r\n    Identifier  \"Configured Video Device\"\r\n    Driver      \"dummy\"\r\n    VideoRam 256000\r\nEndSection\r\n \r\nSection \"Monitor\"\r\n    Identifier  \"Configured Monitor\"\r\n    HorizSync 5.0 - 1000.0\r\n    VertRefresh 5.0 - 200.0\r\n    # 1920x1080 59.96 Hz (CVT 2.07M9) hsync: 67.16 kHz; pclk: 173.00 MHz\r\n    Modeline \"1920x1080_60.00\"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync\r\nEndSection\r\n \r\nSection \"Screen\"\r\n    Identifier  \"Default Screen\"\r\n    Monitor     \"Configured Monitor\"\r\n    Device      \"Configured Video Device\"\r\n    DefaultDepth 24\r\n    SubSection \"Display\"\r\n        Depth 24\r\n        Modes \"1920x1080\"\r\n    EndSubSection\r\nEndSection\r\n \r\nSection \"InputClass\"\r\n    Identifier \"system-keyboard\"\r\n    MatchIsKeyboard \"on\"\r\n    Option \"XkbLayout\" \"jp,us\"\r\n    Option \"XkbModel\" \"jp106\"\r\n    Option \"XkbVariant\" \",dvorak\"\r\n    Option \"XkbOptions\" \"grp:alt_shift_toggle\"\r\nEndSection\r\n```\r\n\r\n解像度の設定値は`cvt`コマンドで生成する．\r\n\r\n```console\r\n$ cvt 1920 1080\r\n# 1920x1080 59.96 Hz (CVT 2.07M9) hsync: 67.16 kHz; pclk: 173.00 MHz\r\nModeline \"1920x1080_60.00\"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync\r\n```",
    "pub_date": "2020-12-29T09:19:05.075Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 239,
  "fields": {
    "title": "Qtアプリのデプロイ方法",
    "content": "# 依存ライブラリを取集する\r\n\r\n`windeployqt.exe`を使用して依存ライブラリを自動で取得する．\r\n\r\n```console\r\n$ mkdir ./DISTDIR\r\n$ copy path/to/QTAPP.exe ./DISTDIR\r\n$ # qmlがある場合\r\n$ \"C:/Qt/5.15.2/mingw81_64/bin/windeployqt.exe\" ./DISTDIR/QTAPP.exe --qmldir path/to/SOURCE\r\n$ # qmlがない場合\r\n$ \"C:/Qt/5.15.2/mingw81_64/bin/windeployqt.exe\" ./DISTDIR/QTAPP.exe\r\n```",
    "pub_date": "2021-01-13T13:14:10.304Z",
    "user": 2,
    "tags": [
      1,
      57
    ]
  }
},
{
  "model": "app.memo",
  "pk": 240,
  "fields": {
    "title": "Linuxでディレクトリのサイズを確認",
    "content": "# サイズを一覧してソート\r\n\r\n`du`コマンドでディレクトリ・ファイルのサイズを一覧して`sort`で並び替え．\r\n\r\n```console\r\n$ du -BM | sort -nr\r\n```",
    "pub_date": "2021-07-17T06:35:48.307Z",
    "user": 2,
    "tags": [
      1,
      52
    ]
  }
},
{
  "model": "app.memo",
  "pk": 241,
  "fields": {
    "title": "C#のコンソールアプリでasync/awaitを使用する方法",
    "content": "# コンソールアプリのMainメソッドでawaitできるようにする\r\n\r\nC#のMainメソッドには直接asyncキーワードをつけることができないので，awaitで呼び出すこともできない．そこでasyncのMainメソッドを別に用意して本来のMainメソッドから呼び出し，Resultを取得するようにしてブロックすればそちら側でawaitすることができる．\r\n\r\n```cs\r\nstatic void Main(string[] args)\r\n{\r\n    try\r\n    {\r\n        var result = InternalMainAsync(args).Result;\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Console.WriteLine(ex.Message);\r\n    }\r\n}\r\n\r\nprivate static async Task<bool> InternalMainAsync(string[] args)\r\n{\r\n    var result = await HogeAsync();\r\n    return true;\r\n}\r\n```",
    "pub_date": "2021-08-05T05:41:19.659Z",
    "user": 2,
    "tags": [
      1,
      10
    ]
  }
},
{
  "model": "app.memo",
  "pk": 242,
  "fields": {
    "title": "PythonでNode.jsのような非同期実行",
    "content": "# Pythonでasyncioを使って任意のタイミングで非同期実行\r\n\r\nメインのスレッドでevent loopをまわして`asyncio.Queue`を使って外部からTaskを追加．Queueはスレッドセーフではないので`call_soon_threadsafe`を使う必要があるので注意．\r\n\r\n```py\r\nimport asyncio\r\nimport signal\r\nimport time\r\nfrom datetime import datetime\r\nfrom threading import Thread\r\n\r\ndef do_another_thread(loop: asyncio.AbstractEventLoop, queue: asyncio.Queue):\r\n    for i in range(10):\r\n        loop.call_soon_threadsafe(lambda: queue.put_nowait((3, i)))\r\n        time.sleep(1)\r\n\r\nasync def do_async(delay, value):\r\n    print(f'[{datetime.now()}] start value: {value}')\r\n    await asyncio.sleep(delay)\r\n    print(f'[{datetime.now()}] stop value: {value}')\r\n\r\nasync def main_lop(loop: asyncio.AbstractEventLoop):\r\n    queue = asyncio.Queue()  # queueはevent loop内で生成する\r\n    Thread(target=do_another_thread, args=(loop, queue), daemon=True).start()\r\n    while True:\r\n        delay, value = await queue.get()\r\n        loop.create_task(do_async(delay, value))\r\n\r\ndef main():\r\n    loop = asyncio.get_event_loop()\r\n    loop.add_signal_handler(signal.SIGTERM, lambda: [task.cancel() for task in asyncio.Task.all_tasks()])\r\n    try:\r\n        loop.run_until_complete(main_lop(loop))\r\n    except KeyboardInterrupt:\r\n        pass\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2021-08-07T08:16:22.578Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 243,
  "fields": {
    "title": "簡単にwith文で使えるコンテキストマネージャを実装",
    "content": "# デコレータでコンテキストマネージャを定義\r\n\r\n通常は`__enter__`と`__exit__`を実装したClassを用意する必要があるが，`@contextlib.contextmanager`を使うと簡単にコンテキストマネージャを定義することができる．\r\n\r\n\r\n```py\r\nfrom contextlib import contextmanager\r\n\r\n@contextmanager\r\ndef reading(filename):\r\n    file = open(filename, 'r')\r\n    try:\r\n        yield file\r\n    finally:\r\n        file.close()\r\n\r\ndef main():\r\n    with reading('spam.txt') as f:\r\n        print(f.readline())\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2021-08-10T17:58:34.424Z",
    "user": 2,
    "tags": [
      1,
      2
    ]
  }
},
{
  "model": "app.memo",
  "pk": 244,
  "fields": {
    "title": "Vimでペーストするときにインデントがずれないように",
    "content": "# ペーストするときにインデントがずれてしまうときの対応\r\n\r\n```bash\r\n:set paste    # ペーストモード\r\n:set nopaste  # ペーストモード解除\r\n:set paste!   # ペーストモード切替え\r\n```",
    "pub_date": "2021-09-20T14:58:52.586Z",
    "user": 2,
    "tags": [
      1,
      52,
      68
    ]
  }
},
{
  "model": "app.memo",
  "pk": 245,
  "fields": {
    "title": "UnionFindのサンプル実装",
    "content": "# UnionFindをPythonを使って実装\r\n\r\n1. グループ作り (Union)\r\n2. グループに属しているかどうか (Find)\r\n\r\n[https://www.slideshare.net/chokudai/union-find-49066733/1](https://www.slideshare.net/chokudai/union-find-49066733/1)\r\n\r\n```py\r\nfrom sys import setrecursionlimit\r\nsetrecursionlimit(1000000)\r\n\r\nclass UnionFind:\r\n    def __init__(self, n):\r\n        self._n = n\r\n        self._root_or_size = [-1 for _ in range(n)]\r\n        self._count = n\r\n\r\n    def find(self, i):\r\n        if self._root_or_size[i] < 0:\r\n            return i\r\n        self._root_or_size[i] = self.find(self._root_or_size[i])\r\n        return self._root_or_size[i]\r\n\r\n    def unite(self, i, j):\r\n        ri = self.find(i)\r\n        rj = self.find(j)\r\n        if ri == rj:\r\n            return ri\r\n        self._count -= 1\r\n        if -self._root_or_size[ri] < -self._root_or_size[rj]:\r\n            ri, rj = rj, ri\r\n        self._root_or_size[ri] += self._root_or_size[rj]\r\n        self._root_or_size[rj] = ri\r\n        return ri\r\n\r\n    def same(self, i, j):\r\n        return self.find(i) == self.find(j)\r\n\r\n    def size(self, i):\r\n        return -self._root_or_size[self.find(i)]\r\n\r\n    def groups(self):\r\n        result = [[] for _ in range(self._n)]\r\n        for i in range(self._n):\r\n            result[self.find(i)].append(i)\r\n        return [x for x in result if x]\r\n\r\n    def count(self): return self._count\r\n\r\ndef main():\r\n    uf = UnionFind(8)\r\n    uf.unite(0, 1)\r\n    uf.unite(1, 3)\r\n    uf.unite(0, 4)\r\n    uf.unite(5, 6)\r\n    uf.unite(3, 7)\r\n    print(uf.groups())    # [[0, 1, 3, 4, 7], [2], [5, 6]]\r\n    print(uf.find(3))     # 0\r\n    print(uf.same(1, 7))  # True\r\n    print(uf.same(0, 5))  # False\r\n    print(uf.size(6))     # 2\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2021-12-18T05:38:22.706Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 246,
  "fields": {
    "title": "尺取り法のサンプル実装",
    "content": "# 尺取り法をPythonを使って実装\r\n\r\n`ri`側は条件に合う一つ外側を指すようにするのが実装が楽そう．\r\n\r\n[https://atcoder.jp/contests/abc229/tasks/abc229_d](https://atcoder.jp/contests/abc229/tasks/abc229_d)\r\n\r\n```py\r\nfrom sys import stdin\r\n\r\ndef main():\r\n    s = stdin.readline().rstrip()\r\n    k = int(stdin.readline().rstrip())\r\n    k_org = k\r\n    ri = 0\r\n    ans = 0\r\n    for li in range(len(s)):\r\n        ri = max(ri, li)\r\n        while ri < len(s) and k - (1 if s[ri] == '.' else 0) >= 0:\r\n            k -= (1 if s[ri] == '.' else 0)\r\n            ri += 1\r\n        ans = max(ri - li, ans)\r\n        k = min(k + (1 if s[li] == '.' else 0), k_org)\r\n    print(ans)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2021-12-19T01:46:53.409Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 247,
  "fields": {
    "title": "二分探索のサンプル実装",
    "content": "# 二分探索をPythonを使って実装\r\n\r\n標準パッケージのbisectが使用できないとき用のbisect関数のサンプル実装．`check_func`がTrue -> Falseになる境目（はじめてFalseになるindex）を返す．\r\n\r\n[https://atcoder.jp/contests/abc227/tasks/abc227_d](https://atcoder.jp/contests/abc227/tasks/abc227_d)\r\n\r\n```py\r\nfrom sys import stdin\r\n\r\ndef bisect(li, ri, check_func):\r\n    if check_func(ri):\r\n        return ri + 1\r\n    if not check_func(li):\r\n        return li\r\n    while ri - li > 1:\r\n        x = (ri + li) // 2\r\n        if check_func(x):\r\n            li = x\r\n        else:\r\n            ri = x\r\n    return ri\r\n\r\ndef main():\r\n    n, k = [int(x) for x in stdin.readline().rstrip().split()]\r\n    a = [int(x) for x in stdin.readline().rstrip().split()]\r\n\r\n    def check(x):\r\n        return x * k <= sum(min(x, i) for i in a)\r\n\r\n    print(bisect(0, 10 ** 18, check) - 1)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2022-01-03T05:28:22.606Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 248,
  "fields": {
    "title": "トポロカジルソートのサンプル実装",
    "content": "# トポロカジルソートをPythonを使って実装\r\n\r\nグラフの頂点の中で入次数が0の頂点から取り出して並べる．取り出した頂点から入ってくる辺は都度削除しながらこの操作を続ける．またトポロカジルソートの要件ではないがこのサンプルでは入次数が0の中でも数の小さいものを優先的に並べるようにしている．（優先度付きキューを使用）\r\n\r\nこの操作で最終的にすべての頂点を取り出せなかった場合はトポロカジルソート不可となる．\r\n\r\n[https://atcoder.jp/contests/abc223/tasks/abc223_d](https://atcoder.jp/contests/abc223/tasks/abc223_d)\r\n\r\n```py\r\nimport heapq\r\nfrom sys import stdin\r\n\r\ndef main():\r\n    n, m = [int(x) for x in stdin.readline().rstrip().split()]\r\n    ab = [[int(x) for x in stdin.readline().rstrip().split()] for _ in range(m)]\r\n    to = [[] for _ in range(n)]\r\n    inc = [0 for _ in range(n)]\r\n    for a, b in ab:\r\n        to[a - 1].append(b - 1)\r\n        inc[b - 1] += 1\r\n    hque = []\r\n    for i, v in enumerate(inc):\r\n        if v == 0:\r\n            heapq.heappush(hque, i)\r\n    ans = []\r\n    while hque:\r\n        v = heapq.heappop(hque)\r\n        ans.append(v)\r\n        for u in to[v]:\r\n            inc[u] -= 1\r\n            if inc[u] == 0:\r\n                heapq.heappush(hque, u)\r\n    if len(ans) != n:\r\n        print(-1)\r\n    else:\r\n        print(' '.join([str(x + 1) for x in ans]))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
    "pub_date": "2022-01-04T16:39:17.652Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 249,
  "fields": {
    "title": "順列数・組み合わせ数の算出",
    "content": "# 順列数・組み合わせ数をPythonを使って実装\r\n\r\nmath.factorial()を使用して実装．\r\n\r\n```py\r\nfrom math import factorial\r\n\r\ndef permutations_count(n, r):\r\n    ''' 順列 '''\r\n    return factorial(n) // factorial(n - r)\r\n\r\ndef combinations_count(n, r):\r\n    ''' 組み合わせ '''\r\n    return factorial(n) // (factorial(n - r) * factorial(r))\r\n\r\nprint(permutations_count(5, 2))\r\nprint(combinations_count(5, 2))\r\n```",
    "pub_date": "2022-01-15T14:25:43.068Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 250,
  "fields": {
    "title": "ワーシャルフロイド法のサンプル実装",
    "content": "# ワーシャルフロイド法をPythonを使って実装\r\n\r\n最短経路を算出するアルゴリズム．グラフ上の全ての頂点間の最短経路をO(n**3)で算出する．iからjまでの最短経路を，途中経路kを順に切り替えながら最小値を更新し算出する．\r\n\r\n```py\r\nINF = 1001001001\r\n\r\nn = 23  # nは頂点数\r\nm = 42  # mは辺数\r\nabc = [[0, 1, 2] for _ in range(m)]  # aからbへの距離cの辺数がm\r\n\r\nd = [[INF for _ in range(n)] for _ in range(n)]  # iからjへの最短経路テーブル（初期値はINF）\r\nfor i in range(n):\r\n    d[i][i] = 0  # 自分自身への移動は0\r\nfor a, b, c in abc:\r\n    d[a][b] = c  # aからbへの直接の距離cを設定\r\n\r\ndef warshall_floyd(n):\r\n    for k in range(n):  # kは経由する頂点\r\n        for i in range(n):\r\n            for j in range(n):\r\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\r\n\r\nwarshall_floyd(n)\r\n\r\n# 負閉路判定\r\nfor i in range(n):\r\n    if d[i][i] < 0:\r\n        print('NEGATIVE CYCLE')\r\n        exit()\r\n\r\n# INF判定\r\nfor i in range(n):\r\n    for j in range(n):\r\n        if d[i][j] >= INF // 2:\r\n            d[i][j] = 'INF'\r\n\r\nprint(*d, sep='\\n')\r\n```",
    "pub_date": "2022-01-31T15:17:10.869Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 251,
  "fields": {
    "title": "素因数分解，素数判定のサンプル実装",
    "content": "# 素因数分解をPythonを使って実装\r\n\r\n素因数分解の計算量はざっとO(n\\*\\*0.5)くらい．素数判定もざっとO(n\\*\\*0.5)くらい．\r\n\r\n```py\r\nfrom collections import Counter\r\n\r\ndef prime_factorize(n):\r\n    a = []\r\n    while n % 2 == 0:\r\n        a.append(2)\r\n        n //= 2\r\n    f = 3\r\n    while f * f <= n:\r\n        if n % f == 0:\r\n            a.append(f)\r\n            n //= f\r\n        else:\r\n            f += 2\r\n    if n != 1:\r\n        a.append(n)\r\n    return a\r\n\r\ndef is_prime(n):\r\n    if n < 2:\r\n        return False\r\n    if n == 2:\r\n        return True\r\n    if n % 2 == 0:\r\n        return False\r\n    for i in range(3, int(n ** 0.5) + 1, 2):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef main():\r\n    x = prime_factorize(100)\r\n    print(x)\r\n    c = Counter(x)\r\n    print(c)\r\n\r\n    for i in range(1, 10):\r\n        print(i, is_prime(i))\r\n```",
    "pub_date": "2022-02-04T15:10:11.426Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 252,
  "fields": {
    "title": "SortedSetのサンプル実装",
    "content": "# SortedSetをPythonを使って実装\r\n\r\n```py\r\nimport math\r\nfrom bisect import bisect_left, bisect_right\r\nfrom typing import Generic, Iterable, Iterator, List, TypeVar, Union\r\n\r\nT = TypeVar('T')\r\n\r\nclass SortedSet(Generic[T]):\r\n    '''\r\n    * SortedSet(a=[])\r\n      iterable から SortedSet を作ります。重複がなく、かつソートされていれば O(N) 、そうでなければ O(N log N) です。\r\n    * s.a\r\n      SortedSet の中身です。list の list になっていて、中には要素が昇順に並んでいます。各バケットには要素が存在することが保証されます。\r\n    * len(s)\r\n      O(1)\r\n    * x in s / x not in s\r\n      O(√N)\r\n    * s.add(x)\r\n      x が s に含まれていなければ x を追加し、True を返します。O(√N) amortized / O(N) worst\r\n    * s.discard(x)\r\n      x が s に含まれていれば x を削除し、True を返します。O(√N) amortized / O(N) worst\r\n    * s.lt(x) / s.le(x) / s.gt(x) / s.ge(x)\r\n      x より小さい / 以下 / より大きい / 以上で 最小 / 最大 の要素を返します。存在しなければ None をを返します。O(√N)\r\n    * s[x]\r\n      下から x 番目 / 上から ~x 番目 の要素を返します。存在しない場合は IndexError を返します。O(√N) (定数倍が小さい)\r\n    * s.index(x)\r\n      x より小さい要素の数を返します。x が s に含まれている場合は list(s).index(x) に相当します。O(√N) (定数倍が小さい)\r\n    * s.index_right(x)\r\n      x 以下の要素の数を返します。O(√N) (定数倍が小さい)\r\n    '''\r\n\r\n    BUCKET_RATIO = 50\r\n    REBUILD_RATIO = 170\r\n\r\n    def _build(self, a=None) -> None:\r\n        '''Evenly divide `a` into buckets.'''\r\n        if a is None:\r\n            a = list(self)\r\n        size = self.size = len(a)\r\n        bucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\r\n        self.a = [a[size * i // bucket_size: size * (i + 1) // bucket_size] for i in range(bucket_size)]\r\n\r\n    def __init__(self, a: Iterable[T] = []) -> None:\r\n        '''Make a new SortedSet from iterable. / O(N) if sorted and unique / O(N log N)'''\r\n        a = list(a)\r\n        if not all(a[i] < a[i + 1] for i in range(len(a) - 1)):\r\n            a = sorted(set(a))\r\n        self._build(a)\r\n\r\n    def __iter__(self) -> Iterator[T]:\r\n        for i in self.a:\r\n            for j in i:\r\n                yield j\r\n\r\n    def __reversed__(self) -> Iterator[T]:\r\n        for i in reversed(self.a):\r\n            for j in reversed(i):\r\n                yield j\r\n\r\n    def __len__(self) -> int:\r\n        return self.size\r\n\r\n    def __repr__(self) -> str:\r\n        return 'SortedSet' + str(self.a)\r\n\r\n    def __str__(self) -> str:\r\n        s = str(list(self))\r\n        return '{' + s[1: len(s) - 1] + '}'\r\n\r\n    def _find_bucket(self, x: T) -> List[T]:\r\n        '''Find the bucket which should contain x. self must not be empty.'''\r\n        for a in self.a:\r\n            if x <= a[-1]:\r\n                return a\r\n        return a\r\n\r\n    def __contains__(self, x: T) -> bool:\r\n        if self.size == 0:\r\n            return False\r\n        a = self._find_bucket(x)\r\n        i = bisect_left(a, x)\r\n        return i != len(a) and a[i] == x\r\n\r\n    def add(self, x: T) -> bool:\r\n        '''Add an element and return True if added. / O(√N)'''\r\n        if self.size == 0:\r\n            self.a = [[x]]\r\n            self.size = 1\r\n            return True\r\n        a = self._find_bucket(x)\r\n        i = bisect_left(a, x)\r\n        if i != len(a) and a[i] == x:\r\n            return False\r\n        a.insert(i, x)\r\n        self.size += 1\r\n        if len(a) > len(self.a) * self.REBUILD_RATIO:\r\n            self._build()\r\n        return True\r\n\r\n    def discard(self, x: T) -> bool:\r\n        '''Remove an element and return True if removed. / O(√N)'''\r\n        if self.size == 0:\r\n            return False\r\n        a = self._find_bucket(x)\r\n        i = bisect_left(a, x)\r\n        if i == len(a) or a[i] != x:\r\n            return False\r\n        a.pop(i)\r\n        self.size -= 1\r\n        if len(a) == 0:\r\n            self._build()\r\n        return True\r\n\r\n    def lt(self, x: T) -> Union[T, None]:\r\n        '''Find the largest element < x, or None if it doesn't exist.'''\r\n        for a in reversed(self.a):\r\n            if a[0] < x:\r\n                return a[bisect_left(a, x) - 1]\r\n\r\n    def le(self, x: T) -> Union[T, None]:\r\n        '''Find the largest element <= x, or None if it doesn't exist.'''\r\n        for a in reversed(self.a):\r\n            if a[0] <= x:\r\n                return a[bisect_right(a, x) - 1]\r\n\r\n    def gt(self, x: T) -> Union[T, None]:\r\n        '''Find the smallest element > x, or None if it doesn't exist.'''\r\n        for a in self.a:\r\n            if a[-1] > x:\r\n                return a[bisect_right(a, x)]\r\n\r\n    def ge(self, x: T) -> Union[T, None]:\r\n        '''Find the smallest element >= x, or None if it doesn't exist.'''\r\n        for a in self.a:\r\n            if a[-1] >= x:\r\n                return a[bisect_left(a, x)]\r\n\r\n    def __getitem__(self, x: int) -> T:\r\n        '''Return the x-th element, or IndexError if it doesn't exist.'''\r\n        if x < 0:\r\n            x += self.size\r\n        if x < 0:\r\n            raise IndexError\r\n        for a in self.a:\r\n            if x < len(a):\r\n                return a[x]\r\n            x -= len(a)\r\n        raise IndexError\r\n\r\n    def index(self, x: T) -> int:\r\n        '''Count the number of elements < x.'''\r\n        ans = 0\r\n        for a in self.a:\r\n            if a[-1] >= x:\r\n                return ans + bisect_left(a, x)\r\n            ans += len(a)\r\n        return ans\r\n\r\n    def index_right(self, x: T) -> int:\r\n        '''Count the number of elements <= x.'''\r\n        ans = 0\r\n        for a in self.a:\r\n            if a[-1] > x:\r\n                return ans + bisect_right(a, x)\r\n            ans += len(a)\r\n        return ans\r\n```",
    "pub_date": "2022-03-20T08:25:34.830Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 253,
  "fields": {
    "title": "SortedMultisetのサンプル実装",
    "content": "# SortedMultisetをPythonを使って実装\r\n\r\n```py\r\nimport math\r\nfrom bisect import bisect_left, bisect_right, insort\r\nfrom typing import Generic, Iterable, Iterator, List, TypeVar, Union\r\n\r\nT = TypeVar('T')\r\n\r\nclass SortedMultiset(Generic[T]):\r\n    '''\r\n    * s.add(x)\r\n      x が s に含まれているかどうかに関わらず x を追加します。何も返しません。O(√N) amortized / O(N) worst\r\n    * s.discard(x)\r\n      x が s に含まれていれば x を 1 個 削除し、True を返します。O(√N) amortized / O(N) worst\r\n      (C++ の std::multiset::erase には x を全て削除してしまうという罠があります。)\r\n    * s.count(x)\r\n      s に含まれる x の個数を返します。O(√N) (定数倍が小さい)\r\n    '''\r\n\r\n    BUCKET_RATIO = 50\r\n    REBUILD_RATIO = 170\r\n\r\n    def _build(self, a=None) -> None:\r\n        '''Evenly divide `a` into buckets.'''\r\n        if a is None:\r\n            a = list(self)\r\n        size = self.size = len(a)\r\n        bucket_size = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))\r\n        self.a = [a[size * i // bucket_size: size * (i + 1) // bucket_size] for i in range(bucket_size)]\r\n\r\n    def __init__(self, a: Iterable[T] = []) -> None:\r\n        '''Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)'''\r\n        a = list(a)\r\n        if not all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\r\n            a = sorted(a)\r\n        self._build(a)\r\n\r\n    def __iter__(self) -> Iterator[T]:\r\n        for i in self.a:\r\n            for j in i:\r\n                yield j\r\n\r\n    def __reversed__(self) -> Iterator[T]:\r\n        for i in reversed(self.a):\r\n            for j in reversed(i):\r\n                yield j\r\n\r\n    def __len__(self) -> int:\r\n        return self.size\r\n\r\n    def __repr__(self) -> str:\r\n        return 'SortedMultiset' + str(self.a)\r\n\r\n    def __str__(self) -> str:\r\n        s = str(list(self))\r\n        return '{' + s[1: len(s) - 1] + '}'\r\n\r\n    def _find_bucket(self, x: T) -> List[T]:\r\n        '''Find the bucket which should contain x. self must not be empty.'''\r\n        for a in self.a:\r\n            if x <= a[-1]:\r\n                return a\r\n        return a\r\n\r\n    def __contains__(self, x: T) -> bool:\r\n        if self.size == 0:\r\n            return False\r\n        a = self._find_bucket(x)\r\n        i = bisect_left(a, x)\r\n        return i != len(a) and a[i] == x\r\n\r\n    def count(self, x: T) -> int:\r\n        '''Count the number of x.'''\r\n        return self.index_right(x) - self.index(x)\r\n\r\n    def add(self, x: T) -> None:\r\n        '''Add an element. / O(√N)'''\r\n        if self.size == 0:\r\n            self.a = [[x]]\r\n            self.size = 1\r\n            return\r\n        a = self._find_bucket(x)\r\n        insort(a, x)\r\n        self.size += 1\r\n        if len(a) > len(self.a) * self.REBUILD_RATIO:\r\n            self._build()\r\n\r\n    def discard(self, x: T) -> bool:\r\n        '''Remove an element and return True if removed. / O(√N)'''\r\n        if self.size == 0:\r\n            return False\r\n        a = self._find_bucket(x)\r\n        i = bisect_left(a, x)\r\n        if i == len(a) or a[i] != x:\r\n            return False\r\n        a.pop(i)\r\n        self.size -= 1\r\n        if len(a) == 0:\r\n            self._build()\r\n        return True\r\n\r\n    def lt(self, x: T) -> Union[T, None]:\r\n        '''Find the largest element < x, or None if it doesn't exist.'''\r\n        for a in reversed(self.a):\r\n            if a[0] < x:\r\n                return a[bisect_left(a, x) - 1]\r\n\r\n    def le(self, x: T) -> Union[T, None]:\r\n        '''Find the largest element <= x, or None if it doesn't exist.'''\r\n        for a in reversed(self.a):\r\n            if a[0] <= x:\r\n                return a[bisect_right(a, x) - 1]\r\n\r\n    def gt(self, x: T) -> Union[T, None]:\r\n        '''Find the smallest element > x, or None if it doesn't exist.'''\r\n        for a in self.a:\r\n            if a[-1] > x:\r\n                return a[bisect_right(a, x)]\r\n\r\n    def ge(self, x: T) -> Union[T, None]:\r\n        '''Find the smallest element >= x, or None if it doesn't exist.'''\r\n        for a in self.a:\r\n            if a[-1] >= x:\r\n                return a[bisect_left(a, x)]\r\n\r\n    def __getitem__(self, x: int) -> T:\r\n        '''Return the x-th element, or IndexError if it doesn't exist.'''\r\n        if x < 0:\r\n            x += self.size\r\n        if x < 0:\r\n            raise IndexError\r\n        for a in self.a:\r\n            if x < len(a):\r\n                return a[x]\r\n            x -= len(a)\r\n        raise IndexError\r\n\r\n    def index(self, x: T) -> int:\r\n        '''Count the number of elements < x.'''\r\n        ans = 0\r\n        for a in self.a:\r\n            if a[-1] >= x:\r\n                return ans + bisect_left(a, x)\r\n            ans += len(a)\r\n        return ans\r\n\r\n    def index_right(self, x: T) -> int:\r\n        '''Count the number of elements <= x.'''\r\n        ans = 0\r\n        for a in self.a:\r\n            if a[-1] > x:\r\n                return ans + bisect_right(a, x)\r\n            ans += len(a)\r\n        return ans\r\n```",
    "pub_date": "2022-03-20T08:34:11.255Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 254,
  "fields": {
    "title": "3点の直線判定のサンプル",
    "content": "# 3点が同一直線上にあるかの判定をPythonを使って実装\r\n\r\n```py\r\ndef f(p1, p2, p3):\r\n    ''' 直線判定 '''\r\n    return 0 == (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])\r\n\r\ndef calc_area(p1, p2, p3):\r\n    ''' 三角形の面積 '''\r\n    return abs((p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])) / 2\r\n```",
    "pub_date": "2022-05-01T04:21:34.867Z",
    "user": 2,
    "tags": [
      1,
      2,
      69
    ]
  }
},
{
  "model": "app.memo",
  "pk": 255,
  "fields": {
    "title": "UbuntuのDockerコンテナでの最低限の設定",
    "content": "# 国内のリポジトリに変更\r\n\r\nデフォルトでは通信速度が遅いので国内のリポジトリに変更する\r\n\r\n```console\r\n# sed -i.org -e 's|archive.ubuntu.com|ftp.riken.jp/Linux|g' /etc/apt/sources.list\r\n# apt update && apt upgrade -y\r\n```\r\n\r\n# プロンプトのデザイン変更\r\n\r\nプロンプトに色をつける\r\n\r\n```console\r\n# echo \"PS1='\\${debian_chroot:+(\\$debian_chroot)}\\[\\e[38;05;74m\\]\\u\\[\\e[00m\\]@\\[\\e[38;05;186m\\]\\h\\[\\e[00m\\]:\\[\\e[38;05;172m\\]\\w\\[\\e[00m\\]\\\\$ '\" >> ~/.bashrc\r\n# source ~/.bashrc\r\n```\r\n\r\n# 日本語化\r\n\r\n表示の日本語化とタイムゾーンをJSTに変更\r\n\r\n```console\r\n# apt install task-japanese locales tzdata\r\n# dpkg-reconfigure locales\r\n# echo 'export LANG=ja_JP.UTF-8' >> ~/.bashrc\r\n# source ~/.bashrc\r\n```\r\n\r\n# vimの設定\r\n\r\nダークモードへの変更と行番号表示，インデント関連の設定など\r\n\r\n```bash\r\nset number\r\nset expandtab\r\nset tabstop=4\r\nset shiftwidth=4\r\nset smartindent\r\nset background=dark\r\nset cursorline\r\nsyntax enable\r\nhighlight CursorLine ctermbg=darkgray\r\n```\r\n\r\n# manのインストール\r\n\r\nmanコマンドのインストールと日本語化\r\n\r\n```console\r\n# apt install man manpages-ja manpages-ja-dev less\r\n# unminimize\r\n```",
    "pub_date": "2022-10-29T10:15:05.843Z",
    "user": 2,
    "tags": [
      1,
      52,
      62
    ]
  }
},
{
  "model": "app.memo",
  "pk": 256,
  "fields": {
    "title": "WSL2でサービスの自動起動を設定する",
    "content": "# wsl.confのbootセクション\r\n\r\n`/etc/wsl.conf`の[boot]セクションに`command`キーで起動させたいサービスの実行を記述する．このコマンドはrootユーザとして実行される．\r\n\r\n```ini\r\n[boot]\r\ncommand = service dbus start\r\n```\r\n\r\n[https://learn.microsoft.com/ja-jp/windows/wsl/wsl-config#boot-settings](https://learn.microsoft.com/ja-jp/windows/wsl/wsl-config#boot-settings)",
    "pub_date": "2023-02-10T04:00:02.671Z",
    "user": 2,
    "tags": [
      1,
      52,
      70
    ]
  }
}
]
