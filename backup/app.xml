<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0"><object pk="1" model="app.tag"><field name="name" type="CharField">プログラミング</field><field name="pub_date" type="DateTimeField">2015-08-09T14:38:01.103512+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="2" model="app.tag"><field name="name" type="CharField">python</field><field name="pub_date" type="DateTimeField">2015-08-09T14:38:01.133555+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="3" model="app.tag"><field name="name" type="CharField">LT</field><field name="pub_date" type="DateTimeField">2015-08-09T14:40:00.384657+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="4" model="app.tag"><field name="name" type="CharField">恐竜</field><field name="pub_date" type="DateTimeField">2015-08-09T14:41:37.322223+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="5" model="app.tag"><field name="name" type="CharField">化石</field><field name="pub_date" type="DateTimeField">2015-08-09T14:41:37.411620+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="6" model="app.tag"><field name="name" type="CharField">攻殻機動隊</field><field name="pub_date" type="DateTimeField">2015-08-09T14:44:31.436758+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="7" model="app.tag"><field name="name" type="CharField">ARIZE</field><field name="pub_date" type="DateTimeField">2015-08-09T14:44:31.452414+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="8" model="app.tag"><field name="name" type="CharField">C言語</field><field name="pub_date" type="DateTimeField">2015-08-09T14:46:01.371390+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="9" model="app.tag"><field name="name" type="CharField">FizzBuzz</field><field name="pub_date" type="DateTimeField">2015-08-09T14:46:01.418540+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="10" model="app.tag"><field name="name" type="CharField">C#</field><field name="pub_date" type="DateTimeField">2015-08-09T14:49:10.255520+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="11" model="app.tag"><field name="name" type="CharField">GUNDAM</field><field name="pub_date" type="DateTimeField">2015-08-09T14:49:59.937258+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="12" model="app.tag"><field name="name" type="CharField">GCJ</field><field name="pub_date" type="DateTimeField">2015-08-09T14:53:30.708907+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="13" model="app.tag"><field name="name" type="CharField">食事</field><field name="pub_date" type="DateTimeField">2015-08-09T14:58:36.261787+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="14" model="app.tag"><field name="name" type="CharField">もんじゃ</field><field name="pub_date" type="DateTimeField">2015-08-09T14:58:36.300687+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="15" model="app.tag"><field name="name" type="CharField">動物</field><field name="pub_date" type="DateTimeField">2015-08-09T15:03:12.141069+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="16" model="app.tag"><field name="name" type="CharField">C++</field><field name="pub_date" type="DateTimeField">2015-08-09T15:04:41.703534+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="17" model="app.tag"><field name="name" type="CharField">クロージャ</field><field name="pub_date" type="DateTimeField">2015-08-09T15:09:42.627303+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="18" model="app.tag"><field name="name" type="CharField">OpenCV</field><field name="pub_date" type="DateTimeField">2015-08-09T15:13:58.721225+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="20" model="app.tag"><field name="name" type="CharField">映画</field><field name="pub_date" type="DateTimeField">2015-08-14T13:08:00.432964+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="21" model="app.tag"><field name="name" type="CharField">餃子</field><field name="pub_date" type="DateTimeField">2015-08-16T03:36:44.607389+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="22" model="app.tag"><field name="name" type="CharField">うどん</field><field name="pub_date" type="DateTimeField">2015-08-16T03:42:59.512684+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="23" model="app.tag"><field name="name" type="CharField">命名</field><field name="pub_date" type="DateTimeField">2015-08-17T03:12:50.212864+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="25" model="app.tag"><field name="name" type="CharField">デザイン</field><field name="pub_date" type="DateTimeField">2015-08-18T08:54:15.522329+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="26" model="app.tag"><field name="name" type="CharField">jQuery</field><field name="pub_date" type="DateTimeField">2015-08-22T08:32:42.131535+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="27" model="app.tag"><field name="name" type="CharField">ロボット</field><field name="pub_date" type="DateTimeField">2015-08-23T12:05:33.817253+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="30" model="app.tag"><field name="name" type="CharField">寿司</field><field name="pub_date" type="DateTimeField">2015-08-26T11:21:48.004724+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="31" model="app.tag"><field name="name" type="CharField">天ぷら</field><field name="pub_date" type="DateTimeField">2015-08-26T11:22:51.859161+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="32" model="app.tag"><field name="name" type="CharField">Git</field><field name="pub_date" type="DateTimeField">2015-08-27T02:29:32.346938+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="33" model="app.tag"><field name="name" type="CharField">Heroku</field><field name="pub_date" type="DateTimeField">2015-09-06T11:34:53.893080+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field></object><object pk="1" model="app.memo"><field name="title" type="CharField">Hello, python!</field><field name="content" type="TextField"># Hello World with Python

```
# coding: utf-8
print('Hello, python!')
```</field><field name="pub_date" type="DateTimeField">2015-08-09T14:38:01.085536+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object></field></object><object pk="2" model="app.memo"><field name="title" type="CharField">LT random</field><field name="content" type="TextField"># *random*

```
import random

with open('LT_list.txt', 'r', encoding = 'shift_jis') as f:
    list = f.readlines()

length = len(list)
if length != 0:
    index = random.randint(0, length - 1)
    print(('最後は ' if length == 1 else '次は ') + list[index][:-1] + ' です(っ´∀｀)っ')
    del list[index]

    with open('LT_list.txt', 'w', encoding = 'shift_jis') as f:
        f.writelines(list)
```</field><field name="pub_date" type="DateTimeField">2015-08-09T14:40:00.343728+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object><object pk="3"></object></field></object><object pk="3" model="app.memo"><field name="title" type="CharField">ブラック・ビューティ</field><field name="content" type="TextField"># *t-rex*

![black-beauty](https://c1.staticflickr.com/5/4072/4490328601_508f7d5983.jpg &amp;quot;black-beauty&amp;quot;)&lt;/textarea&gt;</field><field name="pub_date" type="DateTimeField">2015-08-09T14:41:37.294407+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="4"></object><object pk="5"></object></field></object><object pk="4" model="app.memo"><field name="title" type="CharField">T-REXが弱かったとかいうやつ</field><field name="content" type="TextField">なめるなよ！！

![t-rex](http://3.bp.blogspot.com/-kvbJ2Lk3e5g/Ur1GXV2yTsI/AAAAAAAAcck/uu_54SA8zwY/s450/trex_kokkaku.png)&lt;/textarea&gt;</field><field name="pub_date" type="DateTimeField">2015-08-09T14:42:48.335209+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="4"></object><object pk="5"></object></field></object><object pk="5" model="app.memo"><field name="title" type="CharField">攻殻機動隊ARIZE 新劇場版</field><field name="content" type="TextField"># ボーマ
活躍するかなぁ．．．

[http://kokaku-a.jp](http://kokaku-a.jp)

![arize](http://blog-imgs-62.fc2.com/d/d/3/dd360/arise_01.jpg)</field><field name="pub_date" type="DateTimeField">2015-08-09T14:44:31.429504+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="6"></object><object pk="7"></object></field></object><object pk="6" model="app.memo"><field name="title" type="CharField">C言語のFizzBuzz</field><field name="content" type="TextField"># FizzBuzz

フォーマット文字列のポインタをずらすのと，途中に終端文字`\0`が入っているのがポイント！

```
#include "stdafx.h"

int _tmain(int argc, _TCHAR* argv[])
{
	for (size_t i = 1; i &lt; 16; i++)
	{
		::printf("%d\n\0Fizz\n\0FizzBuzz\n" + ((i % 15) ? (i % 3) ? (i % 5) ? 0 : 14 : 4 : 10), i);
	}

	return 0;
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T14:46:01.320691+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="8"></object><object pk="1"></object><object pk="9"></object></field></object><object pk="7" model="app.memo"><field name="title" type="CharField">PythonのFizzBuzz</field><field name="content" type="TextField"># FizzBuzz

これは**cool!!** `f + b or str(n)`がなんとも(。-∀-)

```
# coding: utf-8

from itertools import cycle

for s in [f + b or str(n) for f, b, n in zip(cycle([''] * 2 + ['Fizz']), cycle([''] * 4 + ['Buzz']), range(1, 16))]: print(s)
```</field><field name="pub_date" type="DateTimeField">2015-08-09T14:48:15.652342+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object><object pk="9"></object></field></object><object pk="8" model="app.memo"><field name="title" type="CharField">C#のFizzBuzz</field><field name="content" type="TextField">#FizzBuzz

`LINQ`でやってみた．

```
using System;
using System.Linq;

namespace ConsoleApplication
{
    class Program
    {
        static void Main(string[] args)
        {
            Enumerable.Range(1, 15).Select(x =&gt; (x % 15 == 0) ? "FizzBuxx" : (x % 3 == 0) ? "Fizz" : (x % 5 == 0) ? "Buzz" :  x.ToString()).ToList().ForEach(x =&gt; Console.WriteLine(x));
        }
    }
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T14:49:10.206874+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="9"></object><object pk="10"></object></field></object><object pk="9" model="app.memo"><field name="title" type="CharField">νガンダム</field><field name="content" type="TextField"># 革命論
革命のことを知らないんだな・・・．革命はいつもインテリがはじめるんだ．夢見たいな目標を持ってやるからいつも過激なことしかやらない！
![νガンダム](https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRrPD-1iRuYSJ3YRRf4eSknNu_rDZHvI3YJqVRK9aeFqByaNROTnw)</field><field name="pub_date" type="DateTimeField">2015-08-09T14:49:59.928251+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="11"></object></field></object><object pk="10" model="app.memo"><field name="title" type="CharField">Google Code Jam 2015</field><field name="content" type="TextField"># Google Code Jam

今年はpythonでやるかぁ．

* Google Code Jam  
 [https://code.google.com/codejam](https://code.google.com/codejam)

* Go, Hero!  
 [http://www.go-hero.net/jam/](http://www.go-hero.net/jam/)</field><field name="pub_date" type="DateTimeField">2015-08-09T14:53:30.686051+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="12"></object></field></object><object pk="11" model="app.memo"><field name="title" type="CharField">Pythonメモ( ..)φ</field><field name="content" type="TextField"># なんか使いそうなのを載せておく

### リスト操作
[http://qiita.com/clarinet758/items/e181fcfe8ed6f99cbeb5](http://qiita.com/clarinet758/items/e181fcfe8ed6f99cbeb5)
  
### 便利な標準ライブラリ
[http://qiita.com/pika_shi/items/bf3b449a354cc7609ab9](http://qiita.com/pika_shi/items/bf3b449a354cc7609ab9)
  
### ファイルの一覧（サブフォルダも再帰的に）
[http://www.gesource.jp/programming/python/code/0001.html](http://www.gesource.jp/programming/python/code/0001.html)

![http://westmarch.sjsoft.com/wp-content/uploads/2012/11/zen-of-python-poster-a3-1024x724.png](http://westmarch.sjsoft.com/wp-content/uploads/2012/11/zen-of-python-poster-a3-1024x724.png)</field><field name="pub_date" type="DateTimeField">2015-08-09T14:56:27.365532+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object></field></object><object pk="12" model="app.memo"><field name="title" type="CharField">さいたにや</field><field name="content" type="TextField"># *久屋のもんじゃ*
[http://tabelog.com/aichi/A2301/A230103/23038804/](http://tabelog.com/aichi/A2301/A230103/23038804/)
![http://image1-3.tabelog.k-img.com/resize/660x370c/restaurant/images/Rvw/29008/29008164.jpg?token=edfe93f&amp;amp;api=v2](http://image1-3.tabelog.k-img.com/resize/660x370c/restaurant/images/Rvw/29008/29008164.jpg?token=edfe93f&amp;amp;api=v2)</field><field name="pub_date" type="DateTimeField">2015-08-09T14:58:36.248793+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="13"></object><object pk="14"></object></field></object><object pk="13" model="app.memo"><field name="title" type="CharField">やんや</field><field name="content" type="TextField"># *刈谷のもんじゃ*
[http://tabelog.com/aichi/A2305/A230503/23009823/](http://tabelog.com/aichi/A2305/A230503/23009823/)
![http://image1-3.tabelog.k-img.com/resize/660x370c/restaurant/images/Rvw/6190/6190320.jpg?token=8b7ddc4&amp;amp;api=v2](http://image1-3.tabelog.k-img.com/resize/660x370c/restaurant/images/Rvw/6190/6190320.jpg?token=8b7ddc4&amp;amp;api=v2)</field><field name="pub_date" type="DateTimeField">2015-08-09T15:00:20.441174+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="13"></object><object pk="14"></object></field></object><object pk="14" model="app.memo"><field name="title" type="CharField">Google Code Jam with Python</field><field name="content" type="TextField"># Google Coce Jam用のテンプレート

```
# coding: utf-8

import sys

filename = 'sample.txt' if len(sys.argv) == 1 else sys.argv[1]
with open(filename, 'r', encoding = 'shift_jis') as f:
    T = int(f.readline()[:-1])    # 改行はずすスライス
    for i in range(T):
        print('Case #{0}: {1}'.format(i + 1, 'ans'))
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:01:37.310135+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object><object pk="12"></object></field></object><object pk="15" model="app.memo"><field name="title" type="CharField">5時間と7分</field><field name="content" type="TextField">## *君の休暇の最長記録だ．．．*
![http://i.gzn.jp/img/2014/05/24/gits-arise-border3-trailer/00.png](http://i.gzn.jp/img/2014/05/24/gits-arise-border3-trailer/00.png)</field><field name="pub_date" type="DateTimeField">2015-08-09T15:02:28.980685+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="6"></object><object pk="7"></object></field></object><object pk="16" model="app.memo"><field name="title" type="CharField">ニャンピョウ</field><field name="content" type="TextField"># 夕方のニュースで

見つかったらしいです( ﾟДﾟ)

![http://s.maho.jp/share/image_archive/6d/2c/6d2cf5bc10541bb2/df/df4e27f55e.jpg](http://s.maho.jp/share/image_archive/6d/2c/6d2cf5bc10541bb2/df/df4e27f55e.jpg)</field><field name="pub_date" type="DateTimeField">2015-08-09T15:03:12.116759+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="15"></object></field></object><object pk="17" model="app.memo"><field name="title" type="CharField">C++11使ったサンプル</field><field name="content" type="TextField"># CPU負荷を上げるサンプル
std::threadとかラムダ式とか範囲forとか

```
#include "stdafx.h"
#include &lt;vector&gt;
#include &lt;thread&gt;

int _tmain(int argc, _TCHAR* argv[])
{
	auto threads = std::vector&lt;std::thread&gt;(16);
	for (auto&amp; item : threads)
	{
		item = std::thread([]
		{
			while (true)
			{
				auto x = 10.0 / 3;
			}
		});
	}

	for (auto&amp; item : threads)
	{
		item.join();
	}

	return 0;
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:04:41.670598+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="16"></object><object pk="1"></object></field></object><object pk="18" model="app.memo"><field name="title" type="CharField">関数ポインタを返す関数</field><field name="content" type="TextField">std::functionでいいだろう．．．

```
#include "stdafx.h"
#include &lt;ostream&gt;
#include &lt;functional&gt;

const char* hoge(int n)
{
	return "hoge";
}

typedef const char* (*hogetype)(int);

hogetype piyo(double d)
{
	return hoge;
}

const char* (*fuga(double d))(int)
{
	return hoge;
}

std::function&lt;const char* (int)&gt; hogehoge(double d)
{
	return hoge;
}

int _tmain(int argc, _TCHAR* argv[])
{
	std::cout &lt;&lt; hoge(42) &lt;&lt; std::endl;

	auto hoge1 = piyo(23.0);
	std::cout &lt;&lt; hoge1(42) &lt;&lt; std::endl;

	auto hoge2 = fuga(23.0);
	std::cout &lt;&lt; hoge2(42) &lt;&lt; std::endl;

	auto hoge3 = hogehoge(23.0);
	std::cout &lt;&lt; hoge3(42) &lt;&lt; std::endl;

	return 0;
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:05:41.685568+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="16"></object><object pk="1"></object></field></object><object pk="19" model="app.memo"><field name="title" type="CharField">配列へのポインタ</field><field name="content" type="TextField">知らなかったなぁ．．．ただのアドレスの並びってわけでもないのか．

```
#include "stdafx.h"

int _tmain(int argc, _TCHAR* argv[])
{
	int ary[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int (*hoge)[10] = &amp;ary;

	::printf("%p\n", ary);
	::printf("%p\n", &amp;ary);
	::printf("%p\n", hoge);		// &amp;ary[0]のこと？（実際は違うっぽい．）

	::printf("%d, %d\n", ary[0], ary[1]);
	::printf("%d, %d\n", *hoge[0], *hoge[1]);		// あれ？( ﾟДﾟ)
	::printf("%d, %d\n", (*hoge)[0], (*hoge)[1]);	// *hogeは配列であり先頭要素じゃないっぽい．
	//::pringf("%d, %d\n", (*ary)[0], (*ary)[1]);	// aryとhogeは同じアドレスを示すがこれはできない．

	//int(*piyo)[20] = &amp;ary;	// ちなみにこれもダメ．C言語の配列ってちゃんと型だったんだ．．．

	return 0;
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:06:25.467727+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="16"></object><object pk="1"></object></field></object><object pk="20" model="app.memo"><field name="title" type="CharField">Pythonの命名規約</field><field name="content" type="TextField"># Google Python Style Guide によるPython の命名規約

* モジュール： module_name
* パッケージ : package_name
* クラス名 : ClassName
* メソッド名: method_name
* 例外 : ExceptionName
* 関数名 : function_name
* グローバル定数：GLOBAL_CONSTANT_NAME
* グローバル変数：global_var_name
* インスタンス変数 : instance_var_name
* ローカル変数：local_var_name</field><field name="pub_date" type="DateTimeField">2015-08-09T15:07:11.293007+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object><object pk="23"></object></field></object><object pk="21" model="app.memo"><field name="title" type="CharField">りきゅう</field><field name="content" type="TextField"># 会社前のもんじゃ

[http://www.rikyu-japan.com/nadya/](http://www.rikyu-japan.com/nadya/)

![http://rikyu-japan.sakura.ne.jp/wp/wp-content/uploads/DSC_0005.JPG](http://rikyu-japan.sakura.ne.jp/wp/wp-content/uploads/DSC_0005.JPG)</field><field name="pub_date" type="DateTimeField">2015-08-09T15:08:34.387457+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="13"></object><object pk="14"></object></field></object><object pk="22" model="app.memo"><field name="title" type="CharField">C++のクロージャ</field><field name="content" type="TextField"># C++でのクロージャの書き方

値でキャプチャして`mutable`とすると外の環境を書き換えられる．

```
#include "stdafx.h"
#include &lt;functional&gt;
#include &lt;iostream&gt;

std::function&lt;int ()&gt; Somethig()
{
	auto count = 0;
	return [=]() mutable -&gt; int
	{
		return ++count;
	};
}

int _tmain(int argc, _TCHAR* argv[])
{
	auto hoge = Somethig();

	for (int i = 0; i &lt; 100; i++)
	{
		std::cout &lt;&lt; hoge() &lt;&lt; std::endl;
	}

	return 0;
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:09:42.595869+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="16"></object><object pk="1"></object><object pk="17"></object></field></object><object pk="23" model="app.memo"><field name="title" type="CharField">C#のクロージャ</field><field name="content" type="TextField"># C#でのクロージャの書き方

特にキーワードとかはいらない．

```
using System;

namespace cssample
{
    class Program
    {
        static Func&lt;int&gt; Something()
        {
            var count = 0;
            return () =&gt; ++count;
        }

        static void Main(string[] args)
        {
            var hoge = Program.Something();

            for (int i = 0; i &lt; 100; i++)
            {
                Console.WriteLine(hoge());
            }
        }
    }
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:10:26.599653+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="10"></object><object pk="17"></object></field></object><object pk="24" model="app.memo"><field name="title" type="CharField">Pythonのクロージャ</field><field name="content" type="TextField"># Pythonでのクロージャの書き方

`nonlocal`とすると外側の環境が書き換えられる．

```
# coding: utf-8

def something():
    count = 0
    def inner():
        nonlocal count 
        count += 1
        return count
    return inner

hoge = something()
for i in range(100):
    print(hoge())
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:12:07.584176+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object><object pk="17"></object></field></object><object pk="25" model="app.memo"><field name="title" type="CharField">オプション引数とオーバーライド</field><field name="content" type="TextField"># オプション引数とオーバーライドは相性が悪い(..)

オプション引数は変数の型の値が使われる．

```
using System;

namespace ConsoleApplication1
{
    class B
    {
        public virtual void X(string s = "B";)
        {
            Console.WriteLine("{0} : B", s);
        }
    }

    class S : B
    {
        public override void X(string s = "S")
        {
            Console.WriteLine("{0} : S", s);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            B b = new B();
            b.X();    // B : B

            S s = new S();
            s.X();    // S : S

            B bs = new S();
            bs.X();   // B : S
        }
    }
}
```</field><field name="pub_date" type="DateTimeField">2015-08-09T15:13:03.431321+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="10"></object></field></object><object pk="26" model="app.memo"><field name="title" type="CharField">PythonでOpenCV</field><field name="content" type="TextField"># 基礎的なことがかなり網羅されているサイト

[http://opencv.blog.jp/python/使い方](http://opencv.blog.jp/python/使い方)

![image](http://livedoor.blogimg.jp/progr-python2/imgs/b/4/b4d28d74.jpg)</field><field name="pub_date" type="DateTimeField">2015-08-09T15:13:58.685426+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object><object pk="18"></object></field></object><object pk="27" model="app.memo"><field name="title" type="CharField">ファイルの一覧取得</field><field name="content" type="TextField">いつも毎回調べてしまうので，いろいろなパターンをまとめ．

```
import os
import glob

directory = 'C:\\Python34\\'

# ディレクトリ＋ファイル一覧（名前のみ，ワイルドカード指定不可）
for f in os.listdir(directory):
    print(f)

# ディレクトリ＋ファイル一覧（パス付き）
for f in glob.glob(directory + '*.txt'):
    print(f)

# ディレクトリ＋ファイル一覧（名前のみ）
for f in [os.path.basename(r) for r in glob.glob(directory + '*.txt')]:
    print(f)

# 再帰的にフォルダを渡り歩き
for r, ds, fs in os.walk(directory):
    print(r, ds, fs)
```</field><field name="pub_date" type="DateTimeField">2015-08-13T06:09:48.832506+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object></field></object><object pk="29" model="app.memo"><field name="title" type="CharField">ジュラシック・ワールド</field><field name="content" type="TextField">恐竜のシーンがかなり良かった．最後も好き！

![iamge](http://blog-imgs-52.fc2.com/s/e/k/sekiga914/jyura401s.jpg)</field><field name="pub_date" type="DateTimeField">2015-08-14T13:08:00.424551+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="4"></object><object pk="20"></object></field></object><object pk="30" model="app.memo"><field name="title" type="CharField">唐や</field><field name="content" type="TextField"># ビールにあう一口サイズのおいしい餃子

[http://tabelog.com/aichi/A2301/A230103/23015455/](http://tabelog.com/aichi/A2301/A230103/23015455/)

![image](http://www.kin3.info/category/gourmet/img/karaya-2.jpg)</field><field name="pub_date" type="DateTimeField">2015-08-16T03:36:44.552365+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="13"></object><object pk="21"></object></field></object><object pk="31" model="app.memo"><field name="title" type="CharField">うどん錦</field><field name="content" type="TextField"># 飲んだ後にぴったりなカレーうどん

[http://tabelog.com/aichi/A2301/A230103/23000374/](http://tabelog.com/aichi/A2301/A230103/23000374/)

![image](http://image1-3.tabelog.k-img.com/restaurant/images/Rvw/34128/640x640_rect_34128119.jpg)</field><field name="pub_date" type="DateTimeField">2015-08-16T03:42:59.408453+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="13"></object><object pk="22"></object></field></object><object pk="32" model="app.memo"><field name="title" type="CharField">ハノイの塔</field><field name="content" type="TextField"># ハノイの塔の再帰プログラミング

```
# coding: utf-8

def hanoi(n, source, work, dest):
    if 2 &lt;= n:
        hanoi(n - 1, source, dest, work)

    print('{0} を {1} から {2} へ'.format(n, source, dest))

    if 2 &lt;= n:
        hanoi(n - 1, work, source, dest)

if __name__ == '__main__':
    hanoi(64, 'A', 'B', 'C')
```</field><field name="pub_date" type="DateTimeField">2015-08-16T09:46:12.731770+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object></field></object><object pk="33" model="app.memo"><field name="title" type="CharField">Pythonで正規表現</field><field name="content" type="TextField"># Pythonで正規表現の基本的な使い方

後方参照の取り出し方とかいつも調べてしまうので．

```
# coding: utf-8

import re

text = '&lt;h1 style="width: 100px; height: 200px;"&gt;'
result = re.search(r'width: (.*)px; height: (.*)px;', text)

print(result.group(0))      # 1回目: width: 100px; height: 200px;
print(result.group(1))      # 1回目: 100
print(result.group(2))      # 1回目: 200
print(result.groups())      # 1回目: ('100', '200')

print()

text = '[width=30, height=45] [width=40, height=20]'
result = re.finditer(r'\[width=(.*), height=(.*)\]', text)

for match in result:
    print(match.group(0))   # 1回目: [width=30, height=45]   2回目: [width=30, height=45]  
    print(match.group(1))   # 1回目: 30                      2回目: 40           
    print(match.group(2))   # 1回目: 45                      2回目: 20           
    print(match.groups())   # 1回目: ('30', '45')            2回目: ('40', '20')
```</field><field name="pub_date" type="DateTimeField">2015-08-16T10:22:06.358297+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="2"></object></field></object><object pk="34" model="app.memo"><field name="title" type="CharField">プログラマーのためのネーミング辞書</field><field name="content" type="TextField"># 名前付けに困ったら

[https://codic.jp](https://codic.jp)

![https://codic.jp/img/home_screenshot.png](https://codic.jp/img/home_screenshot.png)</field><field name="pub_date" type="DateTimeField">2015-08-17T01:26:18.201610+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="23"></object></field></object><object pk="35" model="app.memo"><field name="title" type="CharField">sizeofの型と比較演算子での暗黙キャスト</field><field name="content" type="TextField"># signedとunsignedの比較

sizeofの型はunsignedとなっている．signedとunsignedを比較するとunsignedへの暗黙のキャストが行われる．ということで`-1`が`0xFF`になってしまうため思ったような結果にならないことが．．．

```
#include&lt;stdio.h&gt;

#define TOTAL_ELEMENTS (sizeof(array) /  sizeof(array[0]))
int array[] = { 23, 34, 12, 17, 204, 99, 16 };

int main()
{
    int d;

    for (d = -1; d &lt;=  (TOTAL_ELEMENTS - 2); d++)
    {
        printf("%d\n", array[d + 1]);
    }

    return 0;
}
```</field><field name="pub_date" type="DateTimeField">2015-08-17T02:44:35.314974+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="8"></object><object pk="1"></object></field></object><object pk="36" model="app.memo"><field name="title" type="CharField">ユニークなヒューマンピクトグラム集</field><field name="content" type="TextField"># 他ではあまり見ないようなおもしろいピクトグラム

[http://pictogram2.com](http://pictogram2.com)

![image](http://pictogram2.com/p/p0256/i/m.png)</field><field name="pub_date" type="DateTimeField">2015-08-18T06:58:13.361902+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="25"></object></field></object><object pk="37" model="app.memo"><field name="title" type="CharField">Googleマテリアルデザイン</field><field name="content" type="TextField"># マテリアルデザインとフラットデザインって結局何が違うの？

[http://matome.naver.jp/odai/2142379522980270301](http://matome.naver.jp/odai/2142379522980270301)

[http://photoshopvip.net/archives/76201](http://photoshopvip.net/archives/76201)

![image](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0Bx4BSt6jniD7SjE5bTNHN3JpQXc/style_color_introduction.png)</field><field name="pub_date" type="DateTimeField">2015-08-18T08:56:46.940325+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="25"></object></field></object><object pk="38" model="app.memo"><field name="title" type="CharField">Adobe Kuler</field><field name="content" type="TextField">ベースカラーを指定し，それに対応してgoodな色合いを見つけてくれます．モノトーン系だけでなく，補色を利用した物や類似色など，いろいろなタイプを選べます．

[https://color.adobe.com/ja/create/color-wheel/](https://color.adobe.com/ja/create/color-wheel/)

![image](http://cdn-ak.f.st-hatena.com/images/fotolife/b/blacktails2/20140713/20140713004301.png)</field><field name="pub_date" type="DateTimeField">2015-08-19T06:55:37.154466+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="25"></object></field></object><object pk="39" model="app.memo"><field name="title" type="CharField">フォームの2重送信を禁止</field><field name="content" type="TextField">djangoのログインシステムでCSRF検証失敗が403エラーで出ていたので，簡易的にクライアント側でjQueryでの防止策．

[http://weble.org/2012/06/12/jquery-multiplex-disable](http://weble.org/2012/06/12/jquery-multiplex-disable)

```
$('form').submit(function() {
    $(this).submit(function () {
        alert('フォームからのデータ送信は一度ずつ行なって下さい．');
        return false;
    });
});
```</field><field name="pub_date" type="DateTimeField">2015-08-22T08:32:42.107285+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="26"></object></field></object><object pk="42" model="app.memo"><field name="title" type="CharField">V-Sido OS</field><field name="content" type="TextField"># ヒューマノイドロボット用のOS

Kinectでシャア専用ズゴックを動かしていたのはこれ．KinectはひょっとしてSDKでなくハック？？

[https://v-sido-developer.com](https://v-sido-developer.com)

[http://www.v-sido.com/ja/index.html](http://www.v-sido.com/ja/index.html)

[https://www.youtube.com/watch?v=Qqz28b6SLzQ](https://www.youtube.com/watch?v=Qqz28b6SLzQ)

![image](https://v-sido-developer.com/wp-content/uploads/2014/12/top0605.png)</field><field name="pub_date" type="DateTimeField">2015-08-23T12:05:32.006062+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="27"></object></field></object><object pk="43" model="app.memo"><field name="title" type="CharField">ふらり寿司</field><field name="content" type="TextField"># 寿司と天ぷらの両方

[http://tabelog.com/aichi/A2301/A230102/23045059/](http://tabelog.com/aichi/A2301/A230102/23045059/)

![image](http://image1-2.tabelog.k-img.com/resize/660x370c/restaurant/images/Rvw/24879/24879442.jpg?token=f36f479&amp;api=v2)</field><field name="pub_date" type="DateTimeField">2015-08-26T10:52:05.322193+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="13"></object><object pk="30"></object><object pk="31"></object></field></object><object pk="44" model="app.memo"><field name="title" type="CharField">Gitで更新ファイルを抽出</field><field name="content" type="TextField">Gitで開発していたソースコードを，納品時などに更新したファイルだけ抜き出す方法．

```
$ git archive --format=zip --prefix=root/ HEAD `git diff --name-only --diff-filter=AMCR tagname HEAD` -o hoge.zip
```

※`tagname`はスタート時のコミットのtag名．</field><field name="pub_date" type="DateTimeField">2015-08-27T02:29:32.312931+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="32"></object></field></object><object pk="48" model="app.memo"><field name="title" type="CharField">Herokuコマンド覚え書き</field><field name="content" type="TextField">## Herokuアプリの新規作成

```
$ heroku create アプリ名
```
*アプリ名を省略するとランダムな名前で作成されてしまう．*

## ログの確認

```
$ heroku logs
```

## DBのクリア

```
$ heroku pg:reset DATABASE
```

*そのあと．．．*

```
$ heroku run rake db:migrate
$ heroku run rake db:seed
```

## pythonの実行方法

```
$ heroku run python manage.py syncdb
```

## herokuアカウントの切り替え

```
$ heroku logout
$ heroku login
```

*一度ログアウトしてから別アカウントでログイン．*

## そのほか詳しくは本家で
[https://devcenter.heroku.com](https://devcenter.heroku.com)</field><field name="pub_date" type="DateTimeField">2015-09-06T11:34:52.259941+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="33"></object></field></object><object pk="53" model="app.memo"><field name="title" type="CharField">Heroku + DjangoのDBバックアップ</field><field name="content" type="TextField"># DBバックアップ

```
$ heroku run python manage.py dumpdata app_name --format=xml &gt; app.xml
```

ローカルにapp.xmlが出力される．xmlの先頭に1行不要行が入っているので手動で削除する．

# DBリストア

```
$ heroku run python manage.py loaddata app.xml
```

まずはじめにgitでxmlをcommit + pushしておく．ローカルからはリストアできないっぽい．</field><field name="pub_date" type="DateTimeField">2015-09-13T18:07:34.030348+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="33"></object></field></object><object pk="54" model="app.memo"><field name="title" type="CharField">Heroku + DjangoのDB初期化</field><field name="content" type="TextField"># manage.py syncdbがなくなるようなので

```
$ heroku run python manage.py migrate auth
$ heroku run python manage.py migrate
$ heroku run python manage.py createsuperuser
```

Heroku環境では`migrate auth`で一部エラーが出るが，この手順が成功率高いっぽい．
</field><field name="pub_date" type="DateTimeField">2015-09-14T13:44:19.214106+00:00</field><field rel="ManyToOneRel" name="user" to="auth.user">2</field><field rel="ManyToManyRel" name="tags" to="app.tag"><object pk="1"></object><object pk="33"></object></field></object></django-objects>