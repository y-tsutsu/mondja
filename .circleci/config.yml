version: 2 # CircleCI 2.0 を使用します
jobs: # 1回の実行の基本作業単位
  build: # Workflows を使用しない実行では、エントリポイントとして `build` ジョブが必要
    # ステップが実行されるディレクトリ
    working_directory: ~/mondja
    docker: # Docker でステップを実行します
      # CircleCI Python イメージは https://hub.docker.com/r/circleci/python/ で入手できます
      - image: circleci/python:3.10
        environment: # プライマリコンテナの環境変数
          PIPENV_VENV_IN_PROJECT: true
          # DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
    steps: # `build` ジョブを構成するステップ
      - checkout # ソースコードを作業ディレクトリにチェックアウトします
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.10/site-packages
      - restore_cache:
      # 依存関係キャッシュについては https://circleci.com/docs/ja/2.0/caching/ をお読みください
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install --upgrade pip
            sudo pip install pipenv
            pipenv install --dev
            pipenv run static
      - save_cache: # Pipfile のチェックサムをキャッシュキーとして使用して、Python の依存関係をキャッシュします
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.10/site-packages"
      - run:
          command: |
            pipenv run test
            pipenv run covhtml
      - store_artifacts: # アーティファクト (https://circleci.com/docs/ja/2.0/artifacts/) に表示するテストサマリーをアップロードします
          path: htmlcov
          destination: tr1
